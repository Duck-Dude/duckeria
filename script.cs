using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.Animations;

namespace Mod
{
    public class Mod
    {
        //change the string value to the mod tag you want.
        public static string ModTag = "[AWP]";
        //change the string value to the mod category name you want.
        public static string ModCategoryName = "Team Wilson's Arsenal Weapon Pack";
        //change the string value to the mod name you want.

        public static Sprite Damagemap = ModAPI.LoadSprite("DamageMap.png");
        public static Sprite UpperMidCollider = ModAPI.LoadSprite("UpperMid_Collider.png");
        public static Sprite LowerCollider = ModAPI.LoadSprite("Lower_Collider.png");
        public static AudioClip BoilCollide = ModAPI.LoadSound("Guns/Original/Blood Boiler/Hit.wav");
        public static AudioClip BoilSound = ModAPI.LoadSound("Guns/Original/Blood Boiler/boiling.wav");
        public static Texture2D TestSkin = ModAPI.LoadTexture("suit.png");



        public static void Main()
        {
            
            
            
            
            
            
            
            ModAPI.Register<BugFixes>();
            
            //Most gun types:
            //(Pistol, 9mm Pistol, Handcannon, Revolver, Magnum Revolver, Submachine Gun, Soviet Submachine Gun, Assault Rifle, AK-47, Shotgun, Sniper Rifle)

            ModAPI.RegisterCategory(ModCategoryName, "A very large collection of weapons.", ModAPI.LoadSprite("CategoryThumb.png"));

            //Attachhments 
            #region attachments

            // SCOPE
            #region Scope


            // Eotech XPS3
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Scope Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} Eotech XPS3 Attachment", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'XPS3'  Holographic Weapon Sight  Skins: 2        \n\nThe EOTECH HWS XPS3 is a light and compact holographic weapon sight designed for compatability with nightvision and magnifiers.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Scope/XPS_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Attachments/Scope/XPS.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Scope/XPS_Tan.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Scope/XPS_Light_Tan.png")
                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Scope/XPS.png");

                    // Offset
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(0.055f, 0f);

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1553852f, -0.06918063f), new Vector2(0.01342729f, -0.06615574f), new Vector2(-0.04984685f, 0.04195796f), new Vector2(-0.1338035f, 0.0397915f), };

                }
            }
            );

            // Eotech 553
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Scope Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} Eotech M553 Attachment", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'553'  Holographic Weapon Sight  Skins: 2         \n\nThe EOTECH M553 is a holographic weapon sight similar to the XPS3 but designed for the US SOPMOD Block II program.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Scope/1x Holo_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Attachments/Scope/1x Holo.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Scope/1x Holo_Tan.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Scope/1x Holo_Light_Tan.png")
                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Scope/1x Holo.png");

                    // Offset
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(0.055f, 0f);

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1360515f, 0.04154911f), new Vector2(-0.1633149f, -0.06967095f), new Vector2(0.1044144f, -0.06967095f), new Vector2(0.09238298f, -0.01556355f), new Vector2(-0.04005834f, -0.01045669f), new Vector2(-0.04457399f, 0.0397915f), };
                }
            }
            );

            // Eotech 553 Magnifier
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Scope Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} Eotech 553 w/ 2x Magnifier Attachment", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'553 2x'  Holo / Magnifier Combo  Skins: 2          \n\nThe EOTECH M553, like many holographic sights is often paired with magnifiers in order to extend the effective range of a weapon system.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Scope/1-2xHolo_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Attachments/Scope/1-2xHolo.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Scope/1-2xHolo_Tan.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Scope/1-2xHolo_Light_Tan.png")
                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Scope/1-2xHolo.png");

                    // Offset
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(0.055f, 0f);

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.2397916f, 0.04682196f), new Vector2(-0.2433068f, -0.0731862f), new Vector2(0.2134273f, -0.07142857f), new Vector2(0.2106199f, -0.01394459f), new Vector2(0.07613064f, -0.01359311f), new Vector2(0.07146932f, 0.04506435f), };
                }
            }
            );

            // CompM4 Red Dot
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Scope Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} Aimpoint CompM4 Attachment", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'M68CCO'  Red Dot Reflex Sight  Skins: 2            \n\nThe Aimpoint CompM4 Red Dot is the U.S Militaries CQC Optic, it has an absurd 8 to 57 year battery life depending on the brightness. ", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Scope/RedDot_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Attachments/Scope/RedDot.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Scope/RedDot_Tan.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Scope/RedDot_Light_Tan.png")
                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Scope/RedDot.png");

                    // Offset
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(0.055f, 0f);

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.2222154f, 0.04154912f), new Vector2(-0.2063968f, -0.07142857f), new Vector2(0.06178208f, -0.06791333f), new Vector2(0.07232778f, 0.04154912f), };
                }
            }
            );

            // MRO Red Dot
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Scope Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} Trijicon MRO Red Dot Attachment", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'MRO'  Red Dot Reflex Sight  Skins: 2               \n\nThe Trijicon MRO is a extremely compact reflex sight with a large viewing area designed for use on rifles, carbines and shotguns. ", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Scope/MRO_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Attachments/Scope/MRO.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Scope/MRO_Tan.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Scope/MRO_Light_Tan.png")
                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Scope/MRO.png");

                    // Offset
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(0.055f, 0f);

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1285714f, 0.0380339f), new Vector2(-0.1272634f, -0.07142857f), new Vector2(0.008154415f, -0.06791336f), new Vector2(0.008154459f, 0.02131617f), };
                }
            }
            );

            // MARS Red Dot
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Scope Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} ITL MARS Reflex Sight Attachment", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'MARS'  Reflex Sight  Skins: 2                      \n\nThe ITL MARS is a Israeli made Reflex sight that was purchased by the U.S military and used by U.S forces during the invasion of Iraq.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Scope/MARS_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Attachments/Scope/MARS.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Scope/MARS_Tan.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Scope/MARS_Light_Tan.png")

                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Scope/MARS.png");

                    // Offset
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(0.055f, 0f);

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1562844f, 0.04109952f), new Vector2(-0.1562844f, -0.06615571f), new Vector2(0.06881255f, -0.06791336f), new Vector2(0.06881253f, -0.01604334f), };
                }
            }
            );

            // Mini Reflex Sight
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Scope Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} Trijicon RMR Reflex Sight Attachment", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'RMR'  Reflex Sight  Skins: 2                       \n\nThe Trijicon RMR Reflex Sight is the U.S Militaries reflex sight of choice for handguns due to it's durability and reliability.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Scope/Mini Dot_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Attachments/Scope/Mini Dot.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Scope/Mini Dot_Tan.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Scope/Mini Dot_Light_Tan.png")
                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Scope/Mini Dot.png");

                    // Offset
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(0.055f, 0f);

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.01694252f, -0.06791333f), new Vector2(0.01428571f, 0.02045774f), new Vector2(-0.1400163f, -0.0705294f), };
                }
            }
            );

            // Kobra Reflex Sight
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Scope Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} EKP-8-02 Reflex Sight Attachment", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'Kobra'  Reflex Sight  Skins: 0                     \n\nThe EKP-8-02 Kobra is a Russian made reflex sight manufactured by Axion, popular among security agencies and civillian markets.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Scope/Kobra_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Scope/Mini Dot.png");

                    // Offset
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(0.055f, 0f);

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.04804848f, -0.01645219f), new Vector2(-0.1848559f, -0.01428571f), new Vector2(-0.1830982f, -0.07142857f), new Vector2(0.1241978f, -0.07142857f), new Vector2(0.1171673f, 0.0485796f), };
                }
            }
            );

            // OKP7
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Scope Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} OKP-7 Reflex Sight Attachment", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'OKP'  Reflex Sight  Skins: 0                       \n\nThe OKP-7 is a Russian made low profile offset reflex sight designed so that it can be easily used interchangably with iron sights.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Scope/OKP7_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Scope/OKP7.png");

                    // Offset
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(0.055f, 0f);

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.01686107f, -0.01469456f), new Vector2(-0.1602492f, -0.01649291f), new Vector2(-0.1866135f, -0.07142857f), new Vector2(0.07584299f, -0.07142857f), new Vector2(0.07370578f, 0.07082734f), new Vector2(0.02135693f, 0.07142857f), };
                }
            }
            );

            // PK-AS
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Scope Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} PK-AS Collimator Sight Attachment", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'PK-AS'  Collimator Sight  Skins: 0                 \n\nThe PK-AS is a Russian made collimator sight with a very clear sight picture and reticle designed for both precision and CQB.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Scope/PK-AS_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Scope/PK-AS.png");

                    // Offset
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(0.055f, 0f);

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1527693f, 0.04506435f), new Vector2(-0.158042f, -0.06967098f), new Vector2(-0.04371557f, -0.06967095f), new Vector2(0.01122007f, 0.04330673f), };
                }
            }
            );

            // Acog
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Scope Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} Trijicon ACOG 4x32 Attachment", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'ACOG'  Magnified Optic  Skins: 2                   \n\nThe Trijicon Acog is the RCO of choice for the U.S. Marine Corps, it provides 4x magnification and illumination without batteries.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Scope/Acog_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Attachments/Scope/Acog.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Scope/Acog_Tan.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Scope/Acog_Light_Tan.png")
                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Scope/Acog.png");

                    // Offset
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(0, 0);

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1546344f, 0.04801588f), new Vector2(-0.1571429f, -0.07142857f), new Vector2(0.1237983f, -0.07038655f), new Vector2(0.1571429f, 0.07142857f), };
                }
            }
            );

            // SpectreDR_4x
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Scope Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} ELCAN Specter DR 1-4x Attachment", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'ELCAN'  Magnified Optic  Skins: 2                  \n\nThe ELCAN SpecterDR 1-4x Scope is a very clear magnified optic that can easily be switched to 1x and provides a very high field of view.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Scope/SpectreDR_4x_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Attachments/Scope/SpectreDR_4x.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Scope/SpectreDR_4x_Tan.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Scope/SpectreDR_4x_Light_Tan.png")
                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Scope/SpectreDR_4x.png");

                    // Offset
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(0.086f, 0f);

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1426731f, 0.07142857f), new Vector2(-0.1901287f, -0.06791333f), new Vector2(0.04817072f, -0.0626405f), new Vector2(0.1060479f, -0.009817313f), new Vector2(0.04772116f, 0.07142857f), };
                }
            }
            );

            // LPVO
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Scope Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} Vortex Strike Eagle 1-6x LPVO Attachment", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'LPVO'  Variable Magnified Optic  Skins: 2            \n\nThe Vortex Strike Eagle 1-6x is a Low-Powered Variable optic (LPVO) with a very clear sight picture and exceptional eye-relief.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Scope/LPVO_6x_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Attachments/Scope/LPVO_6x.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Scope/LPVO_6x_Tan.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Scope/LPVO_6x_Light_Tan.png")
                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Scope/LPVO_6x.png");

                    // Offset
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(0.055f, 0f);

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.2437564f, 0.07142857f), new Vector2(-0.2415491f, -0.01518492f), new Vector2(-0.06550841f, -0.01458432f), new Vector2(-0.1041769f, -0.07228579f), new Vector2(0.004906498f, -0.06731307f), new Vector2(0.2736358f, -0.01342726f), new Vector2(0.2688125f, 0.04020034f), };
                }
            }
            );

            // Zeis_12x
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Scope Attachment"), //item to derive from
                                                
                NameOverride = $"{Mod.ModTag} Zeiss 3-12x Attachment", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'Zeiss 12x'  Magnified Optic  Skins: 2              \n\nThe Zeiss 3-12x Scope is a long range hunting sight designed as a lightweight and very reliable and high quality 30mm scope.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Scope/Zeis_12x_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Attachments/Scope/Zeis_12x.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Scope/Zeis_12x_Tan.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Scope/Zeis_12x_Light_Tan.png")
                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Scope/Zeis_12x.png");

                    // Offset
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(0.055f, 0f);

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.008f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.008f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.3593501f, 0.04330673f), new Vector2(-0.3577473f, -0.04142881f), new Vector2(-0.1537092f, -0.06615574f), new Vector2(0.2991416f, -0.06967095f), new Vector2(0.3026568f, 0.04154912f), };
                }
            }
            );

            // Leupold 25x
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Scope Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} Leupold 5-25x Attachment", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'5HD'  Magnified Optic  Skins: 2                    \n\nThe Leupold 5-25x 5HD is a relatively light high magnification scope used for very long distance sniping in both hunting and military use.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Scope/Leupold25x_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Attachments/Scope/Leupold25x.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Scope/Leupold25x_Tan.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Scope/Leupold25x_Light_Tan.png")
                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Scope/Leupold25x.png");

                    // Offset
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(0.055f, 0f);

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.01f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.3857143f, 0.07142857f), new Vector2(-0.3839567f, -0.01518489f), new Vector2(-0.1076355f, -0.07142857f), new Vector2(0.3857143f, -0.07142857f), new Vector2(0.3857143f, 0.07142857f), };
                }
            }
            );

            #endregion

            // BARREL
            #region Barrel


            //AR Suppressor
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Stone Brick"), //item to derive from
                NameOverride = $"{Mod.ModTag} Socom 556 Suppresor Attachment", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'RC2'  Suppressor  Skins: 2                         \n\nThe Socom 556 Suppresor is designed and manufactured by surefire predominantly for military use, it is designed for 5.56mm weapons.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Barrel/Muzzles/AR_Suppress_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //if(Instance.GetComponent<SupressorAttachmentBehaviour>() == null)
                    {
                        //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Attachments/Barrel/Muzzles/AR_Suppress.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Barrel/Muzzles/AR_Suppress_Tan.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Barrel/Muzzles/AR_Suppress_Light_Tan.png"),
                    };
                    //Set to zero so it always starts normal
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;}

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Barrel/Muzzles/AR_Suppress.png");
                    Instance.FixColliders();
                    Instance.GetOrAddComponent<SupressorAttachmentBehaviour>().AttachmentOffset = new Vector2(0f, 0f);
                    Instance.GetComponent<SupressorAttachmentBehaviour>().DefaultSupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav")
                    };
                    Instance.GetComponent<SupressorAttachmentBehaviour>().ConnectClip = ModAPI.LoadSound("Guns/Attachments/Barrel/Muzzles/Suppressor Connect.wav");
                    Instance.GetComponent<PhysicalBehaviour>().RecalculateMassBasedOnSize();
                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.008f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.008f;
                    Instance.GetComponent<SupressorAttachmentBehaviour>().AttachmentMuzzlePosition = new Vector2(0.3f, 0f);
                    }
                    //else
                    //{
                    //    Instance.FixColliders();
                    //    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Barrel/Muzzles/AR_Suppress.png");
                    //    
                    //    Instance.GetComponent<SupressorAttachmentBehaviour>().DefaultSupressorSounds = new AudioClip[]
                    //    {
                    //        ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav")
                    //    };
                    //Instance.GetComponent<SupressorAttachmentBehaviour>().ConnectClip = ModAPI.LoadSound("Guns/Attachments/Barrel/Muzzles/Suppressor Connect.wav");
                    //if(Instance.transform.parent != null && Instance.transform.parent.GetComponent<FirearmBehaviour>())
                    //{
                    //    Instance.GetComponent<SupressorAttachmentBehaviour>().FirearmBehaviour = Instance.transform.parent.GetComponent<FirearmBehaviour>();
                    //    //use liqn to get all attachment points and find the one with the type of barrel
                    //    Instance.GetComponent<SupressorAttachmentBehaviour>().AttachmentPoint = Instance.transform.parent.GetComponentsInChildren<FirearmAttachmentPointBehaviour>().Where(x => x.AttachmentType == FirearmAttachmentType.AttachmentType.Other).FirstOrDefault();
                    //}
                    //}
                }
            }
            );

            // AK Suppressor
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Stone Brick"), //item to derive from
                NameOverride = $"{Mod.ModTag} PBS-1 Suppressor Attachment", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'PBS'  Suppressor  Skins: 0                         \n\nThe PBS-1 Suppressor is a Russian made suppressor designed for the AKM and other 7.62x39mm weapons, first introduced in the 1960's.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Barrel/Muzzles/AK_Suppress_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Barrel/Muzzles/AK_Suppress.png");
                    Instance.FixColliders();
                    Instance.GetOrAddComponent<SupressorAttachmentBehaviour>().AttachmentOffset = new Vector2(0f, 0f);
                    Instance.GetComponent<SupressorAttachmentBehaviour>().DefaultSupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav")
                    };
                    Instance.GetComponent<SupressorAttachmentBehaviour>().ConnectClip = ModAPI.LoadSound("Guns/Attachments/Barrel/Muzzles/Suppressor Connect.wav");
                    Instance.GetComponent<PhysicalBehaviour>().RecalculateMassBasedOnSize();
                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.008f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.008f;
                    Instance.GetComponent<SupressorAttachmentBehaviour>().AttachmentMuzzlePosition = new Vector2(0.3f, 0f);
                }
            }
            );


            #endregion

            // GRIP
            #region Grip


            // Angled Foregrip
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Laser Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} Stark Express Angled Grip Attachment", //new item name with a suffix to assure it is globally
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'EXPRESS'  Foregrip  Skins: 2                       \n\nThe Stark Express Forward Angled Grip is a foregrip specifically designed for shooters who like to put their fingers near the barrel.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Under/Grip_1_Angled_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // Effectively Disables laser we use as attachment to base grips off
                    Instance.GetComponent<LaserBehaviour>().Range = 0;
                    // Offset for Grip
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(-0.047f, -0.042f);

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Attachments/Under/Grip_1_Angled.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Under/Grip_1_Angled_Tan.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Under/Grip_1_Angled_Light_Tan.png")
                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Under/Grip_1_Angled.png");

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.006f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.006f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1485796f, 0.04195796f), new Vector2(-0.05885973f, 0.04641309f), new Vector2(-0.004823236f, 0.1527692f), new Vector2(-0.1050888f, 0.1540772f), };
                }
            }
            );

            // AM5 Foregrip
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Laser Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} GG&G Vertical Foregrip Attachment", //new item name with a suffix to assure it is globally
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'Vertical'  Foregrip  Skins: 2                      \n\nThe GG&G Vertical Foregrip is a standard vertical foregrip, it provides a more comfortable and easier to control position for the offhand.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Under/Grip_2_AM5_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // Effectively Disables laser we use as attachment to base grips off
                    Instance.GetComponent<LaserBehaviour>().Range = 0;
                    // Offset for Grip
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(-0.047f, -0.042f);

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Attachments/Under/Grip_2_AM5.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Under/Grip_2_AM5_Tan.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Under/Grip_2_AM5_Light_Tan.png")
                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Under/Grip_2_AM5.png");

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.006f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.006f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1134097f, 0.15775f), new Vector2(-0.08476567f, -0.04183131f), new Vector2(-0.02995665f, -0.04199869f), new Vector2(-0.0004176609f, 0.158042f), };
                }
            }
            );

            // RVG Foregrip
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Laser Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} Magpul RVG Foregrip Attachment", //new item name with a suffix to assure it is globally
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'RVG'  Foregrip  Skins: 2                           \n\nThe Magpul RVG Vertical Foregrip is a short light-weight ergonomic vertical foregrip designed and manufactured by magpul.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Under/Grip_3_RVG_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // Effectively Disables laser we use as attachment to base grips off
                    Instance.GetComponent<LaserBehaviour>().Range = 0;
                    // Offset for Grip
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(-0.047f, - 0.042f);

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Attachments/Under/Grip_3_RVG.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Under/Grip_3_RVG_Tan.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Under/Grip_3_RVG_Light_Tan.png"),

                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Under/Grip_3_RVG.png");

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.006f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.006f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.08423246f, 0.01324227f), new Vector2(-0.03257852f, 0.01393024f), new Vector2(-0.00300533f, 0.1571845f), new Vector2(-0.1122821f, 0.1571845f), };
                }
            }
            );

            // BCM Foregrip
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Laser Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} BCM Vertical Foregrip Attachment", //new item name with a suffix to assure it is globally
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'GUNFIGHTER'  Foregrip  Skins: 2                    \n\nThe BCM GUNFIGHTER Vertical Foregrip is a low-profile very short vertical ergonomic vertical foregrip with a keymod mounting system.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Under/Grip_4_BCM_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // Effectively Disables laser we use as attachment to base grips off
                    Instance.GetComponent<LaserBehaviour>().Range = 0;
                    // Offset for Grip
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(-0.047f, -0.042f);

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Attachments/Under/Grip_4_BCM.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Under/Grip_4_BCM_Tan.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Under/Grip_4_BCM_Light_Tan.png"),
                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Under/Grip_4_BCM.png");

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.006f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.006f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.112812f, 0.1612318f), new Vector2(-0.08276684f, 0.04171568f), new Vector2(-0.02800068f, 0.04171568f), new Vector2(-0.00147371f, 0.1627055f), };
                }
            }
            );

            // Gripod Foregrip
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Laser Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} EBF-2 Bipod / Foregrip Attachment", //new item name with a suffix to assure it is globally
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'Gripod'  Bipod / Foregrip  Skins: 2             \n\nThe EBF-2 is a Bipod / Foregrip hybrid designed with retractable legs in order to try and make the best out of both worlds.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Under/Grip_5_GripPod_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // Effectively Disables laser we use as attachment to base grips off
                    Instance.GetComponent<LaserBehaviour>().Range = 0;
                    // Offset for Grip
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(-0.047f, -0.042f);

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Attachments/Under/Grip_5_GripPod.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Under/Grip_5_GripPod_Tan.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Under/Grip_5_GripPod_Light_Tan.png")
                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Under/Grip_5_GripPod.png");

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.006f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.006f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1154272f, 0.1571429f), new Vector2(-0.08333758f, -0.01247974f), new Vector2(-0.03037742f, -0.0124797f), new Vector2(0f, 0.1582843f), };
                }
            }
            );

            // Mlok Foregrip
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Laser Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} Magpul AFG Foregrip Attachment", //new item name with a suffix to assure it is globally
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'AFG'  Foregrip  Skins: 0                           \n\nThe Magpul M-LOK AFG is a angled horizontal foregrip designed to be ergonomic it is often used by shooters with c-clamp grip styles.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Under/Grip_6_MLok_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // Effectively Disables laser we use as attachment to base grips off
                    Instance.GetComponent<LaserBehaviour>().Range = 0;
                    // Offset for Grip
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(-0.047f, -0.042f);

                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Under/Grip_6_MLok.png");

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.006f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.006f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1410512f, 0.1578074f), new Vector2(-0.1420479f, 0.0959111f), new Vector2(-0.001805976f, 0.1547662f), };
                }
            }
            );

            // Mlok Small Foregrip
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Laser Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} Handstop Foregrip Attachment", //new item name with a suffix to assure it is globally
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'Handstop'  Foregrip  Skins: 0                      \n\nHandstop foregrips are used almost exclusively by shooters with C-clamp grip styles in order to stop the hand from slipping.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Under/Grip_7_MLok_Small_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // Effectively Disables laser we use as attachment to base grips off
                    Instance.GetComponent<LaserBehaviour>().Range = 0;
                    // Offset for Grip
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(-0.047f, -0.042f);

                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Under/Grip_7_MLok_Small.png");

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.006f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.006f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1410512f, 0.1578074f), new Vector2(-0.1420479f, 0.0959111f), new Vector2(-0.001805976f, 0.1547662f), };
                }
            }
            );

            // Stubby Foregrip
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Laser Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} TangoDown Vertical Foregrip Attachment", //new item name with a suffix to assure it is globally
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'Stubby'  Foregrip  Skins: 2                        \n\nThe TangoDown Vertical Foregrip is a very common sight on U.S assault rifles and even shotguns, it is a cheap and functional vertical grip.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Under/Grip_8_Stub_Small_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // Effectively Disables laser we use as attachment to base grips off
                    Instance.GetComponent<LaserBehaviour>().Range = 0;
                    // Offset for Grip
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(-0.047f, - 0.042f);

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Attachments/Under/Grip_8_Stub_Small.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Under/Grip_8_Stub_Small_Tan.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Under/Grip_8_Stub_Small_Light_Tan.png")
                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Under/Grip_8_Stub_Small.png");

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.006f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.006f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.08390832f, 0.01133825f), new Vector2(-0.02685924f, 0.01224126f), new Vector2(-0.001622126f, 0.1545464f), new Vector2(-0.1098645f, 0.1553369f), };
                }
            }
            );

            // Angled Vertical Foregrip
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Laser Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} Specna Arms Vertical Foregrip Attachment", //new item name with a suffix to assure it is globally
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'Specna'  Foregrip  Skins: 2                        \n\nThe Specna Arms Vertical Foregrip is an angled Swept-back foregrip designed to have a more comfortable wrist position than other grips.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Under/Grip_9_AngledVert_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // Effectively Disables laser we use as attachment to base grips off
                    Instance.GetComponent<LaserBehaviour>().Range = 0;
                    // Offset for Grip
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(-0.047f, -0.042f);
                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Attachments/Under/Grip_9_AngledVert.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Under/Grip_9_AngledVert_Tan.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Under/Grip_9_AngledVert_Light_Tan.png"),
                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Under/Grip_9_AngledVert.png");

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.006f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.006f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1183746f, -0.008961547f), new Vector2(-0.03470478f, -0.01247973f), new Vector2(-0.0009029936f, 0.1566659f), new Vector2(-0.07368605f, 0.159758f), };
                }
            }
            );

            // Angled Mlok Foregrip
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Laser Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} Magpul AFG2 Angled Foregrip Attachment", //new item name with a suffix to assure it is globally
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'AFG2'  Foregrip  Skins: 2                          \n\nThe Magpul AFG2 Angled Foregrip is a angled horizontal foregrip designed to be ergonomic and is used by shooters with c-clamp grip styles.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Under/Grip_10_Angled_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // Effectively Disables laser we use as attachment to base grips off
                    Instance.GetComponent<LaserBehaviour>().Range = 0;
                    // Offset for Grip
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(-0.047f, -0.042f);
                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Attachments/Under/Grip_10_Angled.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Under/Grip_10_Angled_Tan.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Under/Grip_10_Angled_Light_Tan.png")
                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Under/Grip_10_Angled.png");

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.006f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.006f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1425249f, 0.1541954f), new Vector2(-0.1410512f, 0.07290228f), new Vector2(0.03413405f, 0.1550984f), };
                }
            }
            );

            // Small Angled Mlok Foregrip
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Laser Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} Tacticon BattleGrip 12 Foregrip Attachment", //new item name with a suffix to assure it is globally
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'BG12'  Foregrip  Skins: 2                          \n\nThe Tacticon BattleGrip 12 Foregrip is a angled grip designed for point shooting, it provides a natural hand position and high ergonomics.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Under/Grip_11_AngledSmall_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // Effectively Disables laser we use as attachment to base grips off
                    Instance.GetComponent<LaserBehaviour>().Range = 0;
                    // Offset for Grip
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(-0.047f, -0.042f);

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Attachments/Under/Grip_11_AngledSmall.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Under/Grip_11_AngledSmall_Tan.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Under/Grip_11_AngledSmall_Light_Tan.png")
                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Under/Grip_11_AngledSmall.png");

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.006f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.006f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.112812f, 0.06881339f), new Vector2(-0.01669642f, 0.1037399f), new Vector2(0.03503704f, 0.1568106f), new Vector2(-0.112812f, 0.1553369f), };
                }
            }
            );

            // Harris Bipod
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Laser Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} Harris Bipod Attachment", //new item name with a suffix to assure it is globally
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'Harris'  Bipod  Skins: 0                           \n\nHarris Bipods go hand in hand with marksman rifles and snipers, very commonly used within the U.S Military and among hunters.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Under/Bipod_1_Harris_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // Effectively Disables laser we use as attachment to base grips off
                    Instance.GetComponent<LaserBehaviour>().Range = 0;
                    // Offset for Grip
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(-0.047f, -0.042f);

                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Under/Bipod_1_Harris.png");

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.006f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.006f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.0839567f, 0.1562844f), new Vector2(-0.05452684f, -0.0714286f), new Vector2(-0.004373681f, -0.0731862f), new Vector2(-0.03032902f, 0.1562844f), };
                }
            }
            );

            // LW17 Bipod
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Laser Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} ACCU-SHOT LW17 Bipod Attachment", //new item name with a suffix to assure it is globally
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'LW17'  Bipod  Skins: 0                             \n\nThe ACCU-SHOT LW17 is a very common highly reliable and sturdy bipod used by many, hunters, law enforcement and military alike.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Under/Bipod_2_LW17_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // Effectively Disables laser we use as attachment to base grips off
                    Instance.GetComponent<LaserBehaviour>().Range = 0;
                    // Offset for Grip
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(-0.047f, -0.042f);

                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Under/Bipod_2_LW17.png");

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.008f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.008f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1132769f, 0.1586577f), new Vector2(-0.06597f, 0.1238426f), new Vector2(-0.06371633f, -0.04194167f), new Vector2(-0.08882071f, -0.06660531f), new Vector2(-0.001348741f, -0.0688125f), new Vector2(-0.02725918f, -0.01156867f), new Vector2(-0.01009616f, 0.158042f), };
                }
            }
            );

            // LW17 Extended Bipod
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Laser Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} LW17 Bipod Extended Attachment", //new item name with a suffix to assure it is globally
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'LW17'  Bipod  Skins: 0                             \n\nThe ACCU-SHOT LW17 is a very common highly reliable and sturdy bipod used by many, hunters, law enforcement and military alike.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Under/Bipod_3_LW17Ext_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // Effectively Disables laser we use as attachment to base grips off
                    Instance.GetComponent<LaserBehaviour>().Range = 0;
                    // Offset for Grip
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(-0.047f, -0.042f);

                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Under/Bipod_3_LW17Ext.png");

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.008f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.008f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1081544f, 0.1545268f), new Vector2(-0.09012873f, -0.2107705f), new Vector2(-0.0008584373f, -0.2125281f), new Vector2(-0.006131288f, 0.1527692f), };
                }
            }
            );

            #endregion

            // LASER
            #region Laser


            // MAWL C1 Laser
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Laser Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} B.E. MAWL C1 Laser Attachment", //new item name with a suffix to assure it is globally
                NameToOrderByOverride = "Z",
              
                DescriptionOverride = "'MAWL'  Laser  Skins: 0                             \n\nThe B.E. Meyers MAWL-C1+ is an american IR and visible Laser combo device designed for military use designed for use under NVGs.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Under/Laser_1_MAWL_C1_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // Offset for Grip
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(-0.047f, -0.042f);
                    // Sets Laser Position
                    Instance.GetComponent<LaserBehaviour>().barrelPosition = new Vector2(0, 0.115f);

                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Under/Laser_1_MAWL_C1.png");

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1098646f, 0.1003323f), new Vector2(-0.001235254f, 0.1020445f), new Vector2(0.02766844f, 0.1582843f), new Vector2(-0.1699548f, 0.1568106f), };
                }
            }
            );

            // SM5 Micro Laser
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Laser Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} SM5 Micro Laser Attachment", //new item name with a suffix to assure it is globally
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'SM5'  Laser  Skins: 0                              \n\nThe SM5 Micro Laser is a laser device designed for use on pistols, it can provide the user the ability to accurately hit shots in hipfire.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Under/Laser_2_SM5Micro_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // Offset for Grip
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(-0.047f, -0.042f);
                    // Sets Laser Position
                    Instance.GetComponent<LaserBehaviour>().barrelPosition = new Vector2(-0.05f, 0.115f);

                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Under/Laser_2_SM5Micro.png");

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.03674921f, 0.1003323f), new Vector2(-0.03037739f, 0.1569044f), new Vector2(-0.1178977f, 0.1553369f), };
                }
            }
            );

            // BX5 Micro Laser
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Laser Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} BX5 Micro Laser Attachment", //new item name with a suffix to assure it is globally
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'BX5'  Laser  Skins: 0                              \n\nThe BX5 Micro Laser is a laser device designed for use on pistols, it can provide the user the ability to accurately hit shots in hipfire.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Under/Laser_3_BX5Micro_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // Offset for Grip
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(-0.047f, -0.042f);
                    // Sets Laser Position
                    Instance.GetComponent<LaserBehaviour>().barrelPosition = new Vector2(0f, 0.142f);

                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Under/Laser_3_BX5Micro.png");

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.06018153f, 0.1853521f), new Vector2(-0.1157594f, 0.1568106f), new Vector2(-0.1169009f, 0.1285714f), new Vector2(0.0297129f, 0.1300452f), new Vector2(0.02766844f, 0.1582843f), };
                }
            }
            );

            #endregion

            // LIGHTS
            #region Lights

            // SL Micro Light
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Flashlight Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} SL Micro Light Attachment", //new item name with a suffix to assure it is globally
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'SL Micro'  Laser  Skins: 0                         \n\nThe SL Micro Light is a illumination device designed for use on pistols, it can output up to 150 lumens making it ideal for night shooting.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Under/Light_1_SLMicro_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned 
                {

                    // Offset for Grip
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(-0.047f, -0.042f);
                    // Sets offsets of lights
                    Instance.transform.GetChild(0).localPosition = new Vector3(3.1f, 0.14f, 0);
                    Instance.transform.GetChild(0).localScale = new Vector3(0.0561f, 0.1815f, 1);

                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Under/Light_1_SLMicro.png");

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1183746f, 0.1586166f), new Vector2(-0.1163302f, 0.1289037f), new Vector2(0.0002808869f, 0.1300337f), new Vector2(0.00147371f, 0.1627993f), };
                }
            }
            );

            // VIR II Flashlight
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Flashlight Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} VIR II Flashlight Attachment", //new item name with a suffix to assure it is globally
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'VIR II'  Laser  Skins: 0                           \n\nThe VIR II Tactical gun light combo device can output both visible and IR light, it also can emit an IR laser for designating targets.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Under/Light_2_VIR_II_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    // Offset for Grip
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(-0.047f, -0.042f);
                    // Sets offsets of lights
                    Instance.transform.GetChild(0).localPosition = new Vector3(3.127f, 0.13f, 0);

                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Under/Light_2_VIR_II.png");

                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.007f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1142857f, 0.09786177f), new Vector2(-0.1227958f, 0.1571429f), new Vector2(-0.0646515f, 0.1818072f), new Vector2(0.03118661f, 0.1600903f), new Vector2(0.0270977f, 0.1022829f), };
                }
            }
            );

            #endregion

            // UNDERBARREL
            #region Underbarrel

            // Firework Rounds Attachment
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Capacitor Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} Firework Rounds Underbarrel Attachment", //new item name with a suffix to assure it is globally
                NameToOrderByOverride = "Z",
                DescriptionOverride = "4th of July Moment", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Under/Firework_Attachment_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // Effectively Disables laser we use as attachment to base grips off
                    //Instance.GetComponent<LaserBehaviour>().Range = 0;
                    // Offset for Grip
                    if(Instance.GetComponent<FireworkRoundsAttachment>() == null)
                    {
                        Instance.AddComponent<FireworkRoundsAttachment>().ConnectClip = Instance.GetComponent<BatteryAttachmentBehaviour>().ConnectClip;
                        Component.Destroy(Instance.GetComponent<BatteryAttachmentBehaviour>());
                    }
                    else
                    {
                        Instance.GetComponent<FireworkRoundsAttachment>().ConnectClip = ModAPI.FindSpawnable("Capacitor Attachment").Prefab.GetComponent<BatteryAttachmentBehaviour>().ConnectClip;
                    }

                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Under/Firework_Attachment.png");
                }
            }
            );

            // M26 Shotgun
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Shotgun"), //item to derive from
                NameOverride = $"{Mod.ModTag} MASS M26 Underbarrel Attachment", //new item name with a suffix to assure it is globally
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'M26'  12 gauge  Skins: 0                             \n\nThe M26-MASS is a breaching shotgun to toggle when attached right click on the weapon and select 'Toggle Underbarrel'", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Under/Under_M26_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // Effectively Disables laser we use as attachment to base grips off
                    //Instance.GetComponent<LaserBehaviour>().Range = 0;
                    // Offset for Grip
                    Instance.AddComponent<UnderBarrelGun>().AttachmentOffset = new Vector2(-0.079f, -0.01f);


                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Under/Under_M26.png");

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1390674f, 0.1575931f), new Vector2(-0.1751466f, 0.2185924f), new Vector2(-0.2553369f, 0.2157594f), new Vector2(-0.312081f, 0.08281203f), new Vector2(-0.2523894f, -0.01043529f), new Vector2(-0.09445907f, -0.01174589f), new Vector2(-0.0478236f, -0.123818f), new Vector2(0.08733268f, -0.0605418f), new Vector2(0.02550522f, 0.07188278f), new Vector2(0.3163008f, 0.1074732f), new Vector2(0.3113383f, 0.1568106f), };

                    Instance.GetComponent<PhysicalBehaviour>().RecalculateMassBasedOnSize();
                    Instance.GetComponent<Rigidbody2D>().mass = 0.1f;
                    Instance.GetComponent<PhysicalBehaviour>().InitialMass = 0.1f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector3(0.33f, 0.13f, 0);

                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.21428f, 0.0857f, 0f); // Sets position of grip
                    Instance.transform.Find("BarrelAttachment").transform.localScale = new Vector3(0.9f, 0.9f, 0.9f);
                    Instance.transform.Find("ScopeAttachment").gameObject.SetActive(false); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_3.wav")
                    };

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/Shot_Casing.png"); Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat; Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(1.4f, 1.4f, 1.4f);
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(1.2f, 1.2f, 1.2f);
                }
            }
            );

            // Masterkey Shotgun
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Shotgun"), //item to derive from
                NameOverride = $"{Mod.ModTag} Masterkey Underbarrel Attachment", //new item name with a suffix to assure it is globally
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'Masterkey'  12 gauge  Skins: 0                     \n\nThe Masterkey is a breaching shotgun, to toggle when attached right click on the weapon and select 'Toggle Underbarrel'", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Under/Under_Masterkey_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // Effectively Disables laser we use as attachment to base grips off
                    //Instance.GetComponent<LaserBehaviour>().Range = 0;
                    // Offset for Grip
                    if(Instance.GetComponent<UnderBarrelGun>() == null)
                    {
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2f, -0.0422f, 0f); // Sets position of grip
                    Instance.transform.Find("BarrelAttachment").transform.localScale = new Vector3(0.9f, 0.9f, 0.9f);
                    Instance.transform.Find("ScopeAttachment").gameObject.SetActive(false); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;
                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_3.wav")
                    };
                
                    }
                    Instance.GetOrAddComponent<UnderBarrelGun>().AttachmentOffset = new Vector2(-0.158f, 0.005f);

                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Under/Under_Masterkey.png");

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.3857143f, 0.08571429f), new Vector2(-0.3857143f, -0.02652947f), new Vector2(-0.3588456f, -0.02637187f), new Vector2(-0.3220604f, -0.08373046f), new Vector2(-0.2760205f, -0.08302604f), new Vector2(-0.239218f, -0.02699062f), new Vector2(-0.07070149f, -0.02468174f), new Vector2(-0.07200174f, 0.00386236f), new Vector2(0.09979461f, 2.50591E-05f), new Vector2(0.1004694f, -0.02725318f), new Vector2(0.2996083f, -0.02797979f), new Vector2(0.3004608f, 0.000268166f), new Vector2(0.3561676f, -2.963841E-05f), new Vector2(0.3566779f, 0.02716916f), new Vector2(0.3283277f, 0.02828239f), new Vector2(0.328709f, 0.0558065f), new Vector2(0.3845557f, 0.05806798f), new Vector2(0.3857143f, 0.08571429f), };

                    Instance.GetComponent<PhysicalBehaviour>().RecalculateMassBasedOnSize();
                    Instance.GetComponent<Rigidbody2D>().mass = 0.05f;
                    Instance.GetComponent<PhysicalBehaviour>().InitialMass = 0.05f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.05f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector3(0.397f, 0.0717f, 0);

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/Shot_Casing.png"); Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat; Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(1.4f, 1.4f, 1.4f);
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(1.2f, 1.2f, 1.2f);


                }
            }
            );

            // M203 Launcher
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Grenade Launcher"), //item to derive from
                NameOverride = $"{Mod.ModTag} M203 40mm Underbarrel Attachment", //new item name with a suffix to assure it is globally
                NameToOrderByOverride = "Z",                                             //\n\nThe M203 Grenade launcher is a single shot 40mm grenade launcher designed with a mount that attaches to M4 rifles.", //new item description
                DescriptionOverride = "'M203'  40 mm  Skins: 2                             \n\nThe M203 is a Grenade Launcher, to toggle when attached right click on the weapon and select 'Toggle Underbarrel'", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Under/Under_M203_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    Sprite Rocket = ModAPI.LoadSprite("Guns/Launchers/MGL/MGL_Round.png");

                    Instance.AddComponent<UseEventTrigger>().Action = () =>
                    {
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<SpriteRenderer>().sprite = Rocket;
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<ExplosiveBehaviour>().Range = 10;
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<ExplosiveBehaviour>().BigExplosion = false;
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<ExplosiveBehaviour>().FragmentForce = 0.8f;
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<ExplosiveBehaviour>().ExplodesOnFragmentHit = false;
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<PointToVelocityBehaviour>().enabled = false;
                    };

                    // Offset for Grip
                    Instance.GetOrAddComponent<UnderBarrelLauncher>().AttachmentOffset = new Vector2(-0.08f, -0.023f);

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Attachments/Under/Under_M203.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Under/Under_M203_Tan.png"),
                        ModAPI.LoadSprite("Guns/Attachments/Under/Under_M203_Light_Tan.png")
                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Under/Under_M203.png");

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.3125106f, 0.06982374f), new Vector2(-0.3142857f, -0.1f), new Vector2(0.3142857f, -0.03964749f), new Vector2(0.3142857f, 0.06804867f), };

                    Instance.GetComponent<PhysicalBehaviour>().RecalculateMassBasedOnSize();
                    Instance.GetComponent<Rigidbody2D>().mass = 0.05f;
                    Instance.GetComponent<PhysicalBehaviour>().InitialMass = 0.05f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.05f;
                    Instance.GetComponent<ProjectileLauncherBehaviour>().barrelPosition = new Vector3(0.36f, 0f, 0);

                }
            }
            );

            // GP25 Launcher
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Grenade Launcher"), //item to derive from
                NameOverride = $"{Mod.ModTag} GP25 40mm Underbarrel Attachment", //new item name with a suffix to assure it is globally
                NameToOrderByOverride = "Z",
                DescriptionOverride = "'GP25'  40 mm  Skins: 0                             \n\nThe GP25 is a Grenade launcher, to toggle when attached right click on the weapon and select 'Toggle Underbarrel'", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Under/Under_GP25_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    Sprite Rocket = ModAPI.LoadSprite("Guns/Launchers/MGL/MGL_Round.png");

                    Instance.AddComponent<UseEventTrigger>().Action = () =>
                    {
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<SpriteRenderer>().sprite = Rocket;
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<ExplosiveBehaviour>().Range = 10;
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<ExplosiveBehaviour>().BigExplosion = false;
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<ExplosiveBehaviour>().FragmentForce = 0.8f;
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<ExplosiveBehaviour>().ExplodesOnFragmentHit = false;
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<PointToVelocityBehaviour>().enabled = false;
                    };

                    // Offset for Grip
                    Instance.AddComponent<UnderBarrelLauncher>().AttachmentOffset = new Vector2(-0.08f, -0.023f);

                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Under/Under_GP25.png");

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.1463334f, 0.0697215f), new Vector2(0.1452416f, 0.09690431f), new Vector2(-0.05194543f, 0.09767713f), new Vector2(-0.05194245f, 0.07145602f), new Vector2(-0.3039533f, 0.07337389f), new Vector2(-0.3160608f, -0.06982373f), new Vector2(-0.2396819f, -0.07183538f), new Vector2(-0.2083418f, -0.0376315f), new Vector2(0.1733739f, -0.03787241f), new Vector2(0.1698237f, 0.06982374f), };

                    Instance.GetComponent<PhysicalBehaviour>().RecalculateMassBasedOnSize();
                    Instance.GetComponent<Rigidbody2D>().mass = 0.05f;
                    Instance.GetComponent<PhysicalBehaviour>().InitialMass = 0.05f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.05f;
                    Instance.GetComponent<ProjectileLauncherBehaviour>().barrelPosition = new Vector3(0.27f, -0.004f, 0);

                }
            }
            );

            // Tripod 1
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Laser Attachment"), //item to derive from
                NameOverride = $"{Mod.ModTag} 3 Leg Tripod", //new item name with a suffix to assure it is globally
                NameToOrderByOverride = "Z",                                              //The Stark Express Forward Angled Grip is a foregrip specifically designed for shooters who like to put their fingers near the barrel."
                DescriptionOverride = "'Tripod'  Tripod  Skins: 0                       \n\nA heavy 3 legged tripod intended for use on the M2 heavy machine gun and other mounted machineguns.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Attachments/Under/Tripod_1_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // Effectively Disables laser we use as attachment to base grips off
                    Instance.GetComponent<LaserBehaviour>().Range = 0;
                    // Offset for Grip
                    Instance.GetComponent<FirearmAttachmentBehaviour>().AttachmentOffset = new Vector2(0.143f, 0.015f);

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Attachments/Under/Tripod_1.png");

                    Instance.GetComponent<SpriteRenderer>().sortingOrder = 0;
                    Instance.GetComponent<SpriteRenderer>().sortingLayerName = "Background";

                    Instance.GetComponent<Rigidbody2D>().mass = 0.04f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.04f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.04f;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.6344513f, -0.1665949f), new Vector2(0.2115656f, 0.06977041f), new Vector2(0.1940593f, 0.1762239f), new Vector2(0.1437236f, 0.1762005f), new Vector2(0.1413342f, 0.1047906f), new Vector2(-0.6266115f, -0.1316206f), new Vector2(-0.6285715f, -0.1714286f), new Vector2(-0.4875021f, -0.1733885f), new Vector2(0.08706212f, 0.03063957f), new Vector2(0.2010839f, 0.03205757f), new Vector2(0.5090151f, -0.1655488f), };
                }
            }
            );

            #endregion

            #endregion

            // AMMO
            #region Ammo

            // 5.56x45mm
            Cartridge AWP_556 = ModAPI.FindCartridge("5.56x45mm");
            AWP_556.name = "5.56×45mm NATO";
            AWP_556.Damage = 15f;
            AWP_556.ImpactForce = 0.14f;
            AWP_556.PenetrationRandomAngleMultiplier = 0.13f;
            AWP_556.Recoil = 0.2f;
            AWP_556.StartSpeed = 10f;

            // 5.45x39mm
            Cartridge AWP_545 = ModAPI.FindCartridge("5.56x45mm");
            AWP_545.name = "5.45×39mm Soviet";
            AWP_545.Damage = 13f;
            AWP_545.ImpactForce = 0.2f;
            AWP_545.PenetrationRandomAngleMultiplier = 0.1f;
            AWP_545.Recoil = 0.3f;
            AWP_545.StartSpeed = 9f;

            // 6.8mm
            Cartridge AWP_68 = ModAPI.FindCartridge("30-06");
            AWP_68.name = "6.8mm Remington";
            AWP_68.Damage = 20f;
            AWP_68.ImpactForce = 0.18f;
            AWP_68.PenetrationRandomAngleMultiplier = 0.08f;
            AWP_68.Recoil = 0.5f;
            AWP_68.StartSpeed = 14f;

            // .30-06
            Cartridge AWP_30_Gov = ModAPI.FindCartridge("30-06");
            AWP_30_Gov.name = ".30-06 Springfield";
            AWP_30_Gov.Damage = 23f;
            AWP_30_Gov.ImpactForce = 0.3f;
            AWP_30_Gov.PenetrationRandomAngleMultiplier = 0.1f;
            AWP_30_Gov.Recoil = 0.5f;
            AWP_30_Gov.StartSpeed = 15f;

            // .338
            Cartridge AWP_338 = ModAPI.FindCartridge("30-06");
            AWP_338.name = ".338 Lapua Magnum";
            AWP_338.Damage = 25f;
            AWP_338.ImpactForce = 0.6f;
            AWP_338.PenetrationRandomAngleMultiplier = 0.1f;
            AWP_338.Recoil = 0.5f;
            AWP_338.StartSpeed = 18f;

            // .300 Blackout
            Cartridge AWP_300Blk = ModAPI.FindCartridge("7.62x39mm");
            AWP_300Blk.name = ".300 Blackout";
            AWP_300Blk.Damage = 18f;
            AWP_300Blk.ImpactForce = 0.2f;
            AWP_300Blk.PenetrationRandomAngleMultiplier = 0.1f;
            AWP_300Blk.Recoil = 0.3f;
            AWP_300Blk.StartSpeed = 12f;

            // 7.62x39mm
            Cartridge AWP_762x39 = ModAPI.FindCartridge("7.62x39mm");
            AWP_762x39.name = "7.62x39mm Soviet";
            AWP_762x39.Damage = 22f;
            AWP_762x39.ImpactForce = 0.3f;
            AWP_762x39.PenetrationRandomAngleMultiplier = 0.1f;
            AWP_762x39.Recoil = 0.3f;
            AWP_762x39.StartSpeed = 15f;

            // 7.62x51mm
            Cartridge AWP_762x51 = ModAPI.FindCartridge("7.62x51mm");
            AWP_762x51.name = "7.62x51mm NATO";
            AWP_762x51.Damage = 27f;
            AWP_762x51.ImpactForce = 0.5f;
            AWP_762x51.PenetrationRandomAngleMultiplier = 0.1f;
            AWP_762x51.Recoil = 0.5f;
            AWP_762x51.StartSpeed = 25f;

            // 7.62x54mmR
            Cartridge AWP_762x54 = ModAPI.FindCartridge("7.62x51mm");
            AWP_762x54.name = "7.62x54mmR";
            AWP_762x54.Damage = 33f;
            AWP_762x54.ImpactForce = 0.6f;
            AWP_762x54.PenetrationRandomAngleMultiplier = 0.1f;
            AWP_762x54.Recoil = 0.5f;
            AWP_762x54.StartSpeed = 26f;

            // 50 BMG
            Cartridge AWP_50BMG = ModAPI.FindCartridge("50 BMG");
            AWP_50BMG.name = ".50 BMG";
            AWP_50BMG.Damage = 150f;
            AWP_50BMG.ImpactForce = 1f;
            AWP_50BMG.PenetrationRandomAngleMultiplier = 0.01f;
            AWP_50BMG.Recoil = 0.6f;
            AWP_50BMG.StartSpeed = 35f;

            // 22LR
            Cartridge AWP_22 = ModAPI.FindCartridge("9mm");
            AWP_22.name = "22LR";
            AWP_22.Damage = 3f;
            AWP_22.ImpactForce = 0.05f;
            AWP_22.PenetrationRandomAngleMultiplier = 0.5f;
            AWP_22.Recoil = 0.03f;
            AWP_22.StartSpeed = 4f;

            // 9MM
            Cartridge AWP_9MM = ModAPI.FindCartridge("9mm");
            AWP_9MM.name = "9×19mm Parabellum";
            AWP_9MM.Damage = 8f;
            AWP_9MM.ImpactForce = 0.1f;
            AWP_9MM.PenetrationRandomAngleMultiplier = 0.2f;
            AWP_9MM.Recoil = 0.1f;
            AWP_9MM.StartSpeed = 6f;

            // 9×39mm SP5
            Cartridge AWP_939 = ModAPI.FindCartridge("7.62x39mm");
            AWP_939.name = "9×39mm SP5";
            AWP_939.Damage = 13f;
            AWP_939.ImpactForce = 0.15f;
            AWP_939.PenetrationRandomAngleMultiplier = 0.1f;
            AWP_939.Recoil = 0.1f;
            AWP_939.StartSpeed = 4f;

            // 7.62x25mm Tokarev
            Cartridge AWP_Tokarev = ModAPI.FindCartridge("7.62×25mm");
            AWP_Tokarev.name = "7.62x25mm Tokarev";
            AWP_Tokarev.Damage = 6f;
            AWP_Tokarev.ImpactForce = 0.12f;
            AWP_Tokarev.PenetrationRandomAngleMultiplier = 0.12f;
            AWP_Tokarev.Recoil = 0.07f;
            AWP_Tokarev.StartSpeed = 7.5f;

            // 45 ACP
            Cartridge AWP_45 = ModAPI.FindCartridge("9mm");
            AWP_45.name = ".45 ACP";
            AWP_45.Damage = 15f;
            AWP_45.ImpactForce = 0.2f;
            AWP_45.PenetrationRandomAngleMultiplier = 0.1f;
            AWP_45.Recoil = 0.3f;
            AWP_45.StartSpeed = 4.5f;

            // 357 Magnum
            Cartridge AWP_357 = ModAPI.FindCartridge("38 Special");
            AWP_357.name = ".357 Magnum";
            AWP_357.Damage = 25f;
            AWP_357.ImpactForce = 0.4f;
            AWP_357.PenetrationRandomAngleMultiplier = 0.1f;
            AWP_357.Recoil = 0.4f;
            AWP_357.StartSpeed = 5.5f;

            // 50 AE
            Cartridge AWP_50AE = ModAPI.FindCartridge("50 AE");
            AWP_50AE.name = ".50 Action Express";
            AWP_50AE.Damage = 25f;
            AWP_50AE.ImpactForce = 0.5f;
            AWP_50AE.PenetrationRandomAngleMultiplier = 0.1f;
            AWP_50AE.Recoil = 0.4f;
            AWP_50AE.StartSpeed = 9f;
            
            #endregion

            // AR
            #region AR
            //CAR-15
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Assault Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} CAR-15", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "A",
                DescriptionOverride = "'Commando'  5.56x45mm NATO  Skins: 1          \n\nThe CAR-15 XM177 Commando was essentially a shortened M16A1, designed for the intense CQB of the vietnam jungle during the 1960's", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/AR/XM177/XM177_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //
                    // Sets the sprite//Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/AR/XM177/XM177.png"),
                        ModAPI.LoadSprite("Guns/AR/XM177/XM177_Green.png")
                    };
                    //Set to zero so it always starts normal
                    
                    //Set the sprite
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/AR/XM177/XM177.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.5173739f, 0.1053025f), new Vector2(0.4945346f, 0.2262765f), new Vector2(0.4062215f, 0.1294474f), new Vector2(-0.03291327f, 0.1389148f), new Vector2(-0.06132217f, 0.2132416f), new Vector2(-0.2805882f, 0.213691f), new Vector2(-0.3705812f, 0.1139068f), new Vector2(-0.6954821f, 0.1025291f), new Vector2(-0.6990056f, -0.1320949f), new Vector2(-0.3680986f, 0.03288229f), new Vector2(-0.4286223f, -0.1818925f), new Vector2(-0.2948202f, -0.1854351f), new Vector2(-0.2136722f, -0.09869835f), new Vector2(-0.1577694f, -0.177673f), new Vector2(-0.03994438f, -0.1688643f), new Vector2(-0.01971173f, 0.005704075f), new Vector2(0.3926933f, 0.01516134f), new Vector2(0.7078143f, 0.06399795f), new Vector2(0.7060525f, 0.1036801f), };
                    
                    // Sets up Custom Bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/AR/_Shared/AR_Bolt.png"), Position: new Vector2(-0.1286f, 0.08573f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.0537f, BoltCover: ModAPI.LoadSprite("Guns/AR/_Shared/AR_BoltCover.png"), BoltCoverPosition: new Vector2(-0.21432f, 0.08573f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.08f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.1286f, 0.08573f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.33f, -0.1f, 0), new Vector3(0.2f, 0, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.12f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.71f, 0.085f);
                    Instance.transform.GetChild(2).localPosition = new Vector3(0.1714f, 0f, 0f); // Sets position of grip
                    Instance.transform.GetChild(3).localPosition = new Vector3(-0.2f, 0.2f, 0f); // Sets position of scope

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_556;
                     
                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);
                    
                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_4.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_5.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_6.wav")
                    };
                    
                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform,false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = new Vector3(0.71f, 0.085f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[] 
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_4.wav")
                    };
                }
            }
            );

            //M16
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Assault Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} M16", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "A", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Mattel gun'  5.56x45mm NATO  Skins: 0        \n\nThe M16, nicknamed 'Mattel Gun' by U.S servicemen during the Vietnam war in refrence to the use of plastic components in it's design.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/AR/M16/M16_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    // Sets custom Sprite
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/AR/M16/M16.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.5642815f, 0.05274941f), new Vector2(0.7889804f, 0.07159299f), new Vector2(0.7861857f, 0.09911825f), new Vector2(0.5664308f, 0.1063209f), new Vector2(0.5543001f, 0.2144728f), new Vector2(0.4688614f, 0.1357799f), new Vector2(-0.03416874f, 0.1345665f), new Vector2(-0.03982188f, 0.2149734f), new Vector2(-0.2949458f, 0.2125069f), new Vector2(-0.3603538f, 0.1004991f), new Vector2(-0.7534945f, 0.1009514f), new Vector2(-0.7493075f, -0.1288583f), new Vector2(-0.3606081f, 0.01908626f), new Vector2(-0.4127297f, -0.1799095f), new Vector2(-0.2947746f, -0.1811921f), new Vector2(-0.2613167f, -0.1010318f), new Vector2(-0.1562035f, -0.1014101f), new Vector2(-0.1571504f, -0.184941f), new Vector2(-0.05479783f, -0.1665784f), new Vector2(-0.03840977f, 0.008480929f), new Vector2(0.4773659f, 0.01920764f), };

                    // Sets up Custom Bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/AR/_Shared/AR_Bolt.png"), Position: new Vector2(-0.1286f, 0.08573f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.0537f, BoltCover: ModAPI.LoadSprite("Guns/AR/_Shared/AR_BoltCover.png"), BoltCoverPosition: new Vector2(-0.21432f, 0.08573f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.07f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.1286f, 0.08573f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.33f, -0.1f, 0), new Vector3(0f, 0, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.13f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.793f, 0.085f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1714f, 0f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.2f, 0.2f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_556;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_4.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_5.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_6.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_4.wav")
                    };
                }
            }
            );

            //M16A4
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Assault Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} M16A4", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "A", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'A4'  5.56x45mm NATO  Skins: 2                \n\nThe M16A4 issued in 1997 is what became of the M16 family after more than 30 years of service, it's still in service to this day.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/AR/M16A4/M16A4_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/AR/M16A4//M16A4.png"),
                        ModAPI.LoadSprite("Guns/AR/M16A4//M16A4_Tan.png"),
                        ModAPI.LoadSprite("Guns/AR/M16A4//M16A4_Light_Tan.png")
                    };
                    //Set to zero so it always starts normal
                    
                    // Sets custom Sprite
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/AR/M16A4/M16A4.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.8416523f, 0.09869556f), new Vector2(0.5665246f, 0.1102165f), new Vector2(0.5594926f, 0.2224862f), new Vector2(0.44248f, 0.157205f), new Vector2(-0.03712237f, 0.1586782f), new Vector2(-0.06985976f, 0.2393118f), new Vector2(-0.2946498f, 0.2382375f), new Vector2(-0.366073f, 0.1287799f), new Vector2(-0.75521f, 0.1266386f), new Vector2(-0.7572471f, -0.1022977f), new Vector2(-0.3780907f, 0.03912789f), new Vector2(-0.4155664f, -0.1878011f), new Vector2(-0.3003496f, -0.1864457f), new Vector2(-0.2597976f, -0.09504887f), new Vector2(-0.1749821f, -0.1038829f), new Vector2(-0.1074913f, -0.2444288f), new Vector2(-0.01616643f, -0.2061895f), new Vector2(-0.04622281f, 0.03892353f), new Vector2(0.5515528f, 0.04886419f), new Vector2(0.8428571f, 0.06954786f), };

                    // Sets up Custom Bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/AR/_Shared/AR_Bolt.png"), Position: new Vector2(-0.1286f, 0.08573f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.0537f, BoltCover: ModAPI.LoadSprite("Guns/AR/_Shared/AR_BoltCover.png"), BoltCoverPosition: new Vector2(-0.21432f, 0.08573f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().Automatic = false;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.1286f, 0.08573f);
                    Instance.GetComponent<FirearmBehaviour>().casingDirection = new Vector2(0.1f, 0.54f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.33f, -0.1f, 0), new Vector3(0f, 0, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.14f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.85f, 0.085f);
                    Instance.transform.GetChild(2).localPosition = new Vector3(0.2f, 0.02856f, 0f); // Sets position of grip
                    Instance.transform.GetChild(3).localPosition = new Vector3(-0.2f, 0.2286f, 0f); // Sets position of scope

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_556;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_4.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_5.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_6.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = new Vector3(0.85f, 0.085f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_4.wav")
                    };
                }
            }
            );

            //M4A1_BLOCK_I
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Assault Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} M4A1", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "A", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'M4 Carbine'  5.56x45mm NATO  Skins: 5         \n\nThe Colt M4A1 Carbine is essentially a select fire shortened M16A4, it features a RIS hanguard allowing for easier modification.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/AR/M4A1_BLOCK_I/M4A1_BLOCK_I_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    { 
                        ModAPI.LoadSprite("Guns/AR/M4A1_BLOCK_I/M4A1_BLOCK_I.png"),
                        ModAPI.LoadSprite("Guns/AR/M4A1_BLOCK_I/AR15_BLOCK_I.png"),
                        ModAPI.LoadSprite("Guns/AR/M4A1_BLOCK_I/M4A1_Block_I_Tan.png"),
                        ModAPI.LoadSprite("Guns/AR/M4A1_BLOCK_I/AR15_Block_I_Tan.png"),
                        ModAPI.LoadSprite("Guns/AR/M4A1_BLOCK_I/M4A1_Block_I_Light_Tan.png"),
                        ModAPI.LoadSprite("Guns/AR/M4A1_BLOCK_I/AR15_Block_I_Light_Tan.png")
                    };
                    //Set to zero so it always starts normal
                    
                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/AR/M4A1_BLOCK_I/M4A1_BLOCK_I.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.4150971f, 0.1613043f), new Vector2(-0.2660704f, 0.1612856f), new Vector2(-0.3078146f, 0.2134504f), new Vector2(-0.3573334f, 0.2147757f), new Vector2(-0.3855751f, 0.1249149f), new Vector2(-0.7175811f, 0.1295008f), new Vector2(-0.7157596f, -0.1326054f), new Vector2(-0.4572601f, 0.06218297f), new Vector2(-0.3898102f, 0.06134075f), new Vector2(-0.3573743f, -0.002322167f), new Vector2(-0.4121169f, -0.1870115f), new Vector2(-0.3047716f, -0.1820974f), new Vector2(-0.2668599f, -0.1024729f), new Vector2(-0.1530521f, -0.09748785f), new Vector2(-0.1173973f, -0.2464713f), new Vector2(-0.006871231f, -0.2094f), new Vector2(-0.03489067f, -0.09328181f), new Vector2(-0.04230504f, 0.0141529f), new Vector2(0.3854f, 0.0194177f), new Vector2(0.5020922f, 0.06608f), new Vector2(0.7618381f, 0.07410518f), new Vector2(0.7644262f, 0.1008417f), new Vector2(0.5044095f, 0.1079783f), new Vector2(0.5006032f, 0.2204194f), };

                    // Sets up Custom Bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/AR/_Shared/AR_Bolt.png"), Position: new Vector2(-0.1286f, 0.08573f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.0537f, BoltCover: ModAPI.LoadSprite("Guns/AR/_Shared/AR_BoltCover.png"), BoltCoverPosition: new Vector2(-0.21432f, 0.08573f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.08f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.1286f, 0.08573f);
                    Instance.GetComponent<FirearmBehaviour>().casingDirection = new Vector2(0.1f, 0.54f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.33f, -0.1f, 0), new Vector3(0f, 0, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.14f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.765f, 0.085f);
                    Instance.transform.GetChild(2).localPosition = new Vector3(0.2f, 0f, 0f); // Sets position of grip
                    Instance.transform.GetChild(3).localPosition = new Vector3(-0.17143f, 0.17143f, 0f); // Sets position of scope


                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_556;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_4.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_5.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_6.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = new Vector3(0.765f, 0.085f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_4.wav")
                    };
                }
            }
            );

            //M4A1_BLOCK_II
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Assault Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} M4A1 BLOCK II", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "A", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'SOPMOD BLOCK II'  5.56x45mm NATO  Skins: 5     \n\nThe BLOCK II is a kit for the M4A1 that allows for easier and more advanced modifications, commonly used by U.S SOF such as Rangers.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/AR/M4A1_BLOCK_II/M4A1_BLOCK_II_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    { 
                        ModAPI.LoadSprite("Guns/AR/M4A1_BLOCK_II/M4A1_BLOCK_II.png"),
                        ModAPI.LoadSprite("Guns/AR/M4A1_BLOCK_II/AR15_BLOCK_II.png"),
                        ModAPI.LoadSprite("Guns/AR/M4A1_BLOCK_II/M4A1_Block_II_Tan.png"),
                        ModAPI.LoadSprite("Guns/AR/M4A1_BLOCK_II/AR15_Block_II_Tan.png"),
                        ModAPI.LoadSprite("Guns/AR/M4A1_BLOCK_II/M4A1_Block_II_Light_Tan.png"),
                        ModAPI.LoadSprite("Guns/AR/M4A1_BLOCK_II/AR15_Block_II_Light_Tan.png")
                    };
                    //Set to zero so it always starts normal
                    
                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/AR/M4A1_BLOCK_II/M4A1_BLOCK_II.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.7272032f, 0.1268741f), new Vector2(-0.7236676f, -0.1400197f), new Vector2(-0.4634604f, 0.03924911f), new Vector2(-0.39242f, 0.04526007f), new Vector2(-0.3608097f, -0.00220738f), new Vector2(-0.4126548f, -0.1836056f), new Vector2(-0.3013101f, -0.1869682f), new Vector2(-0.2666959f, -0.09945641f), new Vector2(-0.1596491f, -0.1006234f), new Vector2(-0.1208068f, -0.244517f), new Vector2(-0.001206189f, -0.1955049f), new Vector2(-0.03282674f, -0.1153592f), new Vector2(-0.04013404f, -0.02614099f), new Vector2(-0.01067805f, 0.0410745f), new Vector2(0.5561752f, 0.0426171f), new Vector2(0.555594f, 0.06553309f), new Vector2(0.7048222f, 0.07105499f), new Vector2(0.7052121f, 0.09951616f), new Vector2(0.5925778f, 0.1019009f), new Vector2(0.5518149f, 0.1576267f), new Vector2(-0.2728804f, 0.1599589f), new Vector2(-0.2705022f, 0.1851811f), new Vector2(-0.357633f, 0.1908658f), new Vector2(-0.3920175f, 0.1317183f), };
                    
                    // Sets up Custom Bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/AR/_Shared/AR_Bolt.png"), Position: new Vector2(-0.1286f, 0.08573f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.0537f, BoltCover: ModAPI.LoadSprite("Guns/AR/_Shared/AR_BoltCover.png"), BoltCoverPosition: new Vector2(-0.21432f, 0.08573f));
                    
                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.08f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.1286f, 0.08573f);
                    Instance.GetComponent<FirearmBehaviour>().casingDirection = new Vector2(0.1f, 0.54f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.33f, -0.1f, 0), new Vector3(0f, 0, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.14f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.71f, 0.084f);
                    Instance.transform.GetChild(2).localPosition = new Vector3(0.2f, 0.0286f, 0f); // Sets position of grip
                    Instance.transform.GetChild(3).localPosition = new Vector3(-0.1714f, 0.1714f, 0f); // Sets position of scope

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_556;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_4.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_5.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_6.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = new Vector3(0.71f, 0.084f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_4.wav")
                    };
                }
            }
            );

            //HK416
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Assault Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} HK416", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "B", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'416'  5.56x45mm NATO  Skins: 2               \n\nThe HK416 is based on the AR-15 Platform but it differs significantly from other AR-15 types with its short-stroke gas piston system.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/AR/HK416/HK416_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();


                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/AR/HK416/HK416.png"),
                        ModAPI.LoadSprite("Guns/AR/HK416/HK416_Tan.png"),
                        ModAPI.LoadSprite("Guns/AR/HK416/HK416_Light_Tan.png")
                    };
                    //Set to zero so it always starts normal
                    
                    //Set the sprite
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/AR/HK416/HK416.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.4466309f, 0.1315239f), new Vector2(-0.7553446f, 0.1241536f), new Vector2(-0.7540348f, -0.1026196f), new Vector2(-0.6730712f, -0.1016427f), new Vector2(-0.4470148f, 0.0658019f), new Vector2(-0.4741574f, -0.1864419f), new Vector2(-0.3891632f, -0.1932054f), new Vector2(-0.3399211f, -0.0990597f), new Vector2(-0.227709f, -0.08542304f), new Vector2(-0.1793629f, -0.2485374f), new Vector2(-0.07129487f, -0.2056266f), new Vector2(-0.09901185f, -0.03978038f), new Vector2(-0.07137611f, 0.04257433f), new Vector2(0.324693f, 0.04241402f), new Vector2(0.4144266f, 0.07176434f), new Vector2(0.4147714f, 0.100142f), new Vector2(0.3473205f, 0.1880292f), new Vector2(0.3022854f, 0.1623283f), new Vector2(-0.3232425f, 0.1595669f), new Vector2(-0.3559684f, 0.2202413f), new Vector2(-0.4140115f, 0.2131798f), };

                    // Sets up Custom Bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/AR/_Shared/AR_Bolt.png"), Position: new Vector2(-0.1286f, 0.08573f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.0537f, BoltCover: ModAPI.LoadSprite("Guns/AR/_Shared/AR_BoltCover.png"), BoltCoverPosition: new Vector2(-0.21432f, 0.08573f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().ShotHeatMultiplier = 0.4f;
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.08f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.1286f, 0.08573f);
                    Instance.GetComponent<FirearmBehaviour>().casingDirection = new Vector2(0.1f, 0.54f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.4f, -0.1f, 0), new Vector3(-0.07f, 0.01f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.13f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.42f, 0.085f);
                    Instance.transform.GetChild(2).localPosition = new Vector3(0.14286f, 0.02857f, 0f); // Sets position of grip
                    Instance.transform.GetChild(3).localPosition = new Vector3(-0.2286f, 0.17143f, 0f); // Sets position of scope

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_556;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_4.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_5.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_6.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = new Vector3(0.42f, 0.085f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_4.wav")
                    };
                }
            }
            );

            //AR15 Skeletonized
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Assault Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} AR15 Skeletonized", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "B", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Skeleton AR'  5.56x45mm NATO  Skins: 0       \n\nA civillian AR-15 that has been heavily modified to reduce it's weight as much as possible, also modifeid to include the fun switch.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/AR/AR15_Skeletonized/AR15_Skeletonized_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/AR/AR15_Skeletonized/AR15_Skeletonized.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.6432248f, 0.1297636f), new Vector2(0.5288025f, 0.1285539f), new Vector2(0.5287284f, 0.1570241f), new Vector2(-0.2659176f, 0.1578899f), new Vector2(-0.2703114f, 0.182715f), new Vector2(-0.3497764f, 0.1857328f), new Vector2(-0.3908375f, 0.1301714f), new Vector2(-0.7318192f, 0.1270313f), new Vector2(-0.7277828f, -0.126901f), new Vector2(-0.6696451f, -0.128626f), new Vector2(-0.6390291f, 0.01630495f), new Vector2(-0.4736846f, 0.01742013f), new Vector2(-0.3936812f, 0.06979059f), new Vector2(-0.3602935f, 0.04017559f), new Vector2(-0.3622279f, -0.06161472f), new Vector2(-0.4150904f, -0.1794459f), new Vector2(-0.3035162f, -0.1834231f), new Vector2(-0.2674347f, -0.104939f), new Vector2(-0.1628781f, -0.09995092f), new Vector2(-0.1172322f, -0.2477567f), new Vector2(-0.01379477f, -0.2123039f), new Vector2(-0.04537202f, -0.04524174f), new Vector2(-0.01646513f, 0.03387122f), new Vector2(0.5286125f, 0.04305643f), new Vector2(0.5282587f, 0.1011204f), new Vector2(0.6427992f, 0.10102f), };

                    // Sets up Custom Bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/AR/_Shared/AR_Bolt.png"), Position: new Vector2(-0.1286f, 0.08573f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.0537f, BoltCover: ModAPI.LoadSprite("Guns/AR/_Shared/AR_BoltCover.png"), BoltCoverPosition: new Vector2(-0.21432f, 0.08573f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.07f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.1f, 0.08573f);
                    Instance.GetComponent<FirearmBehaviour>().casingDirection = new Vector2(0.1f, 0.54f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.32f, -0.1f, 0), new Vector3(-0.02f, 0, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.13f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.65f, 0.114f);
                    Instance.transform.GetChild(2).localPosition = new Vector3(0.2286f, 0.02857f, 0f); // Sets position of grip
                    Instance.transform.GetChild(3).localPosition = new Vector3(-0.1714f, 0.1714f, 0f); // Sets position of scope

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_556;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_4.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_5.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_6.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = new Vector3(0.65f, 0.114f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_4.wav")
                    };
                }
            }
            );

            //CQR M4
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Assault Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} CQR M4", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "B", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'CQR M4'  5.56x45mm NATO  Skins: 0            \n\nThe Hera Arms CQR is a shortened M4 with a unique design intended to be as maneuverable as possible, but with questionable ergonomics.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/AR/CQR_M4/CQR_M4_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/AR/CQR_M4/CQR_M4.png");

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.3819625f, 0.1248865f), new Vector2(-0.8390006f, 0.1252317f), new Vector2(-0.8390006f, -0.09823564f), new Vector2(-0.5305908f, -0.1009951f), new Vector2(-0.4624045f, -0.1843544f), new Vector2(-0.3124491f, -0.1812397f), new Vector2(-0.2619699f, -0.1033589f), new Vector2(-0.1631868f, -0.1027095f), new Vector2(-0.1238309f, -0.2437037f), new Vector2(-0.008525807f, -0.208148f), new Vector2(-0.04182835f, 0.003086224f), new Vector2(-0.008885961f, 0.04346378f), new Vector2(0.3839499f, 0.04636085f), new Vector2(0.3820605f, 0.07127998f), new Vector2(0.4687945f, 0.07278172f), new Vector2(0.4707229f, 0.1248455f), new Vector2(0.3848414f, 0.1264207f), new Vector2(0.38395f, 0.1872897f), new Vector2(0.2678955f, 0.1881012f), new Vector2(0.2698969f, 0.1632843f), new Vector2(-0.265635f, 0.1608263f), new Vector2(-0.267594f, 0.1855109f), new Vector2(-0.3561592f, 0.1850085f), };

                    // Sets up Custom Bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/AR/_Shared/AR_Bolt.png"), Position: new Vector2(-0.1286f, 0.08573f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.0537f, BoltCover: ModAPI.LoadSprite("Guns/AR/_Shared/AR_BoltCover.png"), BoltCoverPosition: new Vector2(-0.21432f, 0.08573f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.08f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.1286f, 0.08573f);
                    Instance.GetComponent<FirearmBehaviour>().casingDirection = new Vector2(0.1f, 0.54f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.32f, -0.1f, 0), new Vector3(-0.02f, 0, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.13f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.48f, 0.1f);
                    Instance.transform.GetChild(2).localPosition = new Vector3(0.1714f, 0.0286f, 0f); // Sets position of grip
                    Instance.transform.GetChild(3).localPosition = new Vector3(-0.1714f, 0.1714f, 0f); // Sets position of scope

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_556;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_4.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_5.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_6.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = new Vector3(0.48f, 0.1f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_4.wav")
                    };
                }
            }
            );

            //M4E1 TTI
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Assault Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} M4E1 TTI", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "B", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'TTI Ultralight'  5.56x45mm NATO  Skins: 2    \n\nThe M4E1 TTI Ultralight Rifle is a civillian AR-15 developed by Taran Tactical Innovations & Aero Precision with a sleek light design.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/AR/M4E1/M4E1_TTI_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    // Sets the sprite//Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/AR/M4E1/M4E1_TTI.png"),
                        ModAPI.LoadSprite("Guns/AR/M4E1/M4E1_TTI_Tan.png"),
                        ModAPI.LoadSprite("Guns/AR/M4E1/M4E1_TTI_Light_Tan.png")

                    };
                    //Set to zero so it always starts normal
                    
                    //Set the sprite
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/AR/M4E1/M4E1_TTI.png");

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.5621768f, 0.1004766f), new Vector2(0.5238279f, 0.1567465f), new Vector2(-0.3855777f, 0.1642516f), new Vector2(-0.3907745f, 0.1235099f), new Vector2(-0.7828163f, 0.1306768f), new Vector2(-0.7878195f, -0.1285714f), new Vector2(-0.6825095f, -0.1271392f), new Vector2(-0.5615254f, 0.01295421f), new Vector2(-0.4462463f, 0.01030908f), new Vector2(-0.4428776f, 0.06934316f), new Vector2(-0.3911432f, 0.07077977f), new Vector2(-0.3856703f, 0.01127084f), new Vector2(-0.3592837f, 0.008313686f), new Vector2(-0.4279703f, -0.1782092f), new Vector2(-0.2996969f, -0.1806407f), new Vector2(-0.2575579f, -0.09919026f), new Vector2(-0.1594376f, -0.09739691f), new Vector2(-0.1226388f, -0.2453588f), new Vector2(-0.0119205f, -0.2028299f), new Vector2(-0.04626635f, -0.04180625f), new Vector2(-0.01239462f, 0.04078993f), new Vector2(0.529884f, 0.04575522f), new Vector2(0.5287448f, 0.07001127f), new Vector2(0.6742907f, 0.07228753f), new Vector2(0.6735339f, 0.09710191f), };

                    // Sets up Custom Bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/AR/M4E1/M4E1_Bolt.png"), Position: new Vector2(-0.1286f, 0.08573f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.0537f, BoltCover: ModAPI.LoadSprite("Guns/AR/_Shared/AR_BoltCover.png"), BoltCoverPosition: new Vector2(-0.21432f, 0.08573f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().Automatic = false;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.1286f, 0.08573f);
                    Instance.GetComponent<FirearmBehaviour>().casingDirection = new Vector2(0.1f, 0.54f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.32f, -0.1f, 0), new Vector3(-0.02f, 0, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.14f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.676f, 0.086f);
                    Instance.transform.GetChild(2).localPosition = new Vector3(0.2286f, 0.0286f, 0f); // Sets position of grip
                    Instance.transform.GetChild(3).localPosition = new Vector3(-0.2286f, 0.1714f, 0f); // Sets position of scope

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_556;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_4.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_5.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_6.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = new Vector3(0.676f, 0.086f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_4.wav")
                    };
                }
            }
            );


            #endregion

            // AK
            #region AK

            //AK-47
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} AK-47", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Kalashnikov'  7.62x39mm Soviet  Skins: 2     \n\nThe AK-47 is possibly the most iconic weapon ever made. In service since 1949, it has proved itself to be extremely reliable & powerful.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/AK/AKM/AKM_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]

                    {
                        ModAPI.LoadSprite("Guns/AK/AKM/AKM.png"),
                        ModAPI.LoadSprite("Guns/AK/AKM/AKM_Bakelite.png"),
                        ModAPI.LoadSprite("Guns/AK/AKM/AKM_Drum.png")
                    };

                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/AK/AKM/AKM.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.6992002f, 0.1264373f), new Vector2(0.6972627f, 0.2142922f), new Vector2(0.6134546f, 0.1288075f), new Vector2(0.5392746f, 0.1275589f), new Vector2(0.5035864f, 0.1868743f), new Vector2(0.1579494f, 0.1848168f), new Vector2(0.1569797f, 0.2132712f), new Vector2(0.07358503f, 0.2110866f), new Vector2(0.07458456f, 0.1882689f), new Vector2(-0.2885105f, 0.1824066f), new Vector2(-0.3332808f, 0.1298394f), new Vector2(-0.7235092f, 0.1255416f), new Vector2(-0.6978523f, -0.09758411f), new Vector2(-0.411996f, 0.03741975f), new Vector2(-0.3074055f, 0.03961504f), new Vector2(-0.3298315f, -0.1243272f), new Vector2(-0.2457288f, -0.1252226f), new Vector2(-0.2092829f, -0.01782613f), new Vector2(-0.1752415f, -0.04375076f), new Vector2(-0.09984489f, -0.04272152f), new Vector2(-0.07759681f, -0.01122739f), new Vector2(-0.03933363f, -0.1564101f), new Vector2(0.04472815f, -0.2363188f), new Vector2(0.1108498f, -0.1452826f), new Vector2(0.04341324f, -0.05434872f), new Vector2(0.03908181f, 0.04462766f), new Vector2(0.3869321f, 0.07171344f), new Vector2(0.3866347f, 0.09909618f), new Vector2(0.7278696f, 0.1036717f), new Vector2(0.7274002f, 0.1252723f), };

                    // Sets up Custom Bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/AK/_Shared/AK_Bolt.png"), Position: new Vector2(-0.0286f, 0.1143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.13f, BoltCover: ModAPI.LoadSprite("Guns/AK/_Shared/AK_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1857f, 0.1143f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.0286f, 0.1143f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0.16f, 0.04f, 0), new Vector3(-0.28f, -0.05f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.734f, 0.114f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2857f, 0.05714f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1429f, 0.2f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x39;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AK_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK47_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK47_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK47_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK47_4.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);
                    NewBarrelAttachmentPoint.name = "SuppressorAttachment";

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition;
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_4.wav")
                    };
                }
            }
            );

            //AKM-S
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} AKM-S", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Widowmaker'  7.62x39mm Soviet  Skins: 2        \n\nThe AKM is the most prevalent variant of the AK-47, the AKMS has further improvements but most noticable is the under-folding stock.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/AK/AKMS/AKMS_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]

                    {
                        ModAPI.LoadSprite("Guns/AK/AKMS/AKMS.png"),
                        ModAPI.LoadSprite("Guns/AK/AKMS/AKMS_Bakelite.png"),
                        ModAPI.LoadSprite("Guns/AK/AKMS/AKMS_Drum.png"),
                    };

                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/AK/AKMS/AKMS.png");

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.6992002f, 0.1264373f), new Vector2(0.6972627f, 0.2142922f), new Vector2(0.6134546f, 0.1288075f), new Vector2(0.5392746f, 0.1275589f), new Vector2(0.5035864f, 0.1868743f), new Vector2(0.1579494f, 0.1848168f), new Vector2(0.1569797f, 0.2132712f), new Vector2(0.07358503f, 0.2110866f), new Vector2(0.07458456f, 0.1882689f), new Vector2(-0.2885105f, 0.1824066f), new Vector2(-0.3405563f, 0.1025562f), new Vector2(-0.6913756f, 0.102186f), new Vector2(-0.7235092f, 0.1255416f), new Vector2(-0.7214977f, -0.1048597f), new Vector2(-0.6988366f, -0.09326905f), new Vector2(-0.6520885f, 0.07015963f), new Vector2(-0.3074055f, 0.03961504f), new Vector2(-0.3298315f, -0.1243272f), new Vector2(-0.2457288f, -0.1252226f), new Vector2(-0.2092829f, -0.01782613f), new Vector2(-0.1752415f, -0.04375076f), new Vector2(-0.09984489f, -0.04272152f), new Vector2(-0.07759681f, -0.01122739f), new Vector2(-0.03933363f, -0.1564101f), new Vector2(0.04472815f, -0.2363188f), new Vector2(0.1108498f, -0.1452826f), new Vector2(0.04341324f, -0.05434872f), new Vector2(0.03908181f, 0.04462766f), new Vector2(0.3869321f, 0.07171344f), new Vector2(0.3866347f, 0.09909618f), new Vector2(0.7278696f, 0.1036717f), new Vector2(0.7274002f, 0.1252723f), };

                    // Sets up Custom Bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/AK/_Shared/AK_Bolt.png"), Position: new Vector2(-0.0286f, 0.1143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.13f, BoltCover: ModAPI.LoadSprite("Guns/AK/_Shared/AK_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1857f, 0.1143f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.0286f, 0.1143f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.33f, -0.11f, 0), new Vector3(-0.03f, 0.022f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.15f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.734f, 0.114f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2857f, 0.05714f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1429f, 0.2f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x39;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AK_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK47_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK47_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK47_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK47_4.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_4.wav")
                    };
                }
            }
            );

            //AKS-74U
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} AKS-74U", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Krinkov'  5.45×39mm Soviet  Skins: 3         \n\nThe AKS-74U is essentially a shortened AK-74 with reduced muzzle velocity being traded for maneuverability and versatility in CQB.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/AK/AKS-74U/AKS-74U_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]

                    {
                        ModAPI.LoadSprite("Guns/AK/AKS-74U/AKS-74U.png"),
                        ModAPI.LoadSprite("Guns/AK/AKS-74U/AKS-74U_Bakelite.png"),
                        ModAPI.LoadSprite("Guns/AK/AKS-74U/AKS-74U_2.png"),
                        ModAPI.LoadSprite("Guns/AK/AKS-74U/AKS-74U_2_Bakelite.png")
                    };

                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/AK/AKS-74U/AKS-74U.png");

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.5303509f, 0.1431761f), new Vector2(0.5276178f, 0.2276433f), new Vector2(-0.204032f, 0.2019345f), new Vector2(-0.2590955f, 0.1413245f), new Vector2(-0.6060796f, 0.1355685f), new Vector2(-0.6115503f, -0.08267878f), new Vector2(-0.2149201f, 0.05956103f), new Vector2(-0.2407221f, -0.1164208f), new Vector2(-0.1542427f, -0.1130001f), new Vector2(-0.1416523f, -0.02409148f), new Vector2(0.001201212f, -0.01834327f), new Vector2(0.1483365f, -0.2231007f), new Vector2(0.213864f, -0.1526525f), new Vector2(0.1210638f, 0.05319142f), new Vector2(0.6170211f, 0.1106328f), new Vector2(0.6197565f, 0.1437746f), };

                    // Sets up Custom Bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/AK/_Shared/AK_Bolt_Black.png"), Position: new Vector2(0.05714f, 0.12857f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.13f, BoltCover: ModAPI.LoadSprite("Guns/AK/_Shared/AK_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1f, 0.12857f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.085f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.0286f, 0.1143f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.2f, -0.03f, 0), new Vector3(0.2f, 0.05f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.12f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.62f, 0.128f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.3143f, 0.07143f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0571f, 0.2142f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_545;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AK_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_4.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_4.wav")
                    };
                }
            }
            );

            //MD-63
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} MD-63", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Romak III'  7.62×39mm Soviet  Skins: 5       \n\nThe Pistol Mitraliera model 1963 is a Romanian made AKM variant, the only notable difference is the foregrip built into the handguard.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/AK/MD_63/MD_63_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]

                    {
                        ModAPI.LoadSprite("Guns/AK/MD_63/MD_63.png"),
                        ModAPI.LoadSprite("Guns/AK/MD_63/MD_63_Bakelite.png"),
                        ModAPI.LoadSprite("Guns/AK/MD_63/MD_63_Drum.png"),
                        ModAPI.LoadSprite("Guns/AK/MD_63/MDS_63.png"),
                        ModAPI.LoadSprite("Guns/AK/MD_63/MDS_63_Bakelite.png"),
                        ModAPI.LoadSprite("Guns/AK/MD_63/MDS_63_Drum.png")
                    };

                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/AK/MD_63/MD_63.png");

                    // Adjust Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.5597087f, 0.126964f), new Vector2(0.4954936f, 0.1955287f), new Vector2(-0.2828985f, 0.1866447f), new Vector2(-0.3583473f, 0.1224271f), new Vector2(-0.7285714f, 0.1196606f), new Vector2(-0.7332779f, -0.1033498f), new Vector2(-0.4144812f, 0.03833521f), new Vector2(-0.3013023f, 0.03464421f), new Vector2(-0.3293999f, -0.121617f), new Vector2(-0.245263f, -0.1233969f), new Vector2(-0.2116751f, -0.0192863f), new Vector2(-0.0728173f, -0.0168786f), new Vector2(-0.05985475f, -0.1552232f), new Vector2(0.006949656f, -0.1978128f), new Vector2(0.0920046f, -0.1442556f), new Vector2(0.02699271f, 0.03715403f), new Vector2(0.1769924f, 0.03995006f), new Vector2(0.2216503f, -0.07311042f), new Vector2(0.2920749f, -0.07585804f), new Vector2(0.2828242f, 0.06350598f), new Vector2(0.733278f, 0.09933565f), new Vector2(0.6938404f, 0.2210207f), };

                    // Sets up Custom Bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/AK/_Shared/AK_Bolt.png"), Position: new Vector2(-0.02857f, 0.1143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.13f, BoltCover: ModAPI.LoadSprite("Guns/AK/_Shared/AK_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1857f, 0.1143f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.0286f, 0.1143f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.28f, -0.04f, 0), new Vector3(0.23f, 0.03f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.17f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.735f, 0.113f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.25714f, -0.08571f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1428f, 0.2f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x39;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AK_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK47_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK47_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK47_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK47_4.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_4.wav")
                    };
                }
            }
            );

            //AK-74
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} AK-74", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Spetsnazovka'  5.45×39mm Soviet  Skins: 7    \n\nThe AK-74 is a adaptation of the AKM, the biggest difference is the caliber, 5.45x39mm, this results in better accuracy and range.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/AK/AK74/AK74_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]

                    {
                        ModAPI.LoadSprite("Guns/AK/AK74/AK74.png"),
                        ModAPI.LoadSprite("Guns/AK/AK74/AK74_Bakelite.png"),
                        ModAPI.LoadSprite("Guns/AK/AK74/AK74_Black.png"),
                        ModAPI.LoadSprite("Guns/AK/AK74/AK74_Black_Bakelite.png"),
                        ModAPI.LoadSprite("Guns/AK/AK74/AK74_2.png"),
                        ModAPI.LoadSprite("Guns/AK/AK74/AK74_2_Bakelite.png"),
                        ModAPI.LoadSprite("Guns/AK/AK74/AK74_Black_2.png"),
                        ModAPI.LoadSprite("Guns/AK/AK74/AK74_Black_2_Bakelite.png")

                    };

                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/AK/AK74/AK74.png");

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.6409959f, 0.1409884f), new Vector2(0.6372396f, 0.232481f), new Vector2(0.5516127f, 0.1433585f), new Vector2(0.4783797f, 0.1435075f), new Vector2(0.4296427f, 0.2042729f), new Vector2(0.1014042f, 0.2007654f), new Vector2(0.09898464f, 0.2277699f), new Vector2(0.01558996f, 0.2270353f), new Vector2(0.01223986f, 0.198418f), new Vector2(-0.3489302f, 0.2031759f), new Vector2(-0.3937005f, 0.13928f), new Vector2(-0.756249f, 0.1382738f), new Vector2(-0.7214977f, -0.09030859f), new Vector2(-0.4392793f, 0.05015193f), new Vector2(-0.3583342f, 0.05598498f), new Vector2(-0.3880357f, -0.1079573f), new Vector2(-0.3057519f, -0.1106715f), new Vector2(-0.2711249f, 0.002181575f), new Vector2(-0.246178f, -0.02556194f), new Vector2(-0.159868f, -0.02817046f), new Vector2(-0.1376199f, -0.002132982f), new Vector2(-0.07934904f, -0.1527723f), new Vector2(-0.004381668f, -0.2254055f), new Vector2(0.07629101f, -0.1340232f), new Vector2(0.004801307f, -0.04631162f), new Vector2(-0.0148209f, 0.06012117f), new Vector2(0.3256437f, 0.08558033f), new Vector2(0.3342997f, 0.11682f), new Vector2(0.7577504f, 0.1132484f), new Vector2(0.755555f, 0.1426999f), };

                    // Sets up Custom Bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/AK/_Shared/AK_Bolt_Black.png"), Position: new Vector2(-0.08571f, 0.12857f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.13f, BoltCover: ModAPI.LoadSprite("Guns/AK/_Shared/AK_BoltCover.png"), BoltCoverPosition: new Vector2(-0.2429f, 0.12857f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.09f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.0286f, 0.1143f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.34f, -0.04f, 0), new Vector3(0.08f, 0.04f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.14f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.762f, 0.1286f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2f, 0.07143f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.2f, 0.21428f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_545;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AK_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_4.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_4.wav")
                    };
                }
            }
            );

            //VZ. 58
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} VZ. 58", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Papasha'  7.62×39mm Soviet  Skins: 1         \n\nThe VZ. 58 is a Czech made selective fire gas-operated assault rifle, it was designed as a replacement to the SKS in the late 1950's. ", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/AK/VZ58/VZ58_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]

                    {
                        ModAPI.LoadSprite("Guns/AK/VZ58/VZ58.png"),
                        ModAPI.LoadSprite("Guns/AK/VZ58/VZ58_2.png")
                    };

                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/AK/AK12/AK12.png");

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.6845253f, 0.1283002f), new Vector2(0.6840921f, 0.2163842f), new Vector2(0.6227869f, 0.1294344f), new Vector2(0.493197f, 0.1299025f), new Vector2(0.451063f, 0.183921f), new Vector2(0.1399809f, 0.189604f), new Vector2(0.1380472f, 0.2176539f), new Vector2(0.05684602f, 0.2152331f), new Vector2(0.05870631f, 0.1858372f), new Vector2(-0.2729221f, 0.1874568f), new Vector2(-0.3223913f, 0.1302901f), new Vector2(-0.7160482f, 0.09772129f), new Vector2(-0.6730646f, -0.1302074f), new Vector2(-0.3964161f, 0.03472072f), new Vector2(-0.2816365f, 0.04030593f), new Vector2(-0.3187149f, -0.1294869f), new Vector2(-0.2320903f, -0.1293108f), new Vector2(-0.1988305f, -0.01568388f), new Vector2(-0.1245305f, -0.03920106f), new Vector2(-0.0635222f, -0.0161051f), new Vector2(-0.05282086f, -0.0889141f), new Vector2(0.02860025f, -0.217981f), new Vector2(0.09766254f, -0.2121295f), new Vector2(0.1386406f, -0.1384263f), new Vector2(0.05835363f, -0.05947307f), new Vector2(0.05972806f, 0.04084762f), new Vector2(0.3962807f, 0.07975679f), new Vector2(0.3957881f, 0.1033188f), new Vector2(0.7137696f, 0.1030967f), new Vector2(0.7156198f, 0.1291752f), };

                    // Sets up custom gun bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/AK/VZ58/VZ58_Bolt.png"), Position: new Vector2(-0.0143f, 0.15714f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.1f, BoltCover: ModAPI.LoadSprite("Guns/AK/VZ58/VZ58_BoltCover.png"), BoltCoverPosition: new Vector2(-0.14286f, 0.15714f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.08f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.0143f, 0.15714f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.27f, -0.05f, 0), new Vector3(0.12f, 0.05f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.72f, 0.114f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.24286f, 0.05715f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1571f, 0.2f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x39;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AK_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK47_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK47_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK47_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK47_4.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_4.wav")
                    };
                }
            }
            );

            //AK-105
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} AK-105", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Firecracker'  5.45×39mm  Skins: 1     \n\nThe AK-105 earned it's nickname 'Firecracker' due to it's fast firerate and loud report, it's compact size lends itself well to CQB.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/AK/AK105/AK105_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]

                    {
                        ModAPI.LoadSprite("Guns/AK/AK105/AK105.png"),
                        ModAPI.LoadSprite("Guns/AK/AK105/AK105_Bakelite.png")
                    };

                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/AK/AK105/AK105.png");

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.6865219f, 0.1418641f), new Vector2(0.601119f, 0.1417924f), new Vector2(0.6011189f, 0.2129065f), new Vector2(-0.2782746f, 0.2077941f), new Vector2(-0.318969f, 0.1473865f), new Vector2(-0.6763424f, 0.1411008f), new Vector2(-0.6560367f, -0.08330768f), new Vector2(-0.2997539f, 0.05481987f), new Vector2(-0.3137805f, -0.1105937f), new Vector2(-0.2265084f, -0.1124479f), new Vector2(-0.2212827f, -0.0293654f), new Vector2(-0.06591895f, -0.02497779f), new Vector2(0.06531422f, -0.223939f), new Vector2(0.1426634f, -0.1455909f), new Vector2(0.04858792f, 0.04865632f), new Vector2(0.6857143f, 0.1187301f), };
                    
                    // Sets gun bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/AK/_Shared/AK_Bolt_Black.png"), Position: new Vector2(-0.0146f, 0.1284f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.13f, BoltCover: ModAPI.LoadSprite("Guns/AK/_Shared/AK_BoltCover.png"), BoltCoverPosition: new Vector2(-0.171f, 0.1285f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.09f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.0146f, 0.1284f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.27f, -0.04f, 0), new Vector3(0.15f, 0.06f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.13f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.692f, 0.128f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.3f, 0.0715f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1286f, 0.2143f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_545;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AK_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_4.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_4.wav")
                    };
                }
            }
            );

            //AK-107
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} AK-107", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Alfa'  5.45×39mm  Skins: 1            \n\nThe AK-107 is a member of the AK-100 series, it features many improvements over the 105, the biggest being the balanced recoil system.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/AK/AK107/AK107_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]

                    {
                        ModAPI.LoadSprite("Guns/AK/AK107/AK107.png"),
                        ModAPI.LoadSprite("Guns/AK/AK107/AK107_Bakelite.png")
                    };

                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/AK/AK107/AK107.png");

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.6195416f, 0.1470609f), new Vector2(0.6098633f, 0.2168329f), new Vector2(-0.3438165f, 0.1989848f), new Vector2(-0.3791595f, 0.1410848f), new Vector2(-0.7515586f, 0.1429463f), new Vector2(-0.7348058f, -0.0871038f), new Vector2(-0.3528328f, 0.05713696f), new Vector2(-0.3863016f, -0.1113022f), new Vector2(-0.2994973f, -0.1084172f), new Vector2(-0.2763804f, -0.02839256f), new Vector2(-0.150307f, -0.01908828f), new Vector2(-0.00551156f, -0.221312f), new Vector2(0.07184327f, -0.159078f), new Vector2(-0.01697931f, 0.05135947f), new Vector2(0.3366428f, 0.09418704f), new Vector2(0.7552814f, 0.1055397f), new Vector2(0.7515586f, 0.1429463f), };
                    
                    // Sets gun bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/AK/_Shared/AK_Bolt_Black.png"), Position: new Vector2(-0.08571f, 0.12857f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.13f, BoltCover: ModAPI.LoadSprite("Guns/AK/_Shared/AK_BoltCover.png"), BoltCoverPosition: new Vector2(-0.2429f, 0.12857f));


                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.08f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.08571f, 0.12857f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.34f, -0.03f, 0), new Vector3(0.1f, 0.05f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.14f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.7625f, 0.128f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2286f, 0.07143f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.2f, 0.2143f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_545;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AK_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_4.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_4.wav")
                    };
                }
            }
            );

            //AK-12
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} AK-12", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'AK-200'  5.45×39mm  Skins: 3                 \n\nThe AK-12 has many improvements over the AK-100 series, including ergonomics, modularity, accuracy, reliability and various others.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/AK/AK12/AK12_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]

                    {
                        ModAPI.LoadSprite("Guns/AK/AK12/AK12.png"),
                        ModAPI.LoadSprite("Guns/AK/AK12/AK12_Bakelite.png"),
                        ModAPI.LoadSprite("Guns/AK/AK12/AK12_2.png"),
                        ModAPI.LoadSprite("Guns/AK/AK12/AK12_2_Bakelite.png")
                    };

                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/AK/AK12/AK12.png");

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.6782788f, 0.1207988f), new Vector2(0.6639358f, 0.2334771f), new Vector2(0.5474244f, 0.1126301f), new Vector2(0.4643844f, 0.1702102f), new Vector2(0.3292165f, 0.1679334f), new Vector2(0.3287398f, 0.2156824f), new Vector2(-0.3755849f, 0.2145534f), new Vector2(-0.4278717f, 0.1476285f), new Vector2(-0.811833f, 0.1435852f), new Vector2(-0.8118327f, -0.1076553f), new Vector2(-0.5164416f, 0.05668332f), new Vector2(-0.387709f, 0.05802292f), new Vector2(-0.4151015f, -0.1035742f), new Vector2(-0.3311585f, -0.1083835f), new Vector2(-0.3162439f, -0.03503759f), new Vector2(-0.1669475f, -0.01918557f), new Vector2(-0.02754643f, -0.2261186f), new Vector2(0.03827685f, -0.1454442f), new Vector2(-0.05076319f, 0.05129869f), new Vector2(0.8167385f, 0.08253334f), new Vector2(0.8191913f, 0.1223723f), };
                   
                    // Sets up gun bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/AK/_Shared/AK_Bolt_Black.png"), Position: new Vector2(-0.0857f, 0.1574f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.13f, BoltCover: ModAPI.LoadSprite("Guns/AK/AK12/AK12_BoltCover.png"), BoltCoverPosition: new Vector2(-0.2285f, 0.1574f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.0857f, 0.1574f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.37f, -0.03f, 0), new Vector3(0.1f, 0.05f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.819f, 0.1f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.17143f, 0.04286f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.2f, 0.2145f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_545;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AK_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_4.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_4.wav")
                    };
                }
            }
            );

            //AEK-971
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} AEK-971", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'AEK'  5.45×39mm  Skins: 0                    \n\nThe AEK series features a balanced recoil system that reduces recoil and provides better accuracy and control during automatic fire.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/AK/AEK_972/AEK972_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/AK/AEK_972/AEK972.png");

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.6611058f, 0.211764f), new Vector2(-0.4013982f, 0.2031463f), new Vector2(-0.4059426f, 0.1396154f), new Vector2(-0.7704568f, 0.1448764f), new Vector2(-0.7730176f, -0.05539468f), new Vector2(-0.6873034f, -0.05695191f), new Vector2(-0.4252257f, 0.05811097f), new Vector2(-0.4294307f, -0.1141584f), new Vector2(-0.3419836f, -0.1117833f), new Vector2(-0.3284974f, -0.02845974f), new Vector2(-0.1465833f, -0.01663479f), new Vector2(-0.1202532f, -0.1052511f), new Vector2(-0.01021965f, -0.2152333f), new Vector2(0.06489815f, -0.1561485f), new Vector2(-0.02179966f, -0.03811207f), new Vector2(-0.02429613f, 0.04981671f), new Vector2(0.3790218f, 0.09260958f), new Vector2(0.7714286f, 0.1112242f), new Vector2(0.769067f, 0.1409623f), new Vector2(0.6649273f, 0.1411956f), };
                   
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/AK/_Shared/AK_Bolt_Black.png"), Position: new Vector2(-0.0428f, 0.1574f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.13f, BoltCover: ModAPI.LoadSprite("Guns/AK/AEK_972/AEK972_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1856f, 0.1574f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.09f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.0286f, 0.1143f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.38f, -0.04f, 0), new Vector3(0.1f, 0.05f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.78f, 0.128f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2143f, 0.0714f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.2428f, 0.21428f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_545;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AK_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_4.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_4.wav")
                    };
                }
            }
            );

            #endregion

            // Bullpups
            #region Bullpup

            // RM277
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} RM277", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'NGSW'  6.8mm TVCM  Skins: 0                  \n\nDeveloped by General Dynamics, the RM277 is a 6.8mm Bullpup made for the NGSW program, it comes with an intergrated suppressor.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Bullpups/RM277/RM277_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Bullpups/RM277/RM277.png");

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.6200758f, 0.140643f), new Vector2(0.5883415f, 0.1132565f), new Vector2(0.5848157f, 0.2021368f), new Vector2(0.5518498f, 0.1723281f), new Vector2(-0.2445991f, 0.1741924f), new Vector2(-0.2444989f, 0.1968772f), new Vector2(-0.3027594f, 0.1693154f), new Vector2(-0.3031452f, 0.1450109f), new Vector2(-0.7558776f, 0.1430619f), new Vector2(-0.7558776f, -0.1190213f), new Vector2(-0.7056624f, -0.1158833f), new Vector2(-0.5800519f, -0.03032484f), new Vector2(-0.5267057f, -0.03043904f), new Vector2(-0.528063f, -0.2016463f), new Vector2(-0.3838627f, -0.2026246f), new Vector2(-0.3853841f, -0.06262809f), new Vector2(-0.3211619f, 0.004910305f), new Vector2(-0.1696483f, 0.001887247f), new Vector2(-0.243283f, -0.1360916f), new Vector2(-0.1741857f, -0.2027677f), new Vector2(-0.1156659f, -0.07953918f), new Vector2(-0.04935358f, -0.1110858f), new Vector2(0.03838765f, -0.05292115f), new Vector2(0.06937551f, 0.02672597f), new Vector2(0.5609468f, 0.03054247f), new Vector2(0.5606987f, 0.06203148f), new Vector2(0.6178862f, 0.05913028f), new Vector2(0.6168613f, 0.02987874f), new Vector2(0.7596734f, 0.02963199f), new Vector2(0.7585246f, 0.1392039f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Bullpups/RM277/RM277_Bolt.png"), Position: new Vector2(-0.4571f, 0.07143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Bullpups/RM277/RM277_BoltCover.png"), BoltCoverPosition: new Vector2(-0.5857f, 0.07143f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.09f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.4571f, 0.07143f);
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.77f, 0.09f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.17f, -0.086f, 0), new Vector3(0.24f, 0.015f, 0) };
                    Instance.transform.GetChild(4).GetChild(0).gameObject.SetActive(false);
                    Instance.GetComponent<Rigidbody2D>().mass = 0.17f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.767f, 0.086f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.25714f, 0.0143f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0857f, 0.1857f, 0f); // Sets position of scope

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_68;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_3.wav")
                    };
                }
            }
            );

            //Famas
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Assault Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} Famas F1", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Le Clairon'  5.56x45mm NATO  Skins: 0        \n\nThe FAMAS is a french made bullpup, it's known for a high firerate of ~1000RPM and the unique shape earning it the nickname 'Le Clairon'.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Bullpups/Famas/Famas_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Bullpups/Famas/Famas.png");
                   
                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.371564f, 0.05751416f), new Vector2(0.36809f, 0.1379286f), new Vector2(0.3419022f, 0.1728426f), new Vector2(-0.1117406f, 0.1986472f), new Vector2(-0.1434404f, 0.1685585f), new Vector2(-0.1439429f, 0.08714401f), new Vector2(-0.3757586f, 0.08734527f), new Vector2(-0.3755968f, 0.117779f), new Vector2(-0.5384525f, 0.1141675f), new Vector2(-0.5357056f, -0.08051114f), new Vector2(-0.4036979f, -0.08026999f), new Vector2(-0.2843837f, -0.02510777f), new Vector2(-0.2833226f, -0.2f), new Vector2(-0.1758788f, -0.1653121f), new Vector2(-0.1712643f, -0.062374f), new Vector2(-0.1130198f, -0.00228443f), new Vector2(-0.04642831f, -0.005548187f), new Vector2(-0.08964472f, -0.1342479f), new Vector2(-0.01497776f, -0.17197f), new Vector2(0.001818851f, -0.09054755f), new Vector2(0.08103725f, -0.08314097f), new Vector2(0.1157177f, -0.02860667f), new Vector2(0.3394972f, -0.02407268f), new Vector2(0.3742967f, 0.02793562f), new Vector2(0.5428572f, 0.02720388f), new Vector2(0.5447692f, 0.05659842f), };
                    
                    //Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Bullpups/Famas/Famas_Bolt.png"), Position: new Vector2(-0.0429f, 0.0857f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.1f, BoltCover: ModAPI.LoadSprite("Guns/Bullpups/Famas/Famas_BoltCover.png"), BoltCoverPosition: new Vector2(-0.3429f, 0.04285f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.06f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.23f, 0.042f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.025f, -0.074f, 0), new Vector3(0.224f, -0.02f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.14f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.5489f, 0.0428f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2428f, -0.0428f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.0143f, 0.21428f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_556;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_4.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_5.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_6.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_4.wav")
                    };
                }
            }
            );

            //QBZ95
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Assault Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} QBZ-95", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Type 95'  5.8×42mm DBP87  Skins: 0           \n\nThe QBZ-95 is a Chinese bullpup assault rifle made by Norinco, it is the standard service rifle of the People's Liberation Army.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Bullpups/QBZ95/QBZ95_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Bullpups/QBZ95/QBZ95.png");

                    //Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.3396287f, 0.1494815f), new Vector2(0.2022216f, 0.1457987f), new Vector2(0.139755f, 0.2282202f), new Vector2(-0.1469106f, 0.2531567f), new Vector2(-0.1995255f, 0.1488231f), new Vector2(-0.4866673f, 0.1451272f), new Vector2(-0.4863108f, 0.1677937f), new Vector2(-0.6f, 0.1701384f), new Vector2(-0.6f, -0.05628274f), new Vector2(-0.4927223f, -0.05530578f), new Vector2(-0.4500005f, 0.0001809523f), new Vector2(-0.3416488f, -0.004581332f), new Vector2(-0.2888804f, -0.1381774f), new Vector2(-0.1951785f, -0.2488567f), new Vector2(-0.1154851f, -0.1880917f), new Vector2(-0.1837149f, -0.08278981f), new Vector2(-0.2061093f, -5.593896E-05f), new Vector2(-0.01873665f, -4.293647E-05f), new Vector2(-0.05740502f, -0.1008535f), new Vector2(0.005797662f, -0.1425771f), new Vector2(0.05951055f, -0.02881856f), new Vector2(0.1645992f, -0.07687235f), new Vector2(0.2356115f, 0.02632712f), new Vector2(0.3983706f, 0.02900149f), new Vector2(0.3990928f, 0.0562381f), new Vector2(0.5967132f, 0.05861043f), new Vector2(0.6007965f, 0.08674547f), new Vector2(0.3997516f, 0.08761621f), new Vector2(0.3968987f, 0.2295224f), };
                    
                    // Sets up gun bolt
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Bullpups/QBZ95/QBZ95_Bolt.png"), Position: new Vector2(-0.1f, 0.1286f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.1f, BoltCover: ModAPI.LoadSprite("Guns/Bullpups/QBZ95/QBZ95_BoltCover.png"), BoltCoverPosition: new Vector2(-0.3714f, 0.1f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.09f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.254f, 0.1f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0f, -0.039f, 0), new Vector3(0.264f, 0.019f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.12f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.607f, 0.0714f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.329f, 0.0143f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0428f, 0.2429f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_545;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_4.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_Suppressed_3.wav"),
                    };
                }
            }
            );

            //VHS2
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Assault Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} VHS-2", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Hellion'  5.56×45mm NATO  Skins: 0           \n\nThe VHS-2 Is a bullpup made in Croatia to comply with NATO standards, it was imported to the US by Springfield Armory as the Hellion.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Bullpups/VHS2/VHS2_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Bullpups/VHS2/VHS2.png");

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.4782029f, -0.05561642f), new Vector2(-0.4133157f, 0.01124787f), new Vector2(-0.4135683f, -0.02557212f), new Vector2(-0.2397987f, -0.02869906f), new Vector2(-0.2348355f, -0.1347234f), new Vector2(-0.1815122f, -0.2266355f), new Vector2(-0.09305362f, -0.1801742f), new Vector2(-0.1292604f, -0.09875219f), new Vector2(-0.1287395f, 0.001250803f), new Vector2(-0.08616132f, 0.02591357f), new Vector2(-0.0151286f, 0.02856279f), new Vector2(-0.04049334f, -0.1421221f), new Vector2(0.03748604f, -0.1398648f), new Vector2(0.07461641f, -0.03268698f), new Vector2(0.1538395f, -0.02796049f), new Vector2(0.1585411f, 0.02994531f), new Vector2(0.4415346f, 0.02889181f), new Vector2(0.4424543f, 0.0570142f), new Vector2(0.5279783f, 0.05772613f), new Vector2(0.5274178f, 0.0858178f), new Vector2(0.4422392f, 0.08461159f), new Vector2(0.4423361f, 0.1140081f), new Vector2(0.3849052f, 0.1738686f), new Vector2(0.3839111f, 0.2277708f), new Vector2(0.354719f, 0.201108f), new Vector2(-0.1585115f, 0.2037721f), new Vector2(-0.1571298f, 0.2260521f), new Vector2(-0.2106132f, 0.2255247f), new Vector2(-0.2509057f, 0.1430814f), new Vector2(-0.5285715f, 0.1425753f), new Vector2(-0.5324432f, -0.05527528f), };

                    // Sets up sprites for gun bolt
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Bullpups/VHS2/VHS2_Bolt.png"), Position: new Vector2(-0.2143f, 0.07142f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.1f, BoltCover: ModAPI.LoadSprite("Guns/Bullpups/VHS2/VHS2_BoltCover.png"), BoltCoverPosition: new Vector2(-0.3286f, 0.07142f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.07f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.2143f, 0.07142f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0.03f, -0.0519f, 0), new Vector3(0.25f, 0.02f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.13f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.534f, 0.071f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2857f, 0.0143f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.05713f, 0.2143f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_556;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_4.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_5.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_6.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_4.wav")
                    };
                }
            }
            );

            //OTS14
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} OTs-14", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Groza'  9x39 SP-6  Skins: 0                  \n\nThe OTs-14 Groza is essentially a bullpup variant of the AKS-74U, it shares much of the same internals but in a bullpup configuration.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Bullpups/OTs14_Groza/OTS14_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Bullpups/OTs14_Groza/OTS14.png");

                    //Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.3154891f, 0.2430046f), new Vector2(0.3127745f, 0.2142205f), new Vector2(0.1450421f, 0.2149577f), new Vector2(0.1433681f, 0.2440617f), new Vector2(0.08385745f, 0.2444272f), new Vector2(0.08027586f, 0.1385532f), new Vector2(-0.4618532f, 0.1291904f), new Vector2(-0.458787f, -0.07351556f), new Vector2(-0.3925026f, -0.02106292f), new Vector2(-0.2595933f, -0.01759215f), new Vector2(-0.2547752f, -0.07366443f), new Vector2(-0.2056709f, -0.07422023f), new Vector2(-0.1747454f, -0.1863221f), new Vector2(-0.1158763f, -0.2459919f), new Vector2(-0.02490079f, -0.1712749f), new Vector2(-0.08148504f, -0.1244467f), new Vector2(-0.09317194f, -0.02124798f), new Vector2(0.08138809f, -0.017409f), new Vector2(0.05373848f, -0.1797364f), new Vector2(0.1422778f, -0.1820257f), new Vector2(0.1491604f, -0.1065373f), new Vector2(0.2777573f, -0.101674f), new Vector2(0.3484855f, 0.005102977f), new Vector2(0.4585836f, 0.0135735f), new Vector2(0.461465f, 0.07070008f), new Vector2(0.3444441f, 0.07555344f), new Vector2(0.3394901f, 0.2428571f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/AK/_Shared/AK_Bolt_Black.png"), Position: new Vector2(-0.0428f, 0.0857f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.1f, BoltCover: ModAPI.LoadSprite("Guns/Bullpups/OTs14_Groza/OTS14_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1714f, 0.0857f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.09f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.0428f, 0.0857f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0.11f, -0.09f, 0), new Vector3(0.36f, 0, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.14f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.465f, 0.043f);
                    Instance.transform.Find("BarrelAttachment").gameObject.SetActive(false); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.2143f, 0.22857f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_939;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK74_4.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK74_Suppressed_4.wav")
                    };
                }
            }
            );

            // RFB
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Assault Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} Kel-Tec RFB", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'RFB'  7.62×51mm NATO  Skins: 0               \n\nThe Kel-Tec RFB is a US made semi automatic rifle with a unique ejection system where casings are ejected out the front of the weapon.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Bullpups/RFB/RFB_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Bullpups/RFB/RFB.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.6142857f, 0.1364757f), new Vector2(-0.6168772f, -0.09242003f), new Vector2(-0.375133f, -0.09516917f), new Vector2(-0.3749766f, -0.17811f), new Vector2(-0.2761632f, -0.1826543f), new Vector2(-0.2709553f, -0.03565906f), new Vector2(-0.1650239f, -0.01915172f), new Vector2(-0.190862f, -0.179034f), new Vector2(-0.1013593f, -0.1831228f), new Vector2(-0.08900642f, -0.1051589f), new Vector2(-0.02265099f, -0.09926783f), new Vector2(0.03459746f, -0.02026343f), new Vector2(0.3525435f, -0.03501777f), new Vector2(0.3535414f, 0.04267454f), new Vector2(0.621858f, 0.04523934f), new Vector2(0.6181903f, 0.06715122f), new Vector2(0.355135f, 0.1052479f), new Vector2(0.3600586f, 0.1572077f), };

                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Bullpups/RFB/RFB_Bolt.png"), Position: new Vector2(0.1f, 0.08571f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.25f, BoltCover: ModAPI.LoadSprite("Guns/Bullpups/RFB/RFB_BoltCover.png"), BoltCoverPosition: new Vector2(-0.2143f, 0.08571f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().Automatic = false;
                    Instance.GetComponent<FirearmBehaviour>().casingDirection = new Vector2(0f, 0f);
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.4f, 0.113f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.115f, -0.09f, 0), new Vector3(0.2f, -0.03f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.622f, 0.0571f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.17143f, -0.0285f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.05714f, 0.17143f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x51;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_4.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_3.wav")
                    };
                }
            }
            );

            // IWI X95
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Assault Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} IWI X95", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Tavor'  5.56×45mm NATO  Skins: 1             \n\nThe IWI X95 is a Israeli made bullpup, it has many different variants, included versions chambered in .300 blackout and even 9x19mm.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Bullpups/IWI_X95/IWI_X95_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Bullpups/IWI_X95/IWI_X95.png"),
                        ModAPI.LoadSprite("Guns/Bullpups/IWI_X95/IWI_X95_Tan.png")
                    };
                    //Set to zero so it always starts normal
                    
                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Bullpups/IWI_X95/IWI_X95.png");

                    //Set the sprite for the bolt
                    var boltCover = CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Bullpups/IWI_X95/IWI_X95_Bolt.png"), Position: new Vector2(-0.2857f, 0.1143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.07f, BoltCover: ModAPI.LoadSprite("Guns/Bullpups/IWI_X95/IWI_X95_BoltCover.png"), BoltCoverPosition: new Vector2(-0.428f, 0.1143f));
                    //Set the sprite for the bolt cover and the other skins
                    boltCover.AddComponent<BetterRandomSpriteChildBehaviour>().Sprites = new Sprite[]
                    {
                      ModAPI.LoadSprite("Guns/Bullpups/IWI_X95/IWI_X95_BoltCover.png"),
                      ModAPI.LoadSprite("Guns/Bullpups/IWI_X95/IWI_X95_BoltCover_Tan.png")
                    };

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.1226031f, -0.2022963f), new Vector2(0.2671111f, 0.02407393f), new Vector2(0.4983005f, 0.03152668f), new Vector2(0.5005639f, 0.1113159f), new Vector2(0.620191f, 0.1129629f), new Vector2(0.6223704f, 0.1432274f), new Vector2(0.5090876f, 0.1691321f), new Vector2(0.4970583f, 0.2346349f), new Vector2(0.457772f, 0.2072541f), new Vector2(0.2758463f, 0.2040038f), new Vector2(0.2698184f, 0.2260729f), new Vector2(-0.1504303f, 0.2298712f), new Vector2(-0.1446361f, 0.2030608f), new Vector2(-0.5981164f, 0.2002752f), new Vector2(-0.5880105f, -0.06201063f), new Vector2(-0.3360107f, -0.06081493f), new Vector2(-0.2986243f, -0.2225079f), new Vector2(-0.1831428f, -0.1939365f), new Vector2(-0.2103469f, 0.008710116f), new Vector2(-0.009605855f, 0.02758756f), new Vector2(-0.07831751f, -0.1276084f), new Vector2(-0.03559795f, -0.1977037f), };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.07f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.2857f, 0.1143f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0.035f, -0.03f, 0), new Vector3(0.42f, 0, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.618f, 0.129f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.3714f, 0.0143f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.0288f, 0.2144f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_556;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_4.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_5.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_6.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_4.wav")
                    };
                }
            }
            );

            // STEYR AUG
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Assault Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} Steyr AUG", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'AUG'  5.56×45mm NATO  Skins: 3               \n\nThe Steyr AUG is a Austrian made bullpup assault rifle, it's commonly used by both the Australian and New Zealand Military.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Bullpups/AUG/AUG_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Bullpups/AUG/AUG.png"),
                        ModAPI.LoadSprite("Guns/Bullpups/AUG/AUG_Pmag.png"),
                        ModAPI.LoadSprite("Guns/Bullpups/AUG/AUG_2.png"),
                        ModAPI.LoadSprite("Guns/Bullpups/AUG/AUG_2_Pmag.png")
                    };
                    //Set to zero so it always starts normal
                    
                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Bullpups/AUG/AUG.png");

                    //Set the sprite for the bolt cover and the other skins
                    var boltCover = CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Bullpups/AUG/AUG_Bolt.png"), Position: new Vector2(-0.3143f, 0.05714f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.1f, BoltCover: ModAPI.LoadSprite("Guns/Bullpups/AUG/AUG_BoltCover.png"), BoltCoverPosition: new Vector2(-0.4571f, 0.05714f));
                    boltCover.AddComponent<BetterRandomSpriteChildBehaviour>().Sprites = new Sprite[]
                    {
                      ModAPI.LoadSprite("Guns/Bullpups/AUG/AUG_BoltCover.png"),
                      ModAPI.LoadSprite("Guns/Bullpups/AUG/AUG_BoltCover.png"),
                      ModAPI.LoadSprite("Guns/Bullpups/AUG/AUG_BoltCover_Tan.png"),
                      ModAPI.LoadSprite("Guns/Bullpups/AUG/AUG_BoltCover_Tan.png")
                    };

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.6426191f, 0.07616535f), new Vector2(0.3241631f, 0.07222685f), new Vector2(0.2650561f, 0.2453527f), new Vector2(-0.1457351f, 0.2343317f), new Vector2(-0.1490179f, 0.1886358f), new Vector2(-0.04317529f, 0.1789423f), new Vector2(-0.0761389f, 0.09553824f), new Vector2(-0.6209513f, 0.09384292f), new Vector2(-0.6407959f, -0.01336925f), new Vector2(-0.6095295f, -0.2091204f), new Vector2(-0.5309085f, -0.2057186f), new Vector2(-0.3794999f, -0.0977619f), new Vector2(-0.2868034f, -0.2717567f), new Vector2(-0.1715623f, -0.2330354f), new Vector2(-0.2523497f, -0.08323064f), new Vector2(-0.09489761f, -0.02061923f), new Vector2(-0.07979447f, -0.2030779f), new Vector2(0.03685937f, -0.2120868f), new Vector2(0.1918048f, -0.03578344f), new Vector2(0.2962185f, -0.01843333f), new Vector2(0.2965879f, -0.190426f), new Vector2(0.3577382f, -0.181901f), new Vector2(0.379343f, 0.02147264f), new Vector2(0.6411293f, 0.04482332f), };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.08f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.2857f, 0.1143f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0.035f, -0.03f, 0), new Vector3(0.42f, 0, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.15f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.65f, 0.0572f);
                    Instance.transform.Find("BarrelAttachment").gameObject.SetActive(false);
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0286f, 0.257f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_556;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_4.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_5.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_6.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_4.wav")
                    };
                }
            }
            );

            // AUG A3
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Assault Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} Steyr AUG A3", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'AUG'  5.56×45mm NATO  Skins: 3               \n\nThe Steyr AUG is a Austrian made bullpup assault rifle, it's commonly used by both the Australian and New Zealand Military.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Bullpups/AUG_PIC/AUG_PIC_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Bullpups/AUG_PIC/AUG_PIC.png"),
                        ModAPI.LoadSprite("Guns/Bullpups/AUG_PIC/AUG_PIC_Pmag.png"),
                        ModAPI.LoadSprite("Guns/Bullpups/AUG_PIC/AUG_PIC_2.png"),
                        ModAPI.LoadSprite("Guns/Bullpups/AUG_PIC/AUG_PIC_2_Pmag.png")
                    };
                    //Set to zero so it always starts normal
                    
                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Bullpups/AUG_PIC/AUG_PIC.png");

                    //Set the sprite for the bolt
                    var boltCover = CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Bullpups/AUG/AUG_Bolt.png"), Position: new Vector2(-0.3143f, 0.05714f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.1f, BoltCover: ModAPI.LoadSprite("Guns/Bullpups/AUG/AUG_BoltCover.png"), BoltCoverPosition: new Vector2(-0.4571f, 0.05714f));
                    //Set the sprite for the bolt cover and the other skins
                    boltCover.AddComponent<BetterRandomSpriteChildBehaviour>().Sprites = new Sprite[]
                    {
                      ModAPI.LoadSprite("Guns/Bullpups/AUG/AUG_BoltCover.png"),
                      ModAPI.LoadSprite("Guns/Bullpups/AUG/AUG_BoltCover.png"),
                      ModAPI.LoadSprite("Guns/Bullpups/AUG/AUG_BoltCover_Tan.png"),
                      ModAPI.LoadSprite("Guns/Bullpups/AUG/AUG_BoltCover_Tan.png")
                    };

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.6426191f, 0.07616535f), new Vector2(-0.01423973f, 0.09386985f), new Vector2(-0.0761389f, 0.09553824f), new Vector2(-0.6209513f, 0.09384292f), new Vector2(-0.6407959f, -0.01336925f), new Vector2(-0.6095295f, -0.2091204f), new Vector2(-0.5309085f, -0.2057186f), new Vector2(-0.3794999f, -0.0977619f), new Vector2(-0.2868034f, -0.2717567f), new Vector2(-0.1715623f, -0.2330354f), new Vector2(-0.2523497f, -0.08323064f), new Vector2(-0.09489761f, -0.02061923f), new Vector2(-0.07979447f, -0.2030779f), new Vector2(0.03685937f, -0.2120868f), new Vector2(0.1918048f, -0.03578344f), new Vector2(0.2962185f, -0.01843333f), new Vector2(0.2965879f, -0.190426f), new Vector2(0.3577382f, -0.181901f), new Vector2(0.379343f, 0.02147264f), new Vector2(0.6411293f, 0.04482332f), };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.08f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.2857f, 0.1143f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0.035f, -0.03f, 0), new Vector3(0.42f, 0, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.14f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.65f, 0.0572f);
                    Instance.transform.Find("BarrelAttachment").gameObject.SetActive(false);
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.0857f, 0.1428f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_556;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_4.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_5.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_6.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_4.wav")
                    };
                }
            }
            );

            // L85A2
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Assault Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} L85A2", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Charlie G'  5.56×45mm NATO  Skins: 1         \n\nThe SA80 series, which includes the L85A2 has been the standard issue service rifle of the British Armed forces since 1987.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Bullpups/L85A2/L85A2_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Bullpups/L85A2/L85A2.png"),
                        ModAPI.LoadSprite("Guns/Bullpups/L85A2/L85A2_Tan.png")
                    };
                    //Set to zero so it always starts normal
                    
                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Bullpups/L85A2/L85A2.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.5365249f, 0.08852327f), new Vector2(0.3644642f, 0.1357204f), new Vector2(0.340696f, 0.26262f), new Vector2(0.311359f, 0.1455587f), new Vector2(-0.002384722f, 0.1450843f), new Vector2(-0.01929364f, 0.2330331f), new Vector2(-0.2966299f, 0.2514229f), new Vector2(-0.3110043f, 0.1429611f), new Vector2(-0.6696299f, 0.14424f), new Vector2(-0.66391f, -0.07970222f), new Vector2(-0.3624087f, -0.02594554f), new Vector2(-0.3242317f, -0.266667f), new Vector2(-0.2077774f, -0.2288134f), new Vector2(-0.2541602f, 0.00643833f), new Vector2(-0.04625479f, 0.004637521f), new Vector2(-0.1078636f, -0.1780959f), new Vector2(-0.0165197f, -0.1781652f), new Vector2(0.02485134f, -0.06200285f), new Vector2(0.1254888f, -0.05405392f), new Vector2(0.1726753f, 0.002741605f), new Vector2(0.5297414f, 0.001657903f), new Vector2(0.5359838f, 0.05164162f), new Vector2(0.6732273f, 0.05755875f), new Vector2(0.6678312f, 0.07990226f), };
                   
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Bullpups/L85A2/L85A2_Bolt.png"), Position: new Vector2(-0.357f, 0.0714f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.1f, BoltCover: ModAPI.LoadSprite("Guns/Bullpups/L85A2/L85A2_BoltCover.png"), BoltCoverPosition: new Vector2(-0.5f, 0.0714f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.083f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.3714f, 0.1f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0f, -0.06f, 0), new Vector3(0.35f, -0.01f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.694f, 0.07143f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.357f, -0.0142f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1285f, 0.2428f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_556;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_4.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_5.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_6.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_4.wav")
                    };
                }
            }
            );

            #endregion

            // BattleRifles
            #region BattleRifles

            // Scar-H
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} Scar-H", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'The gun from fortnite'  7.62×51mm NATO  Skins: 1         \n\nThe FN SCAR-H was designed for and is commonly used by Special Operations Forces, it saw extended use in the war in Afghanastan.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Marksman/Scar-H/Scar-H_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Marksman/Scar-H/Scar-H.png"),
                        ModAPI.LoadSprite("Guns/Marksman/Scar-H/Scar-H_Black.png")

                    };
                    //Set to zero so it always starts normal
                    
                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Marksman/Scar-H/Scar-H.png");

                    //Set the sprite for the bolt
                    var boltCover = CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Marksman/Scar-H/Scar-H_Bolt.png"), Position: new Vector2(-0.05714f, 0.05714f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.07f, BoltCover: ModAPI.LoadSprite("Guns/Marksman/Scar-H/Scar-H_BoltCover_Black.png"), BoltCoverPosition: new Vector2(-0.25714f, 0.05714f));
                    //Set the sprite for the bolt cover and the other skins
                    boltCover.AddComponent<BetterRandomSpriteChildBehaviour>().Sprites = new Sprite[]
                    {
                      ModAPI.LoadSprite("Guns/Marksman/Scar-H/Scar-H_BoltCover.png"),
                      ModAPI.LoadSprite("Guns/Marksman/Scar-H/Scar-H_BoltCover_Black.png")

                    };

                    // Adjust colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.4472618f, 0.07768968f), new Vector2(0.4159701f, 0.2412967f), new Vector2(0.3849816f, 0.2415332f), new Vector2(0.3861168f, 0.1564422f), new Vector2(-0.2951258f, 0.1591119f), new Vector2(-0.2940776f, 0.2402811f), new Vector2(-0.3248448f, 0.2447325f), new Vector2(-0.32816f, 0.1459534f), new Vector2(-0.5899998f, 0.0798939f), new Vector2(-0.7497835f, 0.09154826f), new Vector2(-0.748172f, -0.1878042f), new Vector2(-0.5911264f, -0.01491367f), new Vector2(-0.2742734f, -0.01575416f), new Vector2(-0.3909467f, -0.2278646f), new Vector2(-0.2836696f, -0.2496582f), new Vector2(-0.2037121f, -0.09042206f), new Vector2(-0.07582374f, -0.09542856f), new Vector2(-0.07232121f, -0.239588f), new Vector2(0.07644874f, -0.2426395f), new Vector2(0.08666593f, 0.005266368f), new Vector2(0.3966083f, 0.009716421f), new Vector2(0.4107091f, 0.03513272f), new Vector2(0.7608229f, 0.04213805f), new Vector2(0.7634284f, 0.07906351f), };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.0285f, 0.0714f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.27f, -0.12f, 0), new Vector3(0.15f, 0f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.17f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.765f, 0.057f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.315f, 0f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1428f, 0.1714f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x51;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_4.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_3.wav")
                    };
                }
            }
            );
            
            // MCX
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from Black Mamba
                NameOverride = $"{Mod.ModTag} SIG MCX", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Black Mamba'  .300 AAC Blackout  Skins: 0           \n\nThe SIG MCX is a US made Carbine that comes in a variety of configurations and calibers, most commonly 5.56x45mm and .300 AAC Blackout.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/BattleRifles/MCX/MCX_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/BattleRifles/MCX/MCX.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.4575583f, 0.1445115f), new Vector2(0.4015719f, 0.2007001f), new Vector2(0.4000375f, 0.1415224f), new Vector2(-0.1977628f, 0.1450219f), new Vector2(-0.2568154f, 0.2001602f), new Vector2(-0.2585961f, 0.1389301f), new Vector2(-0.319342f, 0.1364896f), new Vector2(-0.314079f, 0.1179888f), new Vector2(-0.5715804f, 0.1153918f), new Vector2(-0.5777893f, 0.1440693f), new Vector2(-0.6571429f, 0.142837f), new Vector2(-0.6591843f, -0.09180872f), new Vector2(-0.5977892f, -0.08611517f), new Vector2(-0.5407491f, 0.08112642f), new Vector2(-0.3471361f, 0.07783927f), new Vector2(-0.2590053f, -0.005745724f), new Vector2(-0.310092f, -0.1673355f), new Vector2(-0.2368232f, -0.1675979f), new Vector2(-0.1978451f, -0.06065805f), new Vector2(-0.08122492f, -0.05798922f), new Vector2(-0.0445669f, -0.1865863f), new Vector2(0.05507115f, -0.1510031f), new Vector2(0.02622253f, 0.02440558f), new Vector2(0.4533171f, 0.02766456f), new Vector2(0.4587923f, 0.05779617f), new Vector2(0.6570037f, 0.0581224f), new Vector2(0.6560773f, 0.08652053f), new Vector2(0.4878504f, 0.08708283f), new Vector2(0.4810287f, 0.143011f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/BattleRifles/MCX/MCX_Bolt.png"), Position: new Vector2(-0.0286f, 0.07143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/BattleRifles/MCX/MCX_BoltCover.png"), BoltCoverPosition: new Vector2(-0.143f, 0.07143f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.075f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.0857f, 0.1143f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.32f, -0.06f, 0), new Vector3(0.089f, 0.028f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.14f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.663f, 0.071f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2429f, 0.0143f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.07143f, 0.15714f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_300Blk;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/MCX_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/MCX_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/MCX_3.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/MCX_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/MCX_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/MCX_Suppressed_3.wav")
                    };
                }
            }
            );

            // Grot
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} MSBS Grot", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Spearhead'  5.56×45mm NATO  Skins: 0           \n\nThe FB MSBS Grot is a Polish assault rifle made to replace the FB Beryl as the standard service rifle of the Polish Armed Forces.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/BattleRifles/Grot/Grot_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/BattleRifles/Grot/Grot.png");

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.5436029f, 0.1740804f), new Vector2(0.509124f, 0.2272126f), new Vector2(-0.4162391f, 0.2228898f), new Vector2(-0.8f, 0.1693111f), new Vector2(-0.7980884f, -0.1368134f), new Vector2(-0.7468431f, -0.140724f), new Vector2(-0.6578835f, 0.09874772f), new Vector2(-0.4028319f, 0.08452181f), new Vector2(-0.3590648f, 0.009987727f), new Vector2(-0.4325073f, -0.1238464f), new Vector2(-0.335205f, -0.1722465f), new Vector2(-0.2746364f, -0.02644834f), new Vector2(-0.1869281f, -0.05416568f), new Vector2(-0.1188403f, -0.01322827f), new Vector2(-0.1104308f, -0.109593f), new Vector2(-0.04961991f, -0.2123906f), new Vector2(0.06587742f, -0.1540181f), new Vector2(0.0299185f, -0.06974731f), new Vector2(0.01930884f, 0.0499777f), new Vector2(0.06607038f, 0.08915336f), new Vector2(0.5458485f, 0.08938994f), new Vector2(0.5450013f, 0.1463039f), new Vector2(0.8f, 0.1449747f), new Vector2(0.8f, 0.1712227f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/BattleRifles/Grot/Grot_Bolt.png"), Position: new Vector2(-0.0714f, 0.1571f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/BattleRifles/Grot/Grot_BoltCover.png"), BoltCoverPosition: new Vector2(-0.2143f, 0.1571f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.075f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.0714f, 0.1571f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.328f, -0.04f, 0), new Vector3(0.209f, 0.08f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.15f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.806f, 0.157f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2714f, 0.0714f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.2428f, 0.2428f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_556;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_4.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_5.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_6.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_4.wav")
                    };
                }
            }
            );

            // ACR
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} Remington ACR", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Masada'  5.56×45mm NATO  Skins: 0              \n\nThe Remington ACR is a ambidextrous modular design that can be modified to fire 6.8mm SPC instead of 5.56x45mm in a matter of minutes.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/BattleRifles/ACR/ACR_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/BattleRifles/ACR/ACR.png");

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.4413086f, 0.08448666f), new Vector2(0.4751017f, 0.117849f), new Vector2(0.4730392f, 0.140562f), new Vector2(0.4185641f, 0.1444224f), new Vector2(0.4154825f, 0.1711646f), new Vector2(0.3873696f, 0.1759231f), new Vector2(0.3875781f, 0.1988531f), new Vector2(0.2984882f, 0.1998285f), new Vector2(0.2971451f, 0.171578f), new Vector2(-0.2172348f, 0.1733748f), new Vector2(-0.2170451f, 0.1980986f), new Vector2(-0.2697892f, 0.1990575f), new Vector2(-0.2711148f, 0.1734705f), new Vector2(-0.4063478f, 0.1739247f), new Vector2(-0.5447184f, 0.1150948f), new Vector2(-0.6147915f, 0.1130883f), new Vector2(-0.6161876f, 0.1430669f), new Vector2(-0.6687223f, 0.1431683f), new Vector2(-0.6687223f, -0.08633652f), new Vector2(-0.5896779f, -0.08586504f), new Vector2(-0.5558823f, 0.02609558f), new Vector2(-0.442586f, 0.02994964f), new Vector2(-0.4375229f, 0.05110543f), new Vector2(-0.3592845f, 0.05341096f), new Vector2(-0.3544804f, 0.02676006f), new Vector2(-0.267298f, 0.02252351f), new Vector2(-0.330057f, -0.1283102f), new Vector2(-0.2321059f, -0.1645348f), new Vector2(-0.1859406f, -0.05759051f), new Vector2(-0.04200462f, -0.05699293f), new Vector2(-0.001351282f, -0.2008393f), new Vector2(0.1020322f, -0.1672476f), new Vector2(0.06590143f, 0.02266889f), new Vector2(0.4187348f, 0.03348162f), new Vector2(0.4152867f, 0.05487107f), new Vector2(0.6664569f, 0.05694038f), new Vector2(0.6664571f, 0.08319774f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/BattleRifles/ACR/ACR_Bolt.png"), Position: new Vector2(0.01428f, 0.1f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/BattleRifles/ACR/ACR_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1f, 0.1f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.09f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.01428f, 0.1f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.25f, -0.06f, 0), new Vector3(0.175f, 0.03f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.15f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.677f, 0.0715f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2285f, 0.01428f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1142f, 0.1857f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_556;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_4.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_5.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_6.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_4.wav")
                    };
                }
            }
            );

            // XM8
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} HK XM8", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Shark Gun'  5.56×45mm NATO  Skins: 0           \n\nThe XM8 is a lightweight assault rifle developed by Heckler & Koch, it's odd shape earned it the nickname 'Fish Gun' or 'Shark Gun'.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/BattleRifles/XM8/XM8_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/BattleRifles/XM8/XM8.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.03446914f, 0.188348f), new Vector2(-0.03581609f, 0.2386043f), new Vector2(-0.06634682f, 0.2665579f), new Vector2(-0.2272467f, 0.2631403f), new Vector2(-0.2555926f, 0.2382828f), new Vector2(-0.2560284f, 0.1883857f), new Vector2(-0.2268322f, 0.1846152f), new Vector2(-0.2345236f, 0.123871f), new Vector2(-0.3087369f, 0.1265519f), new Vector2(-0.4704351f, 0.07534239f), new Vector2(-0.6800976f, 0.07374615f), new Vector2(-0.68564f, 0.09841061f), new Vector2(-0.7428572f, 0.09833625f), new Vector2(-0.7408217f, -0.159327f), new Vector2(-0.6876755f, -0.1593271f), new Vector2(-0.6493612f, -0.04070479f), new Vector2(-0.2393437f, -0.04322888f), new Vector2(-0.3430802f, -0.2042569f), new Vector2(-0.2862882f, -0.2451241f), new Vector2(-0.2172255f, -0.2439888f), new Vector2(-0.1584868f, -0.08970368f), new Vector2(-0.1397611f, -0.1265612f), new Vector2(-0.03414949f, -0.1224089f), new Vector2(-0.02595758f, -0.1784846f), new Vector2(0.03923304f, -0.2750019f), new Vector2(0.1453388f, -0.1940794f), new Vector2(0.08522031f, -0.1097003f), new Vector2(0.08920301f, -0.03822895f), new Vector2(0.6594014f, -0.008327894f), new Vector2(0.661364f, 0.01419354f), new Vector2(0.7408807f, 0.01464204f), new Vector2(0.7471403f, 0.04110554f), new Vector2(0.6620039f, 0.03884089f), new Vector2(0.6598161f, 0.07236699f), new Vector2(0.6288688f, 0.09803885f), new Vector2(0.5503292f, 0.1051276f), new Vector2(0.4213952f, 0.1585787f), new Vector2(0.2024816f, 0.1859373f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/BattleRifles/XM8/XM8_Bolt.png"), Position: new Vector2(0.0143f, 0.0286f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/BattleRifles/XM8/XM8_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1286f, 0.0286f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.08f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.0143f, 0.0286f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.22f, -0.104f, 0), new Vector3(0.3f, -0.035f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.751f, 0.028f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.4143f, -0.0285f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").gameObject.SetActive(false); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_556;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_4.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_5.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_6.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_4.wav")
                    };
                }
            }
            );

            // R11
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} R11 RSASS", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'RSASS'  7.62x51mm NATO  Skins: 1               \n\nThe RSASS is based on the AR-10 but shares alot more in common with the SR-25 including the caliber and even interchangable magazines.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/BattleRifles/R11/R11_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/BattleRifles/R11/R11_TAN.png"),
                        ModAPI.LoadSprite("Guns/BattleRifles/R11/R11.png")
                    };
                    //Set to zero so it always starts normal
                    
                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/BattleRifles/R11/R11_TAN.png");


                    //Set the sprite for the bolt
                    var boltCover = CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/BattleRifles/R11/R11_Bolt.png"), Position: new Vector2(-0.0572f, 0.1286f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.07f, BoltCover: ModAPI.LoadSprite("Guns/BattleRifles/R11/R11_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1857f, 0.1286f));
                    
                    //Set the sprite for the bolt cover and the other skins
                    boltCover.AddComponent<BetterRandomSpriteChildBehaviour>().Sprites = new Sprite[]
                    {
                      ModAPI.LoadSprite("Guns/BattleRifles/R11/R11_TAN_BoltCover.png"),
                      ModAPI.LoadSprite("Guns/BattleRifles/R11/R11_BoltCover.png")
                    };

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.3277143f, 0.1711612f), new Vector2(-0.337244f, 0.1442094f), new Vector2(-0.7551745f, 0.1399346f), new Vector2(-0.7571428f, -0.08482014f), new Vector2(-0.5913557f, -0.07992092f), new Vector2(-0.4983878f, 0.06282711f), new Vector2(-0.2976846f, 0.05874091f), new Vector2(-0.3588828f, -0.146774f), new Vector2(-0.2782635f, -0.1416359f), new Vector2(-0.2412721f, -0.01928147f), new Vector2(-0.1277897f, -0.02784048f), new Vector2(-0.1320466f, -0.1488619f), new Vector2(0.008850195f, -0.1540725f), new Vector2(0.007410288f, 0.05091064f), new Vector2(0.5229064f, 0.05696275f), new Vector2(0.5253438f, 0.08775546f), new Vector2(0.7546537f, 0.08766809f), new Vector2(0.7534659f, 0.1142709f), new Vector2(0.525667f, 0.1137832f), new Vector2(0.5233235f, 0.1394953f), new Vector2(0.4461399f, 0.1694602f), };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().Automatic = false;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.0572f, 0.1286f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.29f, -0.048f, 0), new Vector3(0.2f, 0.045f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.17f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.763f, 0.1f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2571f, 0.0429f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1714f, 0.1857f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x51;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_4.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_3.wav")
                    };
                }
            }
            );

            // SR25
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} SR-25", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Stoner'  7.62x51mm NATO  Skins: 0              \n\nThe SR-25 is a marksman rifle manufactured by Knight's Armament for the US military, it has been in service since the early 1990's.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/BattleRifles/SR25/SR25_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/BattleRifles/SR25/SR25.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.3703455f, 0.15482f), new Vector2(-0.3815647f, 0.1292949f), new Vector2(-0.7428572f, 0.130325f), new Vector2(-0.7428572f, -0.07221977f), new Vector2(-0.6645326f, -0.06842621f), new Vector2(-0.4502513f, 0.03769694f), new Vector2(-0.340265f, 0.03687839f), new Vector2(-0.3409524f, -0.003402695f), new Vector2(-0.3946329f, -0.1549622f), new Vector2(-0.3218912f, -0.1544896f), new Vector2(-0.2772802f, -0.04601503f), new Vector2(-0.16884f, -0.04843602f), new Vector2(-0.1710813f, -0.1527102f), new Vector2(-0.03547972f, -0.1213857f), new Vector2(-0.0303902f, 0.04302841f), new Vector2(0.5134771f, 0.04374513f), new Vector2(0.5140342f, 0.07233769f), new Vector2(0.7485949f, 0.07140639f), new Vector2(0.7498797f, 0.09316614f), new Vector2(0.5150911f, 0.09590665f), new Vector2(0.5124053f, 0.1277063f), new Vector2(0.4456263f, 0.1593777f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/BattleRifles/SR25/SR25_Bolt.png"), Position: new Vector2(-0.0857f, 0.1143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/BattleRifles/SR25/SR25_BoltCover.png"), BoltCoverPosition: new Vector2(-0.2f, 0.1143f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().Automatic = false;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.0857f, 0.1143f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.32f, -0.06f, 0), new Vector3(0.089f, 0.028f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.75f, 0.0857f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.214f, 0.0286f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.2142f, 0.1714f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x51;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_4.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_3.wav")
                    };
                }
            }
            );

            // SR25 E2
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} SR-25 E2", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Stoner'  7.62x51mm NATO  Skins: 0              \n\nThe SR-25 E2 is a modernized version of the SR-25, featuring a M-Lok handguard and adjustable stock, the internals are the same.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/BattleRifles/SR25/SR25_E2_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/BattleRifles/SR25/SR25_E2.png");

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.3703455f, 0.15482f), new Vector2(-0.3815647f, 0.1292949f), new Vector2(-0.7428572f, 0.130325f), new Vector2(-0.7394958f, -0.1192794f), new Vector2(-0.6897431f, -0.1222086f), new Vector2(-0.4502513f, 0.03769694f), new Vector2(-0.441013f, 0.04435099f), new Vector2(-0.3385844f, 0.04192049f), new Vector2(-0.3409524f, -0.003402695f), new Vector2(-0.3946329f, -0.1549622f), new Vector2(-0.3218912f, -0.1544896f), new Vector2(-0.2772802f, -0.04601503f), new Vector2(-0.16884f, -0.04843602f), new Vector2(-0.1710813f, -0.1527102f), new Vector2(-0.03547972f, -0.1213857f), new Vector2(-0.0303902f, 0.04302841f), new Vector2(0.5723016f, 0.04374513f), new Vector2(0.5745394f, 0.07233769f), new Vector2(0.7183423f, 0.07308709f), new Vector2(0.714585f, 0.09988893f), new Vector2(0.6310593f, 0.1009487f), new Vector2(0.5729104f, 0.1596397f), new Vector2(0.4456263f, 0.1593777f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/BattleRifles/SR25/SR25_Bolt.png"), Position: new Vector2(-0.0857f, 0.1143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/BattleRifles/SR25/SR25_BoltCover.png"), BoltCoverPosition: new Vector2(-0.2f, 0.1143f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().Automatic = false;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.0857f, 0.1143f);
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.73f, 0.087f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.32f, -0.06f, 0), new Vector3(0.089f, 0.028f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.7225f, 0.0857f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.214f, 0.0286f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.2142f, 0.1714f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x51;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_4.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_3.wav")
                    };
                }
            }
            );

            // Galil
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} Galil", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Balashnikov'  5.56x45mm NATO  Skins: 1         \n\nThe IMI Galil is a Israeli made automatic rifle based on the RK-62, it has been in service since 1972 in the Israeli Defence Force.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/BattleRifles/Galil/Galil_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/BattleRifles/Galil/GalilARM.png"),
                        ModAPI.LoadSprite("Guns/BattleRifles/Galil/Galil.png")

                    };
                    //Set to zero so it always starts normal
                    
                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/BattleRifles/Galil/GalilARM.png");

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.2912364f, 0.2029471f), new Vector2(-0.3660895f, 0.2617643f), new Vector2(-0.3743094f, 0.1845651f), new Vector2(-0.4656187f, 0.1252913f), new Vector2(-0.9105156f, 0.1120057f), new Vector2(-0.8642384f, 0.05882213f), new Vector2(-0.8417171f, -0.09322137f), new Vector2(-0.7091702f, 0.0165588f), new Vector2(-0.3586015f, 0.02068356f), new Vector2(-0.4242336f, -0.09531219f), new Vector2(-0.325596f, -0.1428571f), new Vector2(-0.282417f, -0.02183907f), new Vector2(-0.158895f, -0.01280612f), new Vector2(-0.05280501f, -0.2271145f), new Vector2(0.06490535f, -0.189579f), new Vector2(-0.03838779f, 0.03686488f), new Vector2(0.005038515f, 0.07138723f), new Vector2(0.4994988f, 0.05259049f), new Vector2(0.5980863f, 0.03315604f), new Vector2(0.6022071f, 0.109817f), new Vector2(0.9117833f, 0.119702f), new Vector2(0.9159783f, 0.1453947f), new Vector2(0.5710846f, 0.1576131f), new Vector2(0.5339261f, 0.2070955f), };
                    
                    // Sets up Bolt Sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/BattleRifles/Galil/Galil_Bolt.png"), Position: new Vector2(-0.0429f, 0.1714f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/BattleRifles/Galil/Galil_BoltCover.png"), BoltCoverPosition: new Vector2(-0.243f, 0.1429f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.09f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.0429f, 0.1714f);
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.94f, 0.133f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.34f, -0.015f, 0), new Vector3(0.18f, 0.043f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.923f, 0.1286f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2428f, 0.04286f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1859f, 0.2144f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_556;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_4.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_5.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_6.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_4.wav")
                    };
                }
            }
            );

            // ACE52
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} Galil ACE 52", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'ACE'  5.56x45mm NATO  Skins: 0                 \n\nThe IWI Galil ACE 52 is a modernized Galil featuring a lighter build, better accuracy and Picatinny rails among other improvements.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/BattleRifles/ACE52/ACE52_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/BattleRifles/ACE52/ACE52.png");

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.3277204f, 0.07869176f), new Vector2(0.839126f, 0.08408537f), new Vector2(0.8396137f, 0.1143707f), new Vector2(0.5606488f, 0.116498f), new Vector2(0.4890766f, 0.2308591f), new Vector2(0.4360456f, 0.178497f), new Vector2(-0.3469453f, 0.1894177f), new Vector2(-0.3852925f, 0.2295126f), new Vector2(-0.4367029f, 0.144863f), new Vector2(-0.8450267f, 0.135401f), new Vector2(-0.8375254f, -0.1184599f), new Vector2(-0.7621702f, -0.1162498f), new Vector2(-0.6789749f, -0.0212306f), new Vector2(-0.6573991f, -0.05818774f), new Vector2(-0.4716295f, 0.05753665f), new Vector2(-0.4126758f, 0.009833343f), new Vector2(-0.4940765f, -0.1212695f), new Vector2(-0.3604174f, -0.1714931f), new Vector2(-0.3196004f, -0.03042798f), new Vector2(-0.1889234f, -0.01020372f), new Vector2(-0.1634637f, -0.0275258f), new Vector2(-0.1550858f, -0.2260603f), new Vector2(-0.0189118f, -0.2024274f), new Vector2(-0.01204872f, 0.02338401f), new Vector2(0.3245999f, 0.03441368f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/BattleRifles/ACE52/ACE52_Bolt.png"), Position: new Vector2(-0.0428f, 0.1285f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/BattleRifles/ACE52/ACE52_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1571f, 0.1285f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.09f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.0428f, 0.1285f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.4f, -0.054f, 0), new Vector3(0.175f, 0.046f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.849f, 0.1f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1714f, 0.0143f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.2285f, 0.1857f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_556;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_4.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_5.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_6.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_4.wav")
                    };
                }
            }
            );

            // STG44
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} StG 44", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Sturmgewehr'  7.92×33mm Kurz  Skins: 0         \n\nThe Sturmgewehr 44 was developed during WW2 and was one of the first assault rifles ever made, influencing many modern deisgns.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/BattleRifles/STG44/STG44_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    // Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/BattleRifles/STG44/STG44.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.3992151f, 0.2278389f), new Vector2(-0.8f, 0.1943429f), new Vector2(-0.8017944f, -0.02829719f), new Vector2(-0.3970376f, 0.1137723f), new Vector2(-0.2559655f, 0.1161393f), new Vector2(-0.2603134f, 0.06117626f), new Vector2(-0.351046f, -0.01987264f), new Vector2(-0.2710858f, -0.09413724f), new Vector2(-0.2037448f, 0.006661959f), new Vector2(-0.000115402f, 0.04557249f), new Vector2(0.08833124f, -0.2409943f), new Vector2(0.2085601f, -0.181783f), new Vector2(0.1113632f, 0.05122206f), new Vector2(0.1125584f, 0.1134173f), new Vector2(0.5685374f, 0.1164913f), new Vector2(0.5776191f, 0.1419127f), new Vector2(0.8005114f, 0.1434566f), new Vector2(0.8015499f, 0.1743153f), new Vector2(0.7712714f, 0.1729335f), new Vector2(0.7655831f, 0.2603516f), new Vector2(0.7207043f, 0.1740645f), new Vector2(0.5795615f, 0.1736267f), new Vector2(0.6026288f, 0.2302286f), };
                    
                    // Sets up gun bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/BattleRifles/STG44/STG44_Bolt.png"), Position: new Vector2(0.05714f, 0.1857f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/BattleRifles/STG44/STG44_BoltCover.png"), BoltCoverPosition: new Vector2(-0.05714f, 0.1857f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.05714f, 0.1857f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.26f, 0.01f, 0), new Vector3(0.22f, 0.125f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.807f, 0.1571f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2428f, 0.1f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1857f, 0.2427f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_545;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_4.wav")
                    };
                }
            }
            );

            // FNFAL
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} FN FAL", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Right arm of the free world'  7.62×51mm NATO  Skins: 2  \n\nThe FN Fal is a Belgium made battle rifle, during the cold war it was adopted by many NATO countries earning it's nickname.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/BattleRifles/FNFAL/FNFAL_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/BattleRifles/FNFAL/FNFAL.png"),
                        ModAPI.LoadSprite("Guns/BattleRifles/FNFAL/FNFAL_Stock1.png"),
                        ModAPI.LoadSprite("Guns/BattleRifles/FNFAL/FNFAL_Wood.png")
                    };

                    //Set to zero so it always starts normal
                    
                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/BattleRifles/FNFAL/FNFAL.png");

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.6582145f, 0.08682412f), new Vector2(0.6892434f, 0.1242494f), new Vector2(0.6296669f, 0.1767257f), new Vector2(0.5858846f, 0.1382172f), new Vector2(-0.2881853f, 0.1433046f), new Vector2(-0.3342861f, 0.1988947f), new Vector2(-0.3785171f, 0.1338438f), new Vector2(-0.5287842f, 0.0943159f), new Vector2(-0.8571429f, 0.09465036f), new Vector2(-0.8608511f, -0.112857f), new Vector2(-0.754884f, -0.1182819f), new Vector2(-0.4710942f, 0.03291884f), new Vector2(-0.3053374f, 0.03127509f), new Vector2(-0.313389f, -0.05155308f), new Vector2(-0.4019857f, -0.1363482f), new Vector2(-0.2897804f, -0.1760082f), new Vector2(-0.2382072f, -0.06586573f), new Vector2(-0.100574f, -0.08591557f), new Vector2(-0.02820474f, -0.0243461f), new Vector2(-0.02385325f, -0.2018328f), new Vector2(0.1090488f, -0.1682623f), new Vector2(0.111269f, 0.02802877f), new Vector2(0.855027f, 0.0528961f), new Vector2(0.855027f, 0.08361351f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/BattleRifles/FNFAL/FNFAL_Bolt.png"), Position: new Vector2(0.02858f, 0.1f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/BattleRifles/FNFAL/FNFAL_BoltCover.png"), BoltCoverPosition: new Vector2(-0.08571f, 0.1f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.08f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.02858f, 0.1f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.276f, -0.058f, 0), new Vector3(0.248f, 0.038f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.17f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.864f, 0.0714f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.385f, 0.0146f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1856f, 0.1571f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x51;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/FAL_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/FAL_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/FAL_3.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/FAL_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/FAL_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/FAL_Suppressed_3.wav")
                    };
                }
            }
            );

            // FNFAL Long
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} FN FAL Extended Barrel", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Right arm of the free world'  7.62×51mm NATO  Skins: 2  \n\nThe FN Fal is a Belgium made battle rifle, during the cold war it was adopted by many NATO countries earning it's nickname.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/BattleRifles/FNFAL/FNFAL_Long_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/BattleRifles/FNFAL/FNFAL_Long.png"),
                        ModAPI.LoadSprite("Guns/BattleRifles/FNFAL/FNFAL_Long_Stock1.png"),
                        ModAPI.LoadSprite("Guns/BattleRifles/FNFAL/FNFAL_Long_Wood.png")
                    };

                    //Set to zero so it always starts normal
                    
                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/BattleRifles/FNFAL/FNFAL_Long.png");

                    //Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.5564724f, 0.08711487f), new Vector2(0.5920824f, 0.1368107f), new Vector2(0.5238648f, 0.1759686f), new Vector2(0.4900549f, 0.1532999f), new Vector2(-0.37647f, 0.1420559f), new Vector2(-0.4274976f, 0.2056027f), new Vector2(-0.4716544f, 0.155274f), new Vector2(-0.615822f, 0.08878677f), new Vector2(-0.9571429f, 0.08219539f), new Vector2(-0.9546152f, -0.1216452f), new Vector2(-0.5765847f, 0.0279076f), new Vector2(-0.4168893f, 0.03521723f), new Vector2(-0.4062992f, -0.03288255f), new Vector2(-0.4919506f, -0.1180038f), new Vector2(-0.4012112f, -0.1666456f), new Vector2(-0.30372f, -0.05380006f), new Vector2(-0.2132117f, -0.08920476f), new Vector2(-0.1339417f, -0.03769086f), new Vector2(-0.1218475f, -0.1966011f), new Vector2(0.008337706f, -0.1570313f), new Vector2(0.009520829f, 0.03013796f), new Vector2(0.5545995f, 0.0287735f), new Vector2(0.9596705f, 0.0581342f), new Vector2(0.962198f, 0.08472295f), };
                    
                    // Sets up gun bolts
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/BattleRifles/FNFAL/FNFAL_Bolt.png"), Position: new Vector2(-0.07143f, 0.1f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/BattleRifles/FNFAL/FNFAL_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1857f, 0.1f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.08f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.02858f, 0.1f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.38f, -0.069f, 0), new Vector3(0.248f, 0.038f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.17f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.966f, 0.0714f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2855f, 0.0146f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.2857f, 0.1571f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x51;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/FAL_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/FAL_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/FAL_3.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/FAL_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/FAL_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/FAL_Suppressed_3.wav")
                    };
                }
            }
            );

            // SA58 SPR
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} SA58 SPR", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Right arm of the free world'  7.62×51mm NATO  Skins: 2  \n\nThe SA58 SPR is a variant of the FAL intended to be used as a DMR, it features a better trigger but lacks a automatic fire mode.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/BattleRifles/FNFAL/FNFAL_SPR_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/BattleRifles/FNFAL/FNFAL_SPR.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.5540611f, 0.08331855f), new Vector2(0.5814245f, 0.138377f), new Vector2(0.5345786f, 0.1368553f), new Vector2(0.4844517f, 0.2025575f), new Vector2(0.4692047f, 0.1399921f), new Vector2(-0.3719409f, 0.1520988f), new Vector2(-0.4437458f, 0.1913948f), new Vector2(-0.4781271f, 0.1167047f), new Vector2(-0.5287406f, 0.1095531f), new Vector2(-0.527568f, 0.1394626f), new Vector2(-0.726684f, 0.1392628f), new Vector2(-0.7310972f, 0.1147042f), new Vector2(-0.9264904f, 0.1131589f), new Vector2(-0.9223283f, -0.1417303f), new Vector2(-0.7068426f, -0.1397466f), new Vector2(-0.7939463f, -0.03588265f), new Vector2(-0.7493084f, 0.03129896f), new Vector2(-0.4157596f, 0.02261867f), new Vector2(-0.4259228f, -0.04139976f), new Vector2(-0.4966215f, -0.1358449f), new Vector2(-0.3878959f, -0.1666466f), new Vector2(-0.31569f, -0.05246551f), new Vector2(-0.2266679f, -0.09084183f), new Vector2(-0.1316296f, -0.034661f), new Vector2(-0.1195554f, -0.2034925f), new Vector2(0.009525836f, -0.1678864f), new Vector2(0.01576149f, 0.002487749f), new Vector2(0.06114657f, 0.0334953f), new Vector2(0.5610493f, 0.02233941f), new Vector2(0.5588526f, 0.05580644f), new Vector2(0.9285715f, 0.05935976f), new Vector2(0.9239553f, 0.08978345f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/BattleRifles/FNFAL/FNFAL_Bolt.png"), Position: new Vector2(-0.07143f, 0.1f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/BattleRifles/FNFAL/FNFAL_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1857f, 0.1f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().Automatic = false;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.02858f, 0.1f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.38f, -0.069f, 0), new Vector3(0.248f, 0.038f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.17f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.936f, 0.0714f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2858f, 0.0146f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.286f, 0.1571f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x51;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/FAL_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/FAL_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/FAL_3.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/FAL_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/FAL_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/FAL_Suppressed_3.wav")
                    };
                }
            }
            );

            // SA58 CTC
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} SA58 CTC", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Right arm of the free world'  7.62×51mm NATO  Skins: 2  \n\nThe SA58 CTC is a carbine variant of the FAL, it has a shortned barrel and foldable stock making it the ideal FAL variant for CQB.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/BattleRifles/FNFAL/FNFAL_CTC_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/BattleRifles/FNFAL/FNFAL_CTC.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.7980816f, 0.08763263f), new Vector2(0.6074542f, 0.08573903f), new Vector2(0.6249449f, 0.1472553f), new Vector2(0.5738421f, 0.1481421f), new Vector2(0.528013f, 0.2005513f), new Vector2(0.5108628f, 0.1488039f), new Vector2(-0.281485f, 0.1457661f), new Vector2(-0.321317f, 0.1982443f), new Vector2(-0.3880794f, 0.1176782f), new Vector2(-0.7420606f, 0.1170006f), new Vector2(-0.7438163f, -0.1403048f), new Vector2(-0.6886294f, -0.1420935f), new Vector2(-0.3991196f, 0.05227919f), new Vector2(-0.3159705f, 0.01327516f), new Vector2(-0.3279034f, -0.06500406f), new Vector2(-0.403315f, -0.1317355f), new Vector2(-0.2920287f, -0.1757909f), new Vector2(-0.2304713f, -0.05163568f), new Vector2(-0.08997402f, -0.08715846f), new Vector2(-0.0321343f, -0.03137663f), new Vector2(-0.02805753f, -0.2032868f), new Vector2(0.1229101f, -0.1683967f), new Vector2(0.1135057f, -0.005267233f), new Vector2(0.1566026f, 0.03256253f), new Vector2(0.5990491f, 0.02729527f), new Vector2(0.8022353f, 0.06033736f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/BattleRifles/FNFAL/FNFAL_Bolt.png"), Position: new Vector2(0.02857f, 0.1f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/BattleRifles/FNFAL/FNFAL_BoltCover.png"), BoltCoverPosition: new Vector2(-0.0857f, 0.1f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.08f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.02857f, 0.1f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.288f, -0.068f, 0), new Vector3(0.312f, 0.022f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.15f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.806f, 0.0714f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.357f, 0.0146f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1853f, 0.1571f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x51;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/FAL_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/FAL_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/FAL_3.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/FAL_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/FAL_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/FAL_Suppressed_3.wav")
                    };
                }
            }
            );

            // SA58 OSW
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} SA58 OSW", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Right arm of the free world'  7.62×51mm NATO  Skins: 2  \n\nThe SA58 OSW is a another Assault Carbine variant of the FAL sporting a even shorter barrel and folding stock.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/BattleRifles/FNFAL/FNFAL_OSW_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/BattleRifles/FNFAL/FNFAL_OSW.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.5433763f, 0.08824783f), new Vector2(0.5708636f, 0.1445337f), new Vector2(0.5235226f, 0.1405717f), new Vector2(0.4752606f, 0.1974896f), new Vector2(0.4647113f, 0.1449887f), new Vector2(-0.2816065f, 0.1482973f), new Vector2(-0.3287896f, 0.2011537f), new Vector2(-0.4096172f, 0.1150947f), new Vector2(-0.8272952f, 0.1157245f), new Vector2(-0.8202723f, -0.1139687f), new Vector2(-0.5595003f, 0.02924441f), new Vector2(-0.3149137f, 0.02388142f), new Vector2(-0.310867f, -0.0359939f), new Vector2(-0.3988068f, -0.1297981f), new Vector2(-0.291976f, -0.170535f), new Vector2(-0.2164044f, -0.06102533f), new Vector2(-0.09324546f, -0.08261484f), new Vector2(-0.01988246f, -0.02635419f), new Vector2(-0.02356297f, -0.1982754f), new Vector2(0.1059949f, -0.1736639f), new Vector2(0.1266207f, 0.02845821f), new Vector2(0.5407217f, 0.0321072f), new Vector2(0.5449399f, 0.05329219f), new Vector2(0.6242634f, 0.05666327f), new Vector2(0.6225077f, 0.08763261f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/BattleRifles/FNFAL/FNFAL_Bolt.png"), Position: new Vector2(0.02857f, 0.1f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/BattleRifles/FNFAL/FNFAL_BoltCover.png"), BoltCoverPosition: new Vector2(-0.0857f, 0.1f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.08f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.02857f, 0.1f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.288f, -0.068f, 0), new Vector3(0.312f, 0.022f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.15f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.635f, 0.0714f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.3285f, 0.0146f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1856f, 0.1571f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x51;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/FAL_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/FAL_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/FAL_3.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/FAL_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/FAL_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/FAL_Suppressed_3.wav")
                    };
                }
            }
            );

            // G3
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} HK G3", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'G3'  7.62×51mm NATO  Skins: 2  \n\nThe G3 is a German battle rifle manufactured by Heckler & Koch, it's design allows for many parts to be easily swapped out, including the stock & pistol grip.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/BattleRifles/G3/G3_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/BattleRifles/G3/G3.png"),
                        ModAPI.LoadSprite("Guns/BattleRifles/G3/G3Classic.png"),
                        ModAPI.LoadSprite("Guns/BattleRifles/G3/HK41.png")
                    };

                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/BattleRifles/G3/G3.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.0133525f, 0.02762274f), new Vector2(0.3133476f, 0.03210191f), new Vector2(0.3283591f, 0.05370845f), new Vector2(0.8137237f, 0.05713905f), new Vector2(0.8139996f, 0.08543245f), new Vector2(0.5830831f, 0.08678208f), new Vector2(0.5826004f, 0.1121963f), new Vector2(0.6192224f, 0.112086f), new Vector2(0.6169273f, 0.1384674f), new Vector2(0.5855941f, 0.1412567f), new Vector2(0.5867009f, 0.200789f), new Vector2(0.5551397f, 0.201962f), new Vector2(0.5565916f, 0.1452406f), new Vector2(-0.2759869f, 0.1439398f), new Vector2(-0.2724352f, 0.2035121f), new Vector2(-0.3317342f, 0.1410892f), new Vector2(-0.4387246f, 0.1405892f), new Vector2(-0.4875263f, 0.1150163f), new Vector2(-0.8145779f, 0.1182721f), new Vector2(-0.8098987f, -0.08121306f), new Vector2(-0.7334769f, -0.08054566f), new Vector2(-0.5196598f, 0.02651879f), new Vector2(-0.3545932f, 0.0276647f), new Vector2(-0.380377f, -0.1681677f), new Vector2(-0.3092225f, -0.1635999f), new Vector2(-0.274629f, -0.06073831f), new Vector2(-0.2104017f, -0.07559327f), new Vector2(-0.09897479f, -0.02855752f), new Vector2(-0.06984148f, -0.190635f), new Vector2(0.05430795f, -0.1639292f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/BattleRifles/G3/G3_Bolt.png"), Position: new Vector2(-0.07143f, 0.1f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/BattleRifles/G3/G3_BoltCover.png"), BoltCoverPosition: new Vector2(-0.18571f, 0.1f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.07143f, 0.1f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.33f, -0.07f, 0), new Vector3(0.096f, 0.017f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.82f, 0.0714f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2f, 0.0146f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1714f, 0.1571f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x51;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_4.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_3.wav")
                    };
                }
            }
            );

            // G3A4
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} HK G3A4", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'G3A4'  7.62×51mm NATO  Skins: 0                  \n\nThe G3A4 is a German battle rifle manufactured by Heckler & Koch, this variant differs from the original with a retractable stock.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/BattleRifles/G3/G3A4_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/BattleRifles/G3/G3A4.png");

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.0133525f, 0.02762274f), new Vector2(0.3133476f, 0.03210191f), new Vector2(0.3283591f, 0.05370845f), new Vector2(0.8137237f, 0.05713905f), new Vector2(0.8139996f, 0.08543245f), new Vector2(0.5830831f, 0.08678208f), new Vector2(0.5826004f, 0.1121963f), new Vector2(0.6192224f, 0.112086f), new Vector2(0.6169273f, 0.1384674f), new Vector2(0.5855941f, 0.1412567f), new Vector2(0.5867009f, 0.200789f), new Vector2(0.5551397f, 0.201962f), new Vector2(0.5565916f, 0.1452406f), new Vector2(-0.2759869f, 0.1439398f), new Vector2(-0.2724352f, 0.2035121f), new Vector2(-0.3317342f, 0.1410892f), new Vector2(-0.4387246f, 0.1405892f), new Vector2(-0.4411785f, 0.1150163f), new Vector2(-0.7581022f, 0.1180537f), new Vector2(-0.7584484f, 0.1448108f), new Vector2(-0.814563f, 0.1461332f), new Vector2(-0.8145779f, 0.1182721f), new Vector2(-0.8147774f, -0.02632753f), new Vector2(-0.7505524f, 0.05971741f), new Vector2(-0.4396753f, 0.06159015f), new Vector2(-0.4403807f, 0.02651879f), new Vector2(-0.3545932f, 0.0276647f), new Vector2(-0.380377f, -0.1681677f), new Vector2(-0.3092225f, -0.1635999f), new Vector2(-0.274629f, -0.06073831f), new Vector2(-0.2104017f, -0.07559327f), new Vector2(-0.09897479f, -0.02855752f), new Vector2(-0.06984148f, -0.190635f), new Vector2(0.05430795f, -0.1639292f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/BattleRifles/G3/G3_Bolt.png"), Position: new Vector2(-0.07143f, 0.1f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/BattleRifles/G3/G3_BoltCover.png"), BoltCoverPosition: new Vector2(-0.18571f, 0.1f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.07143f, 0.1f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.33f, -0.07f, 0), new Vector3(0.096f, 0.017f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.15f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.82f, 0.0714f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2f, 0.0146f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1714f, 0.1571f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x51;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_4.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_3.wav")
                    };
                }
            }
            );

            // G3A4 Folded
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} HK G3A4 Folded", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'G3A4'  7.62×51mm NATO  Skins: 0                  \n\nThe G3A4 is a German battle rifle manufactured by Heckler & Koch, this variant differs from the original with a retractable stock.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/BattleRifles/G3/G3A4_Folded_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/BattleRifles/G3/G3A4_Folded.png");

                    // Adjusts the colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.0133525f, 0.02762274f), new Vector2(0.3133476f, 0.03210191f), new Vector2(0.3283591f, 0.05370845f), new Vector2(0.8137237f, 0.05713905f), new Vector2(0.8139996f, 0.08543245f), new Vector2(0.5830831f, 0.08678208f), new Vector2(0.5826004f, 0.1121963f), new Vector2(0.6192224f, 0.112086f), new Vector2(0.6169273f, 0.1384674f), new Vector2(0.5855941f, 0.1412567f), new Vector2(0.5867009f, 0.200789f), new Vector2(0.5551397f, 0.201962f), new Vector2(0.5565916f, 0.1452406f), new Vector2(-0.2759869f, 0.1439398f), new Vector2(-0.2724352f, 0.2035121f), new Vector2(-0.3317342f, 0.1410892f), new Vector2(-0.4387246f, 0.1405892f), new Vector2(-0.4411785f, 0.1150163f), new Vector2(-0.4728694f, 0.117383f), new Vector2(-0.4708621f, 0.139233f), new Vector2(-0.5264915f, 0.1419042f), new Vector2(-0.5278162f, -0.03533023f), new Vector2(-0.4396753f, 0.06159015f), new Vector2(-0.4403807f, 0.02651879f), new Vector2(-0.3545932f, 0.0276647f), new Vector2(-0.380377f, -0.1681677f), new Vector2(-0.3092225f, -0.1635999f), new Vector2(-0.274629f, -0.06073831f), new Vector2(-0.2104017f, -0.07559327f), new Vector2(-0.09897479f, -0.02855752f), new Vector2(-0.06984148f, -0.190635f), new Vector2(0.05430795f, -0.1639292f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/BattleRifles/G3/G3_Bolt.png"), Position: new Vector2(-0.07143f, 0.1f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/BattleRifles/G3/G3_BoltCover.png"), BoltCoverPosition: new Vector2(-0.18571f, 0.1f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.07143f, 0.1f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.33f, -0.07f, 0), new Vector3(0.096f, 0.017f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.15f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.82f, 0.0714f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2f, 0.0146f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1714f, 0.1571f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x51;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_4.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_3.wav")
                    };
                }
            }
            );

            // G36
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} HK G36", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'HK50'  5.56×45mm NATO  Skins: 0                  \n\nThe Heckler & Koch G36 is a German Carbine intended as a replacement to the heavier G3, it has been in service since 1997.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/BattleRifles/G36/G36_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/BattleRifles/G36/G36.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.5072583f, 0.1277267f), new Vector2(0.2104528f, 0.1263582f), new Vector2(0.1697033f, 0.213116f), new Vector2(-0.3081463f, 0.2107241f), new Vector2(-0.380581f, 0.1272378f), new Vector2(-0.7392409f, 0.1293038f), new Vector2(-0.7392409f, -0.1296624f), new Vector2(-0.5450118f, 0.01488913f), new Vector2(-0.3130776f, 0.01509021f), new Vector2(-0.3443874f, -0.1555302f), new Vector2(-0.2572666f, -0.1559236f), new Vector2(-0.2534152f, -0.06774954f), new Vector2(-0.1998657f, -0.09671929f), new Vector2(-0.1132229f, -0.0710087f), new Vector2(-0.08097176f, -0.1412032f), new Vector2(-0.004271768f, -0.2457376f), new Vector2(0.08500528f, -0.1772386f), new Vector2(0.03762538f, -0.09734704f), new Vector2(0.02958539f, -0.02285019f), new Vector2(0.05992335f, 0.01711275f), new Vector2(0.4860412f, 0.01339006f), new Vector2(0.4894842f, 0.04264222f), new Vector2(0.741985f, 0.0428883f), new Vector2(0.7407415f, 0.06974449f), new Vector2(0.5463936f, 0.07028906f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/BattleRifles/G36/G36_Bolt.png"), Position: new Vector2(-0.07143f, 0.05714f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/BattleRifles/G36/G36_BoltCover.png"), BoltCoverPosition: new Vector2(-0.2143f, 0.05714f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.08f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.07143f, 0.05714f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.28f, -0.06f, 0), new Vector3(0.112f, 0f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.749f, 0.0571f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.273f, 0f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1571f, 0.2285f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_556;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_4.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_5.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_6.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_4.wav")
                    };
                }
            }
            );

            // G36K
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} HK G36K", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'HK50'  5.56×45mm NATO  Skins: 0                  \n\nThe Heckler & Koch G36K is a variant of the G36 with a shorter barrel making the carbine slightly better equipped for CQB.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/BattleRifles/G36/G36K_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/BattleRifles/G36/G36K.png");

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.4216384f, 0.1291077f), new Vector2(0.2104528f, 0.1263582f), new Vector2(0.140703f, 0.2462592f), new Vector2(-0.340159f, 0.2427369f), new Vector2(-0.3707993f, 0.1290163f), new Vector2(-0.7392409f, 0.1293038f), new Vector2(-0.7392409f, -0.1296624f), new Vector2(-0.5450118f, 0.01488913f), new Vector2(-0.3130776f, 0.01509021f), new Vector2(-0.3443874f, -0.1555302f), new Vector2(-0.2572666f, -0.1559236f), new Vector2(-0.2534152f, -0.06774954f), new Vector2(-0.1998657f, -0.09671929f), new Vector2(-0.1132229f, -0.0710087f), new Vector2(-0.08097176f, -0.1412032f), new Vector2(-0.004271768f, -0.2457376f), new Vector2(0.08500528f, -0.1772386f), new Vector2(0.03762538f, -0.09734704f), new Vector2(0.02958539f, -0.02285019f), new Vector2(0.05854238f, 0.01849372f), new Vector2(0.4515171f, 0.01477103f), new Vector2(0.4604839f, 0.04264224f), new Vector2(0.5956026f, 0.04150732f), new Vector2(0.5985019f, 0.06974448f), new Vector2(0.4621547f, 0.07167003f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/BattleRifles/G36/G36_Bolt.png"), Position: new Vector2(-0.07143f, 0.05714f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/BattleRifles/G36/G36_BoltCover.png"), BoltCoverPosition: new Vector2(-0.2143f, 0.05714f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.08f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.07143f, 0.05714f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.28f, -0.06f, 0), new Vector3(0.112f, 0f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.15f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.607f, 0.0571f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.271f, 0f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1858f, 0.2571f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_556;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_4.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_5.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_6.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_4.wav")
                    };
                }
            }
            );

            // G36C
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} G36C", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'HK50'  5.56×45mm NATO  Skins: 0                  \n\nThe Heckler & Koch G36K is a variant of the G36 with a shorter barrel making the carbine slightly better equipped for CQB.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/BattleRifles/G36/G36C_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/BattleRifles/G36/G36C.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.3137357f, 0.1255109f), new Vector2(0.2104528f, 0.1263582f), new Vector2(0.1658803f, 0.2156868f), new Vector2(-0.3059898f, 0.2103661f), new Vector2(-0.3707993f, 0.1290163f), new Vector2(-0.7392409f, 0.1293038f), new Vector2(-0.7392409f, -0.1296624f), new Vector2(-0.5450118f, 0.01488913f), new Vector2(-0.3130776f, 0.01509021f), new Vector2(-0.3443874f, -0.1555302f), new Vector2(-0.2572666f, -0.1559236f), new Vector2(-0.2534152f, -0.06774954f), new Vector2(-0.1998657f, -0.09671929f), new Vector2(-0.1132229f, -0.0710087f), new Vector2(-0.08097176f, -0.1412032f), new Vector2(-0.004271768f, -0.2457376f), new Vector2(0.08500528f, -0.1772386f), new Vector2(0.03762538f, -0.09734704f), new Vector2(0.02958539f, -0.02285019f), new Vector2(0.05854238f, 0.01644882f), new Vector2(0.3418161f, 0.01656941f), new Vector2(0.3446026f, 0.0413001f), new Vector2(0.3983381f, 0.0429768f), new Vector2(0.3980969f, 0.06941558f), new Vector2(0.3452601f, 0.0702271f), };
                   
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/BattleRifles/G36/G36_Bolt.png"), Position: new Vector2(-0.07143f, 0.05714f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/BattleRifles/G36/G36_BoltCover.png"), BoltCoverPosition: new Vector2(-0.2143f, 0.05714f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.08f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.07143f, 0.05714f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.28f, -0.06f, 0), new Vector3(0.112f, 0f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.14f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.406f, 0.0571f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1857f, 0f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1571f, 0.2285f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_556;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_4.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_5.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_6.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_4.wav")
                    };
                }
            }
            );

            // XM7
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} NGSW XM7", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'XM7'  .277 Fury  Skins: 0                        \n\nThe XM7 was the winning weapon system of the U.S NGSW program, it's set to replace the M4 Carbine as the standard service rifle.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/BattleRifles/XM7/XM7_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/BattleRifles/XM7/XM7.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.3408404f, 0.2004053f), new Vector2(-0.3418118f, 0.1730674f), new Vector2(-0.7704534f, 0.1707437f), new Vector2(-0.7732076f, -0.05934922f), new Vector2(-0.7163634f, -0.05819692f), new Vector2(-0.6494123f, 0.02723881f), new Vector2(-0.5406223f, 0.02439868f), new Vector2(-0.4729908f, 0.08498858f), new Vector2(-0.4056801f, 0.07872368f), new Vector2(-0.318695f, -0.008745596f), new Vector2(-0.3440323f, -0.1715354f), new Vector2(-0.2295175f, -0.1689935f), new Vector2(-0.2187723f, -0.05983023f), new Vector2(-0.08916704f, -0.06188352f), new Vector2(-0.09048277f, -0.197267f), new Vector2(0.04671943f, -0.1839886f), new Vector2(0.0591112f, 0.02824907f), new Vector2(0.1708279f, 0.02847525f), new Vector2(0.1726642f, 0.05408088f), new Vector2(0.6851636f, 0.0569292f), new Vector2(0.6865945f, 0.08578261f), new Vector2(0.7709833f, 0.08519974f), new Vector2(0.7711702f, 0.1429895f), new Vector2(0.6869139f, 0.143021f), new Vector2(0.6860347f, 0.201372f), };

                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/BattleRifles/XM7/XM7_Bolt.png"), Position: new Vector2(-0.0143f, 0.12857f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/BattleRifles/XM7/XM7_BoltCover.png"), BoltCoverPosition: new Vector2(-0.15714f, 0.12857f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.08f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.0143f, 0.12857f);
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.79f, 0.112f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.28f, -0.05f, 0), new Vector3(0.184f, 0.041f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.17f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.778f, 0.115f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.3285f, 0.043f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1858f, 0.214f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_68;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_4.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_3.wav")
                    };
                }
            }
            );

            #endregion
            
            // LMG
            #region LMG
            
            //RPK
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} RPK", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C2", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'RPK'  7.62x39mm  Skins: 8                        \n\nThe RPK is very similar to the AK-47, but features a longer and thicker barrel so that it can withstand sustained fire.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/AK/RPK/RPK_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]

                    {
                        ModAPI.LoadSprite("Guns/AK/RPK/RPK.png"),
                        ModAPI.LoadSprite("Guns/AK/RPK/RPK_Bakelite.png"),
                        ModAPI.LoadSprite("Guns/AK/RPK/RPK_Drum.png"),
                        ModAPI.LoadSprite("Guns/AK/RPK/RPK_2.png"),
                        ModAPI.LoadSprite("Guns/AK/RPK/RPK_2_Bakelite.png"),
                        ModAPI.LoadSprite("Guns/AK/RPK/RPK_2_Drum.png"),
                        ModAPI.LoadSprite("Guns/AK/RPK/RPK_3.png"),
                        ModAPI.LoadSprite("Guns/AK/RPK/RPK_3_Bakelite.png"),
                        ModAPI.LoadSprite("Guns/AK/RPK/RPK_3_Drum.png"),

                    };
                    //Set to zero so it always starts normal
                    
                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/AK/RPK/RPK.png");
                   
                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.7754645f, 0.157135f), new Vector2(0.7732633f, 0.2412354f), new Vector2(0.6730602f, 0.1564058f), new Vector2(0.4450965f, 0.1599687f), new Vector2(0.3966254f, 0.209816f), new Vector2(-0.4200509f, 0.207756f), new Vector2(-0.4612862f, 0.1621456f), new Vector2(-0.8285714f, 0.1553042f), new Vector2(-0.8301236f, -0.04101851f), new Vector2(-0.6958449f, -0.04125141f), new Vector2(-0.5731709f, 0.06662368f), new Vector2(-0.4495661f, 0.06967499f), new Vector2(-0.4456451f, -0.101612f), new Vector2(-0.368436f, -0.1025601f), new Vector2(-0.3707062f, -0.01422855f), new Vector2(-0.2015354f, -0.007626548f), new Vector2(-0.1868728f, -0.1680253f), new Vector2(-0.08495945f, -0.214154f), new Vector2(-0.007348508f, -0.1696735f), new Vector2(-0.09557256f, 0.0627481f), new Vector2(0.2793927f, 0.1075651f), new Vector2(0.8239223f, 0.1167797f), new Vector2(0.8219629f, 0.1569466f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/AK/_Shared/AK_Bolt.png"), Position: new Vector2(-0.1571f, 0.14286f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.13f, BoltCover: ModAPI.LoadSprite("Guns/AK/_Shared/AK_BoltCover.png"), BoltCoverPosition: new Vector2(-0.3143f, 0.14286f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.0286f, 0.1143f);
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.828f, 0.145f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.4f, 0, 0), new Vector3(0.05f, 0.06f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.18f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.836f, 0.143f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1571f, 0.0857f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.2714f, 0.2285f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x39;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AK_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK47_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK47_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK47_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK47_4.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_4.wav")
                    };
                }
            }
            );

            //PKP
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} PKP 6P41", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C2", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Pecheneg'  7.62x54mmR  Skins: 0                   \n\nThe PKP is the next evolution of the PKM, it features better accuracy than it's predecessors and has easier mounting of optics.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/LMG/PKP/PKP_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/LMG/PKP/PKP.png");
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.7923661f, 0.1513354f), new Vector2(0.5413441f, 0.1446224f), new Vector2(0.3724697f, 0.2278779f), new Vector2(0.08340572f, 0.2280383f), new Vector2(0.0284022f, 0.1628758f), new Vector2(0.01490831f, 0.2004442f), new Vector2(-0.3448773f, 0.1988157f), new Vector2(-0.4856316f, 0.118301f), new Vector2(-0.5829011f, 0.1211538f), new Vector2(-0.5879507f, 0.1514627f), new Vector2(-0.8946486f, 0.1440133f), new Vector2(-0.9003621f, 0.168502f), new Vector2(-0.9530686f, 0.1694934f), new Vector2(-0.9530686f, -0.08785348f), new Vector2(-0.8130588f, -0.05355442f), new Vector2(-0.6754519f, -0.08383016f), new Vector2(-0.6079702f, 0.024038f), new Vector2(-0.441123f, 0.01931823f), new Vector2(-0.4720576f, -0.1661036f), new Vector2(-0.3885798f, -0.1613729f), new Vector2(-0.3543603f, -0.03068645f), new Vector2(-0.2975869f, -0.05755703f), new Vector2(-0.2319932f, -0.001548603f), new Vector2(-0.1280164f, -0.002580605f), new Vector2(-0.1220008f, -0.2285714f), new Vector2(0.01832458f, -0.2289353f), new Vector2(0.01488686f, 0.03219467f), new Vector2(0.406494f, 0.03254378f), new Vector2(0.4120833f, 0.05973759f), new Vector2(0.5193434f, 0.05818514f), new Vector2(0.5334992f, 0.03130572f), new Vector2(0.6088311f, 0.03754354f), new Vector2(0.650228f, 0.07954736f), new Vector2(0.9571429f, 0.0835751f), new Vector2(0.9595801f, 0.1421277f), new Vector2(0.877577f, 0.1416961f), new Vector2(0.8715816f, 0.234683f), };

                    //This creates a new GameObject to hold the looping texture of the revolver's cylinder.
                    GameObject Cylinder = new GameObject("Cylinder");
                    Cylinder.transform.SetParent(Instance.transform, false);
                    //This sets the position of the cylinder .
                    Cylinder.transform.localPosition = new Vector3(-0.07143f, 0.1857f, 0);
                    //This sets the sprite of the cylinder to the looping texture.
                    Cylinder.AddComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/LMG/PKP/PKP_Belt.png");

                    //This sets up the revolver's cylinder looping texture.
                    CamsEasyMethods.SetUpGunLoopingTexture(Cylinder, ModAPI.LoadTexture("Guns/LMG/PKP/PKP_Belt.png"), ModAPI.LoadTexture("Guns/LMG/PKP/PKP_Mask.png"));

                    //this gets the LoopTextureHandler component from the cylinder.
                    var spinner = Instance.GetComponentInChildren<LoopTextureHandler>();

                    //This adds a burst of rotation to the cylinder.
                    void AddRotationBurst(float Amount)
                    {
                        spinner.AddRotationBurst(Amount);
                    }

                    //flips the cylinder upside down.
                    spinner.transform.localScale = new Vector3(1, -1, 1);
                    //This adds a listener to the OnFire event of the revolver and calls the AddRotationBurst function.
                    Instance.GetComponent<FirearmBehaviour>().OnFire.AddListener(() =>
                    {
                        AddRotationBurst(0.08f);
                    });

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.085f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.075f, 0.128f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.4f, -0.045f, 0), new Vector3(0.053f, 0.023f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.22f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.964f, 0.114f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1714f, 0.0144f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1428f, 0.2143f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x54;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/MG_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/PKM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/PKM_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/PKM_3.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/PKM_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/PKM_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/PKM_Suppressed_3.wav")
                    };
                }
            }
            );

            //DP28
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} Degtyaryov DP-28", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C2", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Vinylovyi'  7.62x54mmR  Skins: 0                 \n\nThe DP-28 is a Soviet light machine gun with a unique disc shaped top fed magazine, it was later replaced by the RPD and PK series.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/LMG/DP28/DP28_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/LMG/DP28/DP28.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.4825001f, 0.07316966f), new Vector2(0.4683993f, 0.1287141f), new Vector2(0.454732f, 0.07468969f), new Vector2(0.1442116f, 0.07189788f), new Vector2(0.1445942f, 0.128672f), new Vector2(-0.2270142f, 0.1337989f), new Vector2(-0.2235181f, 0.07016406f), new Vector2(-0.257616f, 0.07107194f), new Vector2(-0.2588793f, 0.1310923f), new Vector2(-0.365366f, 0.1317311f), new Vector2(-0.4010731f, 0.160581f), new Vector2(-0.4014733f, 0.0776173f), new Vector2(-0.4878945f, 0.07443692f), new Vector2(-0.4910138f, 0.04741968f), new Vector2(-0.6024219f, 0.04521445f), new Vector2(-0.6024304f, 0.07691587f), new Vector2(-0.9466741f, 0.07571431f), new Vector2(-0.9310019f, -0.1571429f), new Vector2(-0.7711788f, -0.1571429f), new Vector2(-0.6887068f, -0.04374382f), new Vector2(-0.6016457f, -0.03999628f), new Vector2(-0.5616433f, -0.06944597f), new Vector2(-0.5448118f, -0.04171886f), new Vector2(-0.4636742f, -0.04119172f), new Vector2(-0.4157909f, -0.0960395f), new Vector2(-0.3458858f, -0.09782534f), new Vector2(-0.3112604f, -0.04719943f), new Vector2(-0.2010713f, -0.04231461f), new Vector2(-0.2021174f, -0.01263767f), new Vector2(-0.003992662f, -0.01250332f), new Vector2(-0.00154132f, -0.03952057f), new Vector2(0.08335245f, -0.04267694f), new Vector2(0.08410719f, -0.01591523f), new Vector2(0.3705134f, -0.01787952f), new Vector2(0.3686069f, -0.04081866f), new Vector2(0.4879711f, -0.04124238f), new Vector2(0.4866846f, -0.01722633f), new Vector2(0.5110111f, -0.015777f), new Vector2(0.5134082f, 0.01340739f), new Vector2(0.9454017f, 0.0143973f), new Vector2(0.9428571f, 0.07386164f), };

                    //This creates a new GameObject to hold the looping texture of the revolver's cylinder.
                    GameObject Cylinder = new GameObject("Cylinder");
                    Cylinder.transform.SetParent(Instance.transform, false);
                    //This sets the position of the cylinder .
                    Cylinder.transform.localPosition = new Vector3(-0.028571f, 0.1f, 0);
                    //This sets the sprite of the cylinder to the looping texture.
                    Cylinder.AddComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/LMG/DP28/DP28_Cylinder.png");

                    //This sets up the revolver's cylinder looping texture.
                    CamsEasyMethods.SetUpGunLoopingTexture(Cylinder, ModAPI.LoadTexture("Guns/LMG/DP28/DP28_Cylinder.png"), ModAPI.LoadTexture("Guns/LMG/DP28/DP28_Mask.png"));


                    //this gets the LoopTextureHandler component from the cylinder.
                    var spinner = Instance.GetComponentInChildren<LoopTextureHandler>();

                    //This adds a burst of rotation to the cylinder.
                    void AddRotationBurst(float Amount)
                    {
                        spinner.AddRotationBurst(Amount);
                    }

                    //flips the cylinder upside down.
                    spinner.transform.localEulerAngles = new Vector3(0, 0, -90);
                    //This adds a listener to the OnFire event of the revolver and calls the AddRotationBurst function.
                    Instance.GetComponent<FirearmBehaviour>().OnFire.AddListener(() =>
                    {
                        AddRotationBurst(0.1f);
                    });

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.123f, 0.045f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.526f, 0, 0), new Vector3(0.08f, -0.021f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.17f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.95f, 0.043f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.4143f, -0.0284f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").gameObject.SetActive(false); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x54;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AK_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/PKM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/PKM_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/PKM_3.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/PKM_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/PKM_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/PKM_Suppressed_3.wav")
                    };
                }
            }
            );

            //RPD
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} RPD", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C2", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Rapida'  7.62x39mm Soviet  Skins: 0              \n\nThe RPD was a Soviet light machine gun that saw extensive use by the Viet Cong & People's Army of Vietnam during the vietnam war.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/LMG/RPD/RPD_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/LMG/RPD/RPD.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.964193f, 0.1820781f), new Vector2(0.9346299f, 0.2465239f), new Vector2(0.8793757f, 0.1613672f), new Vector2(0.578087f, 0.1583742f), new Vector2(0.5712283f, 0.1855827f), new Vector2(0.3973246f, 0.1826609f), new Vector2(0.4005373f, 0.1632216f), new Vector2(0.260024f, 0.1562919f), new Vector2(0.2274676f, 0.2151472f), new Vector2(0.2013751f, 0.2135796f), new Vector2(0.1981604f, 0.1876718f), new Vector2(0.05473832f, 0.1853551f), new Vector2(0.05767169f, 0.2152737f), new Vector2(0.02723247f, 0.2152741f), new Vector2(0.02837226f, 0.187684f), new Vector2(-0.03065261f, 0.1878965f), new Vector2(-0.02776545f, 0.215698f), new Vector2(-0.2013517f, 0.2114348f), new Vector2(-0.2030656f, 0.1896554f), new Vector2(-0.4530437f, 0.1891934f), new Vector2(-0.4716251f, 0.2142715f), new Vector2(-0.4845012f, 0.1870078f), new Vector2(-0.6086827f, 0.1010394f), new Vector2(-0.9699814f, 0.0992581f), new Vector2(-0.9714286f, -0.1001491f), new Vector2(-0.7719837f, -0.09712923f), new Vector2(-0.7700248f, -0.04821594f), new Vector2(-0.6810849f, 0.009816155f), new Vector2(-0.5762715f, 0.01575777f), new Vector2(-0.5645766f, 0.04147683f), new Vector2(-0.4842304f, 0.04032563f), new Vector2(-0.4837514f, -0.01456342f), new Vector2(-0.5455582f, -0.07513809f), new Vector2(-0.5132098f, -0.127689f), new Vector2(-0.4280596f, -0.1265879f), new Vector2(-0.4283533f, -0.04472763f), new Vector2(-0.3224441f, -0.04255398f), new Vector2(-0.2848658f, -0.004375897f), new Vector2(-0.283471f, 0.07160132f), new Vector2(-0.199451f, 0.07461187f), new Vector2(-0.198597f, 0.01402561f), new Vector2(-0.1426251f, 0.01327376f), new Vector2(-0.1451178f, -0.2414914f), new Vector2(-0.03049347f, -0.2410673f), new Vector2(-0.0295021f, 0.01296062f), new Vector2(-0.05766371f, 0.01289169f), new Vector2(-0.05671804f, 0.07171655f), new Vector2(0.02942488f, 0.07067426f), new Vector2(0.0292033f, 0.04263819f), new Vector2(0.05657094f, 0.04295824f), new Vector2(0.05717859f, 0.07181352f), new Vector2(0.1993044f, 0.07098256f), new Vector2(0.2006983f, 0.04265672f), new Vector2(0.227197f, 0.04481412f), new Vector2(0.2290353f, 0.07201114f), new Vector2(0.5672863f, 0.07245465f), new Vector2(0.5725528f, 0.09706496f), new Vector2(0.8521706f, 0.1007399f), new Vector2(0.8550746f, 0.07353171f), new Vector2(0.9162124f, 0.07376052f), new Vector2(0.9086343f, 0.1007457f), new Vector2(0.9714286f, 0.09920815f), };

                    //This creates a new GameObject to hold the looping texture of the revolver's cylinder.
                    GameObject Cylinder = new GameObject("Cylinder");
                    Cylinder.transform.SetParent(Instance.transform, false);
                    //This sets the position of the cylinder .
                    Cylinder.transform.localPosition = new Vector3(-0.0857f, 0.17f, 0);
                    //This sets the sprite of the cylinder to the looping texture.
                    Cylinder.AddComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/LMG/PKP/PKP_Belt.png");

                    //This sets up the revolver's cylinder looping texture.
                    CamsEasyMethods.SetUpGunLoopingTexture(Cylinder, ModAPI.LoadTexture("Guns/LMG/PKP/PKP_Belt.png"), ModAPI.LoadTexture("Guns/LMG/RPD/RPD_Mask.png"));

                    //this gets the LoopTextureHandler component from the cylinder.
                    var spinner = Instance.GetComponentInChildren<LoopTextureHandler>();

                    //This adds a burst of rotation to the cylinder.
                    void AddRotationBurst(float Amount)
                    {
                        spinner.AddRotationBurst(Amount);
                    }

                    //flips the cylinder upside down.
                    spinner.transform.localScale = new Vector3(1, -1, 1);
                    //This adds a listener to the OnFire event of the revolver and calls the AddRotationBurst function.
                    Instance.GetComponent<FirearmBehaviour>().OnFire.AddListener(() =>
                    {
                        AddRotationBurst(0.08f);
                    });

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.09f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.0851f, 0.1438f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.46f, -0.023f, 0), new Vector3(0.13f, 0.062f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.18f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.98f, 0.128f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.328f, 0.0572f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.3573f, 0.2f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x39;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/MG_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK47_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK47_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK47_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AK47_4.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AK47_Suppressed_4.wav")
                    };
                }
            }
            );

            //Bren
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} Bren", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C2", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Gimpy'  .303 British  Skins: 0                   \n\nThe Bren gun was a 1930's british made LMG and saw extensive use by commonwealth forces during World War 2, it was based on the ZGB 33.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/LMG/Bren/Bren_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/LMG/Bren/Bren.png");
                    
                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.3678066f, -0.009146407f), new Vector2(0.2652492f, 0.09535912f), new Vector2(0.1048432f, 0.125034f), new Vector2(0.1047377f, 0.07234504f), new Vector2(0.2615961f, 0.03619251f), new Vector2(0.3072747f, -0.01000921f), new Vector2(0.1752596f, -0.01334781f), new Vector2(0.0691487f, 0.03879373f), new Vector2(-0.01838841f, 0.03504845f), new Vector2(-0.01465103f, 0.1058324f), new Vector2(0.06824994f, 0.2044948f), new Vector2(-0.03068846f, 0.3117155f), new Vector2(-0.1302851f, 0.1686249f), new Vector2(-0.1583444f, 0.05777026f), new Vector2(-0.2044756f, 0.1054858f), new Vector2(-0.2451356f, 0.01223877f), new Vector2(-0.3309044f, 0.01944508f), new Vector2(-0.3781903f, 0.149687f), new Vector2(-0.3896741f, 0.02104777f), new Vector2(-0.4479378f, -0.003003389f), new Vector2(-0.6572754f, -0.01468172f), new Vector2(-0.7118939f, 0.02213492f), new Vector2(-0.7686086f, -0.003091197f), new Vector2(-0.891191f, -0.007852577f), new Vector2(-0.8941272f, -0.2412733f), new Vector2(-0.8228614f, -0.2378475f), new Vector2(-0.6171837f, -0.1321792f), new Vector2(-0.3848179f, -0.1348327f), new Vector2(-0.3502749f, -0.1678648f), new Vector2(-0.3796383f, -0.3f), new Vector2(-0.3014865f, -0.3f), new Vector2(-0.2642987f, -0.1847786f), new Vector2(-0.1852396f, -0.1836868f), new Vector2(-0.1493167f, -0.1304879f), new Vector2(0.4430968f, -0.132409f), new Vector2(0.4415392f, -0.104311f), new Vector2(0.5227843f, -0.1025785f), new Vector2(0.5267007f, -0.1293607f), new Vector2(0.5810507f, -0.12496f), new Vector2(0.6528601f, -0.07058106f), new Vector2(0.8981425f, -0.07077076f), new Vector2(0.8990713f, -0.009151865f), new Vector2(0.7917972f, -0.008148756f), new Vector2(0.7739124f, 0.01807332f), new Vector2(0.7424611f, -0.01249625f), };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.12f;
                    Instance.GetComponent<FirearmBehaviour>().casingDirection = new Vector2(0f, -0.45f);
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.069f, -0.112f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.31f, -0.2f, 0), new Vector3(0.19f, -0.12f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.17f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.91f, -0.043f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.371f, -0.1427f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").gameObject.SetActive(false); // Sets position of scope

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_30_Gov;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/MG_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/FAL_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/FAL_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/FAL_3.wav")
                    };
                }
            }
            );

            // Bar
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} M1918 BAR", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C2", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Gimpy'  .30-06 Springfield  Skins: 0             \n\nThe M1918 Browning Automatic Rifle (BAR) is a American made weapon that was often used to fill the role of a LMG in WW2 by the U.S.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/LMG/Bar/Bar_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/LMG/Bar/Bar.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.3703455f, 0.15482f), new Vector2(-0.3815647f, 0.1292949f), new Vector2(-0.7428572f, 0.130325f), new Vector2(-0.7428572f, -0.07221977f), new Vector2(-0.6645326f, -0.06842621f), new Vector2(-0.4502513f, 0.03769694f), new Vector2(-0.340265f, 0.03687839f), new Vector2(-0.3409524f, -0.003402695f), new Vector2(-0.3946329f, -0.1549622f), new Vector2(-0.3218912f, -0.1544896f), new Vector2(-0.2772802f, -0.04601503f), new Vector2(-0.16884f, -0.04843602f), new Vector2(-0.1710813f, -0.1527102f), new Vector2(-0.03547972f, -0.1213857f), new Vector2(-0.0303902f, 0.04302841f), new Vector2(0.5134771f, 0.04374513f), new Vector2(0.5140342f, 0.07233769f), new Vector2(0.7485949f, 0.07140639f), new Vector2(0.7498797f, 0.09316614f), new Vector2(0.5150911f, 0.09590665f), new Vector2(0.5124053f, 0.1277063f), new Vector2(0.4456263f, 0.1593777f), };
                    
                    // Sets bolt sprite
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/LMG/Bar/Bar_Bolt.png"), Position: new Vector2(-0.1143f, 0.07143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/LMG/Bar/Bar_BoltCover.png"), BoltCoverPosition: new Vector2(-0.2571f, 0.07143f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.1143f, 0.07143f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.4f, 0, 0), new Vector3(0.06f, 0, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.18f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.824f, 0.1f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1431f, -0.0142f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0572f, 0.128f, 0f); // Sets position of scope

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_30_Gov;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/MG_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/FAL_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/FAL_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/FAL_3.wav")
                    };
                }
            }
            );

            //PKM
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} PKM", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C2", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Pulemyot Kater'  7.62x54mmR  Skins: 0            \n\nThe PKM is widely regarded as one of the best general purpose machine guns due to it's ease of use, high ROF and heavy hitting round.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/LMG/PKM/PKM_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/LMG/PKM/PKM.png");
                    
                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.8255486f, 0.2172812f), new Vector2(0.7516576f, 0.1324838f), new Vector2(0.2216959f, 0.1302372f), new Vector2(0.1244746f, 0.2693855f), new Vector2(-0.04547802f, 0.2705154f), new Vector2(-0.04229227f, 0.2131926f), new Vector2(0.04293832f, 0.1843844f), new Vector2(-0.3233964f, 0.1824127f), new Vector2(-0.3295124f, 0.1580924f), new Vector2(-0.4061276f, 0.155104f), new Vector2(-0.4505932f, 0.09933669f), new Vector2(-0.5280207f, 0.1019899f), new Vector2(-0.5275719f, 0.1283418f), new Vector2(-0.8430151f, 0.1275868f), new Vector2(-0.8432519f, 0.156151f), new Vector2(-0.9583855f, 0.1561422f), new Vector2(-0.9532562f, 0.1008099f), new Vector2(-0.9265922f, 0.09857982f), new Vector2(-0.9270587f, -0.09648472f), new Vector2(-0.6465326f, -0.09700996f), new Vector2(-0.5549164f, 0.01247771f), new Vector2(-0.4052263f, 0.01358373f), new Vector2(-0.443854f, -0.133203f), new Vector2(-0.3699033f, -0.1570284f), new Vector2(-0.2968627f, -0.03954679f), new Vector2(-0.215506f, -0.07128695f), new Vector2(-0.1575309f, -0.04073787f), new Vector2(-0.1551756f, 0.01675356f), new Vector2(-0.09169063f, 0.01790345f), new Vector2(-0.09497204f, -0.2711936f), new Vector2(0.06516011f, -0.2710234f), new Vector2(0.07054265f, 0.01258994f), new Vector2(0.360707f, 0.01474632f), new Vector2(0.3615173f, 0.044177f), new Vector2(0.5575793f, 0.04132408f), new Vector2(0.5761749f, 0.01290436f), new Vector2(0.6206931f, 0.07042999f), new Vector2(0.9559466f, 0.07298227f), new Vector2(0.958319f, 0.1336274f), new Vector2(0.8479905f, 0.1348279f), };

                    //This creates a new GameObject to hold the looping texture of the revolver's cylinder.
                    GameObject Cylinder = new GameObject("Cylinder");
                    Cylinder.transform.SetParent(Instance.transform, false);
                    //This sets the position of the cylinder .
                    Cylinder.transform.localPosition = new Vector3(-0.014285f, 0.171f, 0);
                    //This sets the sprite of the cylinder to the looping texture.
                    Cylinder.AddComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/LMG/PKP/PKP_Belt.png");

                    //This sets up the revolver's cylinder looping texture.
                    CamsEasyMethods.SetUpGunLoopingTexture(Cylinder, ModAPI.LoadTexture("Guns/LMG/PKP/PKP_Belt.png"), ModAPI.LoadTexture("Guns/LMG/PKP/PKP_Mask.png"));

                    //this gets the LoopTextureHandler component from the cylinder.
                    var spinner = Instance.GetComponentInChildren<LoopTextureHandler>();

                    //This adds a burst of rotation to the cylinder.
                    void AddRotationBurst(float Amount)
                    {
                        spinner.AddRotationBurst(Amount);
                    }

                    //flips the cylinder upside down.
                    spinner.transform.localScale = new Vector3(1, -1, 1);
                    //This adds a listener to the OnFire event of the revolver and calls the AddRotationBurst function.
                    Instance.GetComponent<FirearmBehaviour>().OnFire.AddListener(() =>
                    {
                        AddRotationBurst(0.08f);
                    });
                    
                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.09f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.025f, 0.088f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.363f, -0.052f, 0), new Vector3(0.201f, 0.022f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.18f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.966f, 0.1f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.4571f, 0.0287f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.2f, 0.2f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x54;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/MG_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/PKM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/PKM_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/PKM_3.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/PKM_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/PKM_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/PKM_Suppressed_3.wav")
                    };
                }
            }
            );

            //M249
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} M249", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C2", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Minimi'  5.56×45mm NATO  Skins: 0                \n\nAn early American version of the M249 SAW, based on the French FN Minimi it first entered service in 1984 and is still in service today.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/LMG/M249/M249_Stock2_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/LMG/M249/M249_Stock2.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.8165935f, 0.03936439f), new Vector2(0.8134732f, 0.07495065f), new Vector2(0.6163099f, 0.07833539f), new Vector2(0.6052951f, 0.189989f), new Vector2(0.5859181f, 0.09999196f), new Vector2(0.2470497f, 0.1037607f), new Vector2(0.2420446f, 0.1822961f), new Vector2(0.06906515f, 0.2438163f), new Vector2(0.07057969f, 0.1855979f), new Vector2(0.1300516f, 0.1547413f), new Vector2(-0.2417805f, 0.1613387f), new Vector2(-0.2382319f, 0.1887772f), new Vector2(-0.2998474f, 0.1850177f), new Vector2(-0.3284354f, 0.157717f), new Vector2(-0.3264263f, 0.1049822f), new Vector2(-0.4949809f, 0.04526757f), new Vector2(-0.6351748f, 0.04389223f), new Vector2(-0.6722399f, 0.09694952f), new Vector2(-0.7814163f, 0.09697574f), new Vector2(-0.7828727f, -0.1257574f), new Vector2(-0.5899493f, -0.1254365f), new Vector2(-0.559562f, -0.04341527f), new Vector2(-0.2434154f, -0.04296087f), new Vector2(-0.3256527f, -0.1784217f), new Vector2(-0.227744f, -0.2144872f), new Vector2(-0.1481678f, -0.09578381f), new Vector2(-0.04250887f, -0.09602509f), new Vector2(-0.04170023f, -0.2733645f), new Vector2(0.1004085f, -0.2710714f), new Vector2(0.1008229f, -0.01489728f), new Vector2(0.1301645f, -0.06709458f), new Vector2(0.4708331f, -0.07058007f), new Vector2(0.5005242f, -0.01652003f), new Vector2(0.5869325f, -0.01669578f), new Vector2(0.6736805f, -0.01642608f), new Vector2(0.673199f, 0.03990238f), };

                    //This creates a new GameObject to hold the looping texture of the revolver's cylinder.
                    GameObject Cylinder = new GameObject("Cylinder");
                    Cylinder.transform.SetParent(Instance.transform, false);
                    //This sets the position of the cylinder 
                    Cylinder.transform.localPosition = new Vector3(0.043f, 0.1429f, 0);
                    //This sets the sprite of the cylinder to the looping texture.
                    Cylinder.AddComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/LMG/M249/M249_Belt.png");
                    //This sets up the revolver's cylinder looping texture.
                    CamsEasyMethods.SetUpGunLoopingTexture(Cylinder, ModAPI.LoadTexture("Guns/LMG/M249/M249_Belt.png"), ModAPI.LoadTexture("Guns/LMG/M249/M249_Mask.png"));
                    //this gets the LoopTextureHandler component from the cylinder.
                    var spinner = Instance.GetComponentInChildren<LoopTextureHandler>();
                    //This adds a burst of rotation to the cylinder.
                    void AddRotationBurst(float Amount)
                    {
                        spinner.AddRotationBurst(Amount);
                    }
                    //flips the cylinder upside down.
                    spinner.transform.localScale = new Vector3(1, -1, 1);
                    //This adds a listener to the OnFire event of the revolver and calls the AddRotationBurst function.
                    Instance.GetComponent<FirearmBehaviour>().OnFire.AddListener(() =>
                    {
                        AddRotationBurst(0.08f);
                    });

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.07f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.05f, 0.09f);
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.829f, 0.059f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.238f, -0.121f, 0), new Vector3(0.13f, -0.062f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.823f, 0.057f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.285f, -0.0855f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1428f, 0.143f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_556;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_4.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_5.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_6.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_4.wav")
                    };
                }
            }
            );

            //M249 Para Early
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} M249 Para Early", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C2", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Para-SAW'  5.56×45mm NATO  Skins: 0              \n\nThe M249 Para is a compact and much lighter variant of the original M249 SAW, it was designed for use with airborne troops.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/LMG/M249/M249_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/LMG/M249/M249.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.8165935f, 0.03936439f), new Vector2(0.8134732f, 0.07495065f), new Vector2(0.6479262f, 0.07675458f), new Vector2(0.6337498f, 0.1884082f), new Vector2(0.5859181f, 0.08102217f), new Vector2(0.1907013f, 0.07250336f), new Vector2(0.1834204f, 0.09978385f), new Vector2(0.2688816f, 0.1011993f), new Vector2(0.3003715f, 0.1305973f), new Vector2(0.2999069f, 0.2097587f), new Vector2(0.1798535f, 0.2716134f), new Vector2(0.1300432f, 0.2703286f), new Vector2(0.1262553f, 0.2174125f), new Vector2(0.2695686f, 0.1781953f), new Vector2(0.2547125f, 0.1276157f), new Vector2(0.1282593f, 0.1304335f), new Vector2(0.1300516f, 0.1547413f), new Vector2(-0.270944f, 0.1586875f), new Vector2(-0.2673953f, 0.1887772f), new Vector2(-0.3303364f, 0.1889945f), new Vector2(-0.3549476f, 0.157717f), new Vector2(-0.3569153f, 0.1010053f), new Vector2(-0.500452f, 0.1013446f), new Vector2(-0.5005093f, 0.0748748f), new Vector2(-0.7855095f, 0.07626113f), new Vector2(-0.7819245f, 0.1002376f), new Vector2(-0.8142857f, 0.1004676f), new Vector2(-0.8154665f, -0.06953472f), new Vector2(-0.7863795f, -0.06940685f), new Vector2(-0.7847915f, -0.04545169f), new Vector2(-0.3331161f, -0.04568824f), new Vector2(-0.2730304f, -0.06984548f), new Vector2(-0.3520828f, -0.2096573f), new Vector2(-0.2517714f, -0.2417182f), new Vector2(-0.1697924f, -0.1222139f), new Vector2(-0.1107102f, -0.1306347f), new Vector2(-0.08311184f, -0.09997161f), new Vector2(-0.07017463f, -0.2665307f), new Vector2(0.07307301f, -0.2653766f), new Vector2(0.0675208f, -0.02609143f), new Vector2(0.1506933f, -0.1029715f), new Vector2(0.1556871f, -0.07580868f), new Vector2(0.4978414f, -0.07458043f), new Vector2(0.5f, -0.09896934f), new Vector2(0.5490209f, -0.1043385f), new Vector2(0.5869325f, -0.01669578f), new Vector2(0.7013195f, -0.01454161f), new Vector2(0.7046068f, 0.03676159f), };

                    //This creates a new GameObject to hold the looping texture of the revolver's cylinder.
                    GameObject Cylinder = new GameObject("Cylinder");
                    Cylinder.transform.SetParent(Instance.transform, false);
                    //This sets the position of the cylinder .
                    Cylinder.transform.localPosition = new Vector3(0.0143f, 0.1429f, 0);
                    //This sets the sprite of the cylinder to the looping texture.
                    Cylinder.AddComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/LMG/M249/M249_Belt.png");
                    //This sets up the revolver's cylinder looping texture.
                    CamsEasyMethods.SetUpGunLoopingTexture(Cylinder, ModAPI.LoadTexture("Guns/LMG/M249/M249_Belt.png"), ModAPI.LoadTexture("Guns/LMG/M249/M249_Mask.png"));
                    //this gets the LoopTextureHandler component from the cylinder.
                    var spinner = Instance.GetComponentInChildren<LoopTextureHandler>();
                    //This adds a burst of rotation to the cylinder.
                    void AddRotationBurst(float Amount)
                    {
                        spinner.AddRotationBurst(Amount);
                    }
                    //flips the cylinder upside down.
                    spinner.transform.localScale = new Vector3(1, -1, 1);
                    //This adds a listener to the OnFire event of the revolver and calls the AddRotationBurst function.
                    Instance.GetComponent<FirearmBehaviour>().OnFire.AddListener(() =>
                    {
                        AddRotationBurst(0.08f);
                    });

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.07f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.0103f, 0.0845f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.238f, -0.121f, 0), new Vector3(0.13f, -0.062f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.823f, 0.057f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.285f, -0.0855f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.171f, 0.143f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_556;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_4.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_5.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_6.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_4.wav")
                    };

                }
            }
            );

            //M249 Para
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} M249 Para", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C2", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Para-SAW'  5.56×45mm NATO  Skins: 0              \n\nThe M249 Para is a compact and much lighter variant of the original M249 SAW, it was designed for use with airborne troops.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/LMG/M249/M249_Stock1_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/LMG/M249/M249_Stock1.png");

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.8165935f, 0.03936439f), new Vector2(0.8134732f, 0.07495065f), new Vector2(0.6479262f, 0.07675458f), new Vector2(0.6337498f, 0.1884082f), new Vector2(0.5859181f, 0.08102217f), new Vector2(0.1907013f, 0.07250336f), new Vector2(0.1834204f, 0.09978385f), new Vector2(0.2688816f, 0.1011993f), new Vector2(0.3003715f, 0.1305973f), new Vector2(0.2999069f, 0.2097587f), new Vector2(0.1798535f, 0.2716134f), new Vector2(0.1300432f, 0.2703286f), new Vector2(0.1262553f, 0.2174125f), new Vector2(0.2695686f, 0.1781953f), new Vector2(0.2547125f, 0.1276157f), new Vector2(0.1282593f, 0.1304335f), new Vector2(0.1300516f, 0.1547413f), new Vector2(-0.270944f, 0.1586875f), new Vector2(-0.2673953f, 0.1887772f), new Vector2(-0.3303364f, 0.1889945f), new Vector2(-0.3549476f, 0.157717f), new Vector2(-0.3569153f, 0.1010053f), new Vector2(-0.3891373f, 0.07041992f), new Vector2(-0.6108462f, 0.0677985f), new Vector2(-0.6105421f, -0.1259632f), new Vector2(-0.5443311f, -0.1243504f), new Vector2(-0.4031568f, -0.02169232f), new Vector2(-0.3331161f, -0.04568824f), new Vector2(-0.2730304f, -0.06984548f), new Vector2(-0.3520828f, -0.2096573f), new Vector2(-0.2517714f, -0.2417182f), new Vector2(-0.1697924f, -0.1222139f), new Vector2(-0.1107102f, -0.1306347f), new Vector2(-0.08311184f, -0.09997161f), new Vector2(-0.07017463f, -0.2665307f), new Vector2(0.07307301f, -0.2653766f), new Vector2(0.0675208f, -0.02609143f), new Vector2(0.1506933f, -0.1029715f), new Vector2(0.1556871f, -0.07580868f), new Vector2(0.4978414f, -0.07458043f), new Vector2(0.5f, -0.09896934f), new Vector2(0.5490209f, -0.1043385f), new Vector2(0.5869325f, -0.01669578f), new Vector2(0.7013195f, -0.01454161f), new Vector2(0.7046068f, 0.03676159f), };

                    //This creates a new GameObject to hold the looping texture of the revolver's cylinder.
                    GameObject Cylinder = new GameObject("Cylinder");
                    Cylinder.transform.SetParent(Instance.transform, false);
                    //This sets the position of the cylinder .
                    Cylinder.transform.localPosition = new Vector3(0.0143f, 0.1429f, 0);
                    //This sets the sprite of the cylinder to the looping texture.
                    Cylinder.AddComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/LMG/M249/M249_Belt.png");
                    //This sets up the revolver's cylinder looping texture.
                    CamsEasyMethods.SetUpGunLoopingTexture(Cylinder, ModAPI.LoadTexture("Guns/LMG/M249/M249_Belt.png"), ModAPI.LoadTexture("Guns/LMG/M249/M249_Mask.png"));
                    //this gets the LoopTextureHandler component from the cylinder.
                    var spinner = Instance.GetComponentInChildren<LoopTextureHandler>();
                    //This adds a burst of rotation to the cylinder.
                    void AddRotationBurst(float Amount)
                    {
                        spinner.AddRotationBurst(Amount);
                    }
                    //flips the cylinder upside down.
                    spinner.transform.localScale = new Vector3(1, -1, 1);
                    //This adds a listener to the OnFire event of the revolver and calls the AddRotationBurst function.
                    Instance.GetComponent<FirearmBehaviour>().OnFire.AddListener(() =>
                    {
                        AddRotationBurst(0.08f);
                    });

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.07f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.0103f, 0.0845f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.238f, -0.121f, 0), new Vector3(0.13f, -0.062f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.823f, 0.057f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.285f, -0.0855f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.171f, 0.143f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_556;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_4.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_5.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M4_6.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_3.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M4_Suppressed_4.wav")
                    };

                }
            }
            );

            //M60 Box
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} M60 Box", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C2", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'The Pig'  7.62x51mm NATO  Skins: 0               \n\nThe M60 is a late 1950's era American general purpose machine gun, it was used extensively by U.S troops in the Vietnam war.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/LMG/M60/M60_Box_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/LMG/M60/M60_Box.png");

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.8081809f, 0.1138807f), new Vector2(0.009524301f, 0.112325f), new Vector2(0.01171574f, 0.1422853f), new Vector2(-0.1588827f, 0.1434214f), new Vector2(-0.1703286f, 0.2252372f), new Vector2(-0.2009895f, 0.1415719f), new Vector2(-0.2083647f, 0.1771612f), new Vector2(-0.4867993f, 0.1706527f), new Vector2(-0.5643706f, 0.117134f), new Vector2(-0.8716425f, 0.1157579f), new Vector2(-0.8780238f, 0.1481367f), new Vector2(-1.009258f, 0.1531588f), new Vector2(-0.9841207f, -0.1481313f), new Vector2(-0.8789019f, -0.1523326f), new Vector2(-0.7882909f, -0.02980016f), new Vector2(-0.5327526f, -0.04082778f), new Vector2(-0.470522f, -0.07059425f), new Vector2(-0.5233056f, -0.196936f), new Vector2(-0.4428211f, -0.226828f), new Vector2(-0.3875522f, -0.1738494f), new Vector2(-0.3875278f, -0.2265145f), new Vector2(-0.2122264f, -0.2259392f), new Vector2(-0.2127487f, -0.05318935f), new Vector2(0.7310162f, -0.02425282f), new Vector2(0.7290641f, 0.0328373f), new Vector2(0.6730798f, 0.03586213f), new Vector2(0.6732247f, 0.06060871f), new Vector2(0.8167834f, 0.06530048f), new Vector2(0.813094f, 0.02852853f), new Vector2(0.8993883f, 0.0307093f), new Vector2(0.9025337f, 0.05970215f), new Vector2(1.012465f, 0.05702277f), new Vector2(1.016841f, 0.1153292f), new Vector2(0.8959107f, 0.1149728f), new Vector2(0.8879391f, 0.235856f), };

                    //This creates a new GameObject to hold the looping texture of the revolver's cylinder.
                    GameObject Cylinder = new GameObject("Cylinder");
                    Cylinder.transform.SetParent(Instance.transform, false);
                    //This sets the position of the cylinder .
                    Cylinder.transform.localPosition = new Vector3(-0.3f, -0.04287f, 0);
                    //This sets the sprite of the cylinder to the looping texture.
                    Cylinder.AddComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/LMG/M249/M249_Belt.png");

                    //This sets up the revolver's cylinder looping texture.
                    CamsEasyMethods.SetUpGunLoopingTexture(Cylinder, ModAPI.LoadTexture("Guns/LMG/M249/M249_Belt.png"), ModAPI.LoadTexture("Guns/LMG/M60/M60_Mask.png"));

                    //this gets the LoopTextureHandler component from the cylinder.
                    var spinner = Instance.GetComponentInChildren<LoopTextureHandler>();

                    //This adds a burst of rotation to the cylinder.
                    void AddRotationBurst(float Amount)
                    {
                        spinner.AddRotationBurst(Amount);
                    }

                    //flips the cylinder upside down.
                    spinner.transform.localScale = new Vector3(1, -1, 1);
                    //This adds a listener to the OnFire event of the revolver and calls the AddRotationBurst function.
                    Instance.GetComponent<FirearmBehaviour>().OnFire.AddListener(() =>
                    {
                        AddRotationBurst(0.08f);
                    });

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.093f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.3f, 0.129f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.42f, -0.09f, 0), new Vector3(-0.02f, -0.064f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.2f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(1.021f, 0.087f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.4285f, -0.043f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").gameObject.SetActive(false); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x51;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AK_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M60_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M60_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M60_3.wav")

                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M60_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M60_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M60_Suppressed_3.wav")
                    };

                }
            }
            );

            //M60
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Light Machine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} M60", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C2", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'The Pig'  7.62x51mm NATO  Skins: 0               \n\nThe M60 is a late 1950's era American general purpose machine gun, it was used extensively by U.S troops in the Vietnam war.",//new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/LMG/M60/M60_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/LMG/M60/M60.png");

                    Instance.GetComponent<VertexColourBasedOnTemperatureBehaviour>().enabled = false;

                    // Removes box colliders
                    foreach (BoxCollider2D collider in Instance.GetComponents<BoxCollider2D>())
                    {
                        Instance.GetComponent<BoxCollider2D>().enabled = false;
                    };

                    Instance.GetComponentInChildren<LineRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/LMG/MG42/MG42_Belt.png");
                    Instance.GetComponentInChildren<LineRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;

                    // Belt Width
                    Instance.GetComponentInChildren<LineRenderer>().widthMultiplier = 0.8f;
                    // Belt Position
                    Instance.transform.GetChild(0).localPosition = new Vector3(-0.3f, 0.129f, 0);

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.8081809f, 0.1138807f), new Vector2(0.009524301f, 0.112325f), new Vector2(0.01171574f, 0.1422853f), new Vector2(-0.1588827f, 0.1434214f), new Vector2(-0.1703286f, 0.2252372f), new Vector2(-0.2009895f, 0.1415719f), new Vector2(-0.2083647f, 0.1771612f), new Vector2(-0.4867993f, 0.1706527f), new Vector2(-0.5643706f, 0.117134f), new Vector2(-0.8716425f, 0.1157579f), new Vector2(-0.8780238f, 0.1481367f), new Vector2(-1.009258f, 0.1531588f), new Vector2(-0.9841207f, -0.1481313f), new Vector2(-0.8789019f, -0.1523326f), new Vector2(-0.7882909f, -0.02980016f), new Vector2(-0.5327526f, -0.04082778f), new Vector2(-0.470522f, -0.07059425f), new Vector2(-0.5233056f, -0.196936f), new Vector2(-0.4428211f, -0.226828f), new Vector2(-0.3798609f, -0.1405207f), new Vector2(-0.2798505f, -0.1290922f), new Vector2(-0.2537687f, -0.05062558f), new Vector2(0.7310162f, -0.02425282f), new Vector2(0.7290641f, 0.0328373f), new Vector2(0.6730798f, 0.03586213f), new Vector2(0.6732247f, 0.06060871f), new Vector2(0.8167834f, 0.06530048f), new Vector2(0.813094f, 0.02852853f), new Vector2(0.8993883f, 0.0307093f), new Vector2(0.9025337f, 0.05970215f), new Vector2(1.012465f, 0.05702277f), new Vector2(1.016841f, 0.1153292f), new Vector2(0.8959107f, 0.1149728f), new Vector2(0.8879391f, 0.235856f), };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.093f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.3f, 0.129f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.42f, -0.09f, 0), new Vector3(-0.02f, -0.064f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.2f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(1.021f, 0.087f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.4285f, -0.043f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").gameObject.SetActive(false); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x51;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AK_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/M60_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M60_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/M60_3.wav")

                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;
                    Instance.transform.Find("BarrelAttachment").transform.localScale = new Vector3(0.9f, 0.9f, 0.9f);
                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/M60_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M60_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/M60_Suppressed_3.wav")
                    };
                }
            }
            );

            //MG42
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Light Machine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} MG42", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C2", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Buzzsaw'  7.92x57mm Mauser  Skins: 1    \n\nThe MG42, or Maschinengewehr 42, was a German machine gun that terrorized Allied troops during World War II with a insane RPM of 1600.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/LMG/MG42/MG42_TN.png"), //new item thumbnail (relative path)
                
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/LMG/MG42/MG42.png"),
                        ModAPI.LoadSprite("Guns/LMG/MG42/MG42_Black.png")
                    };
                    //Set to zero so it always starts normal
                    
                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/LMG/MG42/MG42.png");


                    Instance.GetComponent<VertexColourBasedOnTemperatureBehaviour>().enabled = false;

                    // Removes box colliders
                    foreach (BoxCollider2D collider in Instance.GetComponents<BoxCollider2D>())
                    {
                        Instance.GetComponent<BoxCollider2D>().enabled = false;
                    };


                    Instance.GetComponentInChildren<LineRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/LMG/MG42/MG42_Belt.png");
                    Instance.GetComponentInChildren<LineRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;

                    // Belt Width
                    Instance.GetComponentInChildren<LineRenderer>().widthMultiplier = 0.8f;
                    // Belt Position
                    Instance.transform.GetChild(0).localPosition = new Vector3(-0.17f, 0.1f, 0);


                    // Adjust colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.954619f, 0.08492249f), new Vector2(0.9551594f, 0.117121f), new Vector2(0.7899685f, 0.1399649f), new Vector2(0.7646698f, 0.2017477f), new Vector2(0.7620754f, 0.1135235f), new Vector2(0.2204677f, 0.1162152f), new Vector2(0.04243881f, 0.1943716f), new Vector2(0.04243073f, 0.1092285f), new Vector2(-0.003514707f, 0.1083359f), new Vector2(-0.04779419f, 0.162571f), new Vector2(-0.3685099f, 0.1668441f), new Vector2(-0.5374368f, 0.1173864f), new Vector2(-0.7926093f, 0.1271243f), new Vector2(-1.040748f, 0.1704679f), new Vector2(-1.004887f, -0.09030949f), new Vector2(-0.8517732f, -0.05207871f), new Vector2(-0.8275313f, -0.0036227f), new Vector2(-0.5657731f, -0.006738856f), new Vector2(-0.4700571f, -0.03335479f), new Vector2(-0.4953703f, -0.2f), new Vector2(-0.4239119f, -0.2f), new Vector2(-0.3796786f, -0.09217416f), new Vector2(-0.2693711f, -0.1085121f), new Vector2(-0.2287601f, 0.0047158f), new Vector2(0.958721f, 0.003213093f), new Vector2(0.9608082f, 0.03027691f), new Vector2(1.042857f, 0.0263291f), new Vector2(1.048086f, 0.08515631f), };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.05f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.17f, 0.1f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.423f, -0.073f, 0), new Vector3(0.032f, -0.013f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.18f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(1.05f, 0.057f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.6575f, -0.0142f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").gameObject.SetActive(false); // Sets position of scope

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_30_Gov;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AK_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);
                    Instance.transform.Find("BarrelAttachment").transform.localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/MG42_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/MG42_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/MG42_3.wav")

                    };

                }
            }
            );

            //MG42 Drum
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Light Machine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} MG42 Drum", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C2", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Buzzsaw'  7.92x57mm Mauser  Skins: 1    \n\nThe MG42, or Maschinengewehr 42, was a German machine gun that terrorized Allied troops during World War II with a insane RPM of 1600.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/LMG/MG42/MG42_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/LMG/MG42/MG42_Drum.png"),
                        ModAPI.LoadSprite("Guns/LMG/MG42/MG42_Drum_Black.png")
                    };
                    //Set to zero so it always starts normal
                    
                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/LMG/MG42/MG42_Drum.png");

                    Instance.GetComponent<VertexColourBasedOnTemperatureBehaviour>().enabled = false;

                    // Removes box colliders
                    foreach (BoxCollider2D collider in Instance.GetComponents<BoxCollider2D>())
                    {
                        Instance.GetComponent<BoxCollider2D>().enabled = false;
                    };

                    // Remove Belt
                    Instance.transform.GetChild(0).gameObject.SetActive(false);

                    // Adjust colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.954619f, 0.08492249f), new Vector2(0.9551594f, 0.117121f), new Vector2(0.7899685f, 0.1399649f), new Vector2(0.7646698f, 0.2017477f), new Vector2(0.7620754f, 0.1135235f), new Vector2(0.2204677f, 0.1162152f), new Vector2(0.04243881f, 0.1943716f), new Vector2(0.04243073f, 0.1092285f), new Vector2(-0.003514707f, 0.1083359f), new Vector2(-0.04779419f, 0.162571f), new Vector2(-0.3685099f, 0.1668441f), new Vector2(-0.5374368f, 0.1173864f), new Vector2(-0.7926093f, 0.1271243f), new Vector2(-1.040748f, 0.1704679f), new Vector2(-1.004887f, -0.09030949f), new Vector2(-0.8517732f, -0.05207871f), new Vector2(-0.8275313f, -0.0036227f), new Vector2(-0.5657731f, -0.006738856f), new Vector2(-0.4700571f, -0.03335479f), new Vector2(-0.4953703f, -0.2f), new Vector2(-0.4239119f, -0.2f), new Vector2(-0.3796786f, -0.09217416f), new Vector2(-0.2693711f, -0.1085121f), new Vector2(-0.2287601f, 0.0047158f), new Vector2(0.958721f, 0.003213093f), new Vector2(0.9608082f, 0.03027691f), new Vector2(1.042857f, 0.0263291f), new Vector2(1.048086f, 0.08515631f), };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.05f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.17f, 0.1f);
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(1.064f, 0.054f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.423f, -0.073f, 0), new Vector3(0.032f, -0.013f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.18f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(1.05f, 0.057f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.6575f, -0.0142f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").gameObject.SetActive(false); // Sets position of scope

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_30_Gov;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AK_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);
                    Instance.transform.Find("BarrelAttachment").transform.localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/MG42_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/MG42_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/MG42_3.wav")

                    };
                }
            }
            );

            //XM250
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} SIG XM250", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "C2", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'M250'  7.92x57mm Mauser  Skins: 0    \n\nThe Sig XM250 is part of the same NGSW winning contract as the XM7, but instead of replacing the M4 is intended to replace the M249 as a LMG.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/LMG/XM250/XM250_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/LMG/XM250/XM250.png");
                    
                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.4141788f, 0.1963841f), new Vector2(-0.4150288f, 0.1745378f), new Vector2(-0.7857143f, 0.1668791f), new Vector2(-0.7857143f, -0.058773f), new Vector2(-0.7014277f, -0.05881091f), new Vector2(-0.5549756f, 0.04761743f), new Vector2(-0.5543609f, 0.08134481f), new Vector2(-0.471274f, 0.0833037f), new Vector2(-0.4705523f, 0.03110763f), new Vector2(-0.4144497f, -0.003379598f), new Vector2(-0.4464347f, -0.1682073f), new Vector2(-0.3598506f, -0.1636849f), new Vector2(-0.3273261f, -0.05804142f), new Vector2(-0.2738276f, -0.05742155f), new Vector2(-0.2066049f, 0.02540373f), new Vector2(-0.06841402f, 0.0259803f), new Vector2(-0.09982791f, -0.005132476f), new Vector2(-0.095986f, -0.198897f), new Vector2(-0.06464158f, -0.2285714f), new Vector2(0.06700207f, -0.226981f), new Vector2(0.06950024f, -0.003255308f), new Vector2(0.03980853f, 0.02895019f), new Vector2(0.4679139f, 0.02734906f), new Vector2(0.4667113f, 0.05559402f), new Vector2(0.6698651f, 0.05862014f), new Vector2(0.6759377f, 0.09055513f), new Vector2(0.6449376f, 0.09073837f), new Vector2(0.6442348f, 0.1129892f), new Vector2(0.7897976f, 0.1167407f), new Vector2(0.7878395f, 0.1427209f), new Vector2(0.4662586f, 0.137102f), new Vector2(0.4078172f, 0.2004329f), };

                    //This creates a new GameObject to hold the looping texture of the revolver's cylinder.
                    GameObject Cylinder = new GameObject("Cylinder");
                    Cylinder.transform.SetParent(Instance.transform, false);
                    //This sets the position of the cylinder .
                    Cylinder.transform.localPosition = new Vector3(-0.0143f, -0.0143f, 0);
                    //This sets the sprite of the cylinder to the looping texture.
                    Cylinder.AddComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/LMG/PKP/PKP_Belt.png");

                    //This sets up the revolver's cylinder looping texture.
                    CamsEasyMethods.SetUpGunLoopingTexture(Cylinder, ModAPI.LoadTexture("Guns/LMG/PKP/PKP_Belt.png"), ModAPI.LoadTexture("Guns/LMG/XM250/XM250_Mask.png"));

                    //this gets the LoopTextureHandler component from the cylinder.
                    var spinner = Instance.GetComponentInChildren<LoopTextureHandler>();

                    //This adds a burst of rotation to the cylinder.
                    void AddRotationBurst(float Amount)
                    {
                        spinner.AddRotationBurst(Amount);
                    }

                    //flips the cylinder upside down.
                    spinner.transform.localScale = new Vector3(1, -1, 1);
                    //This adds a listener to the OnFire event of the revolver and calls the AddRotationBurst function.
                    Instance.GetComponent<FirearmBehaviour>().OnFire.AddListener(() =>
                    {
                        AddRotationBurst(0.08f);
                    });

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.076f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.028f, 0.13f);
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.8f, 0.13f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.37f, -0.04f, 0), new Vector3(0.161f, 0.013f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.19f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.794f, 0.1288f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.257f, 0.0143f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.2285f, 0.214f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_68;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_3.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/RFB_4.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/RM277_Suppressed_3.wav")
                    };
                }
            }
            );

            #endregion

            // Marksman / Snipers
            #region Marksman

            // AWM
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Sniper Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} L96A1 AWM", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'AWM'  .338 Lapua Magnum  Skins: 1                \n\nThe L96A1 AWM is a British Sniper Rifle originally developed by 3 guys in a shed before formally becoming Accuracy International.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Marksman/AWM/AWM_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Marksman/AWM/AWM.png"),
                        ModAPI.LoadSprite("Guns/Marksman/AWM/AWM_Tan.png")
                    };
                    //Set to zero so it always starts normal
                    
                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Marksman/AWM/AWM.png");
                    
                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.9285715f, 0.1165254f), new Vector2(-0.9309652f, -0.1189193f), new Vector2(-0.6484981f, -0.08301236f), new Vector2(-0.489098f, -0.1476447f), new Vector2(-0.4466656f, -0.08573408f), new Vector2(-0.1511258f, -0.08269911f), new Vector2(-0.1530166f, 0.0009573884f), new Vector2(0.2967977f, 0.007718731f), new Vector2(0.2969553f, 0.07878553f), new Vector2(0.9309653f, 0.08602243f), new Vector2(0.9333591f, 0.121313f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Marksman/AWM/AWM_Bolt.png"), Position: new Vector2(-0.3f, 0.0857f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.1f, BoltCover: ModAPI.LoadSprite("Guns/Marksman/AWM/AWM_BoltCover.png"), BoltCoverPosition: new Vector2(-0.3428f, 0.1f));

                    //creates a new attachment point for the scope
                    GameObject NewScopeAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewScopeAttachmentPoint.transform.parent = Instance.transform;
                    //sets the position of the new attachment point
                    NewScopeAttachmentPoint.transform.localPosition = new Vector3(-0.192f, 0.165f);
                    NewScopeAttachmentPoint.transform.localEulerAngles = Vector3.zero;
                    NewScopeAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Scope;
                    NewScopeAttachmentPoint.name = ("ScopeAttachment");

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.265f, 0.0428f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.46f, -0.04f, 0), new Vector3(0, -0.03f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.17f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.937f, 0.1f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1144f, -0.0143f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.228f, 0.1564f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.25f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_338;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_3.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_3.wav")
                    };

                    //creates a new scope and attaches it to the new attachment point (ඞMAKE SURE NAME IS RIGHT!!!ඞ)
                    GameObject scope = GameObject.Instantiate(ModAPI.FindSpawnable($"{Mod.ModTag} Zeiss 3-12x Attachment").Prefab);
                    CatalogBehaviour.PerformMod(ModAPI.FindSpawnable($"{Mod.ModTag} Zeiss 3-12x Attachment"), scope);
                    scope.transform.position = NewScopeAttachmentPoint.transform.position;
                }
            }
            );

            // AX308
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Sniper Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} AX308", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'AX'  7.62×51mm NATO  Skins: 1                    \n\nThe AX308 Is a variant of the AWM chambered in .308 instead of .338, it also comes with a more modular M-Lok Handguard.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Marksman/AX308/AX308_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Marksman/AX308/AX308.png"),
                        ModAPI.LoadSprite("Guns/Marksman/AX308/AX308_Tan.png")
                    };
                    //Set to zero so it always starts normal
                    
                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Marksman/AX308/AX308.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.8210692f, 0.1571429f), new Vector2(0.8151785f, 0.1259763f), new Vector2(0.519796f, 0.1253314f), new Vector2(0.5104396f, 0.1571429f), new Vector2(-0.2855942f, 0.1571429f), new Vector2(-0.3162646f, 0.07923861f), new Vector2(-0.5925314f, 0.07084762f), new Vector2(-0.6270956f, 0.1231133f), new Vector2(-0.7990447f, 0.1322798f), new Vector2(-0.8064039f, 0.07392311f), new Vector2(-0.9661737f, 0.10053f), new Vector2(-0.9647984f, -0.1289647f), new Vector2(-0.7737293f, -0.1252513f), new Vector2(-0.7321241f, -0.01306721f), new Vector2(-0.4548321f, -0.001160586f), new Vector2(-0.4925827f, -0.1388971f), new Vector2(-0.4298336f, -0.1502048f), new Vector2(-0.3902235f, -0.07367687f), new Vector2(-0.3112835f, -0.07306906f), new Vector2(-0.2814501f, -0.01641928f), new Vector2(-0.2019498f, -0.01856377f), new Vector2(-0.1957643f, -0.07075755f), new Vector2(-0.05097434f, -0.07106478f), new Vector2(-0.02800109f, 0.008555785f), new Vector2(0.1134266f, 0.01594774f), new Vector2(0.1498861f, 0.06770886f), new Vector2(0.5217863f, 0.07041065f), new Vector2(0.5217003f, 0.09534819f), new Vector2(0.7924184f, 0.09661993f), new Vector2(0.7986507f, 0.07242203f), new Vector2(0.9695573f, 0.07366364f), new Vector2(0.9714286f, 0.1571429f), };
                    
                    // Sets up bolt sprite
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Marksman/AX308/AX308_Bolt.png"), Position: new Vector2(-0.1714f, 0.08571f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.1f, BoltCover: ModAPI.LoadSprite("Guns/Marksman/AX308/AX308_BoltCover.png"), BoltCoverPosition: new Vector2(-0.2285f, 0.1143f));

                    //creates a new attachment point for the scope
                    GameObject NewScopeAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewScopeAttachmentPoint.transform.parent = Instance.transform;
                    //sets the position of the new attachment point
                    NewScopeAttachmentPoint.transform.localPosition = new Vector3(-0.192f, 0.165f);
                    NewScopeAttachmentPoint.transform.localEulerAngles = Vector3.zero;
                    NewScopeAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Scope;
                    NewScopeAttachmentPoint.name = ("ScopeAttachment");

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.1286f, 0.08573f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.43f, -0.05f, 0), new Vector3(0.1f, 0, 0) };
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.46f, -0.04f, 0), new Vector3(0, -0.03f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.17f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.9777f, 0.1146f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.3286f, 0.0287f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1289f, 0.1714f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.25f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x51;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_3.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_3.wav")
                    };

                    //creates a new scope and attaches it to the new attachment point (ඞMAKE SURE NAME IS RIGHT!!!ඞ)
                    GameObject scope = GameObject.Instantiate(ModAPI.FindSpawnable($"{Mod.ModTag} Zeiss 3-12x Attachment").Prefab);
                    CatalogBehaviour.PerformMod(ModAPI.FindSpawnable($"{Mod.ModTag} Zeiss 3-12x Attachment"), scope);
                    scope.transform.position = NewScopeAttachmentPoint.transform.position;
                }
            }
            );

            // M82
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Sniper Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} Barrett M82A1", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'SASR'  .50 BMG  Skins: 0                         \n\nThe Barrett M82A1 .50 Cal is a U.S made semi-auto anti material rifle, it's an accurate and devastating weapon chambered in .50 BMG.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Marksman/M82/M82_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Marksman/M82/M82.png");

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.2190956f, 0.03101753f), new Vector2(0.3708013f, 0.03064075f), new Vector2(0.3733394f, 0.05799555f), new Vector2(0.9660487f, 0.0582743f), new Vector2(0.9647589f, 0.02799271f), new Vector2(1.112358f, 0.02733467f), new Vector2(1.114286f, 0.1502228f), new Vector2(0.9684966f, 0.1451982f), new Vector2(0.9686447f, 0.1202195f), new Vector2(0.3746076f, 0.1222777f), new Vector2(0.3733248f, 0.1509006f), new Vector2(-1.118141f, 0.1444394f), new Vector2(-1.111853f, -0.08202742f), new Vector2(-0.8611806f, -0.07825328f), new Vector2(-0.81569f, 0.05160534f), new Vector2(-0.637827f, 0.04511604f), new Vector2(-0.682291f, -0.1714286f), new Vector2(-0.6063516f, -0.1714286f), new Vector2(-0.5564844f, -0.05722941f), new Vector2(-0.4582426f, -0.05504732f), new Vector2(-0.4610306f, -0.1729986f), new Vector2(-0.2599504f, -0.1684679f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Marksman/M82/M82_Bolt.png"), Position: new Vector2(-0.4286f, 0.0857f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.14f, BoltCover: ModAPI.LoadSprite("Guns/Marksman/M82/M82_BoltCover.png"), BoltCoverPosition: new Vector2(-0.6428f, 0.0857f));
                    
                    //creates a new attachment point for the scope
                    GameObject NewScopeAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewScopeAttachmentPoint.transform.parent = Instance.transform;
                    //sets the position of the new attachment point
                    NewScopeAttachmentPoint.transform.localPosition = new Vector3(-0.192f, 0.165f);
                    NewScopeAttachmentPoint.transform.localEulerAngles = Vector3.zero;
                    NewScopeAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Scope;
                    NewScopeAttachmentPoint.name = ("ScopeAttachment");

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.4286f, 0.0857f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.60f, -0.076f, 0), new Vector3(0.036f, 0.036f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.24f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.9777f, 0.1146f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1f, 0.01422f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.4142f, 0.1573f, 0f); // Sets position of scope
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.2f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_50BMG;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/MG_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    //creates a new scope and attaches it to the new attachment point (ඞMAKE SURE NAME IS RIGHT!!!ඞ)
                    GameObject scope = GameObject.Instantiate(ModAPI.FindSpawnable($"{Mod.ModTag} Leupold 5-25x Attachment").Prefab);
                    CatalogBehaviour.PerformMod(ModAPI.FindSpawnable($"{Mod.ModTag} Leupold 5-25x Attachment"), scope);
                    scope.transform.position = NewScopeAttachmentPoint.transform.position;
                }
            }
            );

            // M24
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Sniper Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} M24", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'SWS'  7.62×51mm NATO  Skins: 0                   \n\nThe M24 Sniper Weapon System is the United States military version of the Remington 700, it's a simple but effective design.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Marksman/M24/M24_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Marksman/M24/M24.png");

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.3605335f, 0.1229362f), new Vector2(-0.4609103f, 0.05135759f), new Vector2(-0.5527009f, 0.04380411f), new Vector2(-0.5681624f, 0.07936554f), new Vector2(-0.9685933f, 0.06837527f), new Vector2(-0.9707929f, -0.135099f), new Vector2(-0.7509681f, -0.1288268f), new Vector2(-0.5998274f, -0.08312573f), new Vector2(-0.5242275f, -0.1020368f), new Vector2(-0.4255854f, -0.04549655f), new Vector2(-0.3189001f, -0.06622195f), new Vector2(-0.2799587f, -0.02208843f), new Vector2(0.3742558f, 0.01953566f), new Vector2(0.3693518f, 0.07213159f), new Vector2(0.7741635f, 0.08325882f), new Vector2(0.7818418f, 0.1233793f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Marksman/M24/M24_Bolt.png"), Position: new Vector2(-0.2857f, 0.1f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Marksman/M24/M24_BoltCover.png"), BoltCoverPosition: new Vector2(-0.3285f, 0.1143f));

                    //creates a new attachment point for the scope
                    GameObject NewScopeAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewScopeAttachmentPoint.transform.parent = Instance.transform;
                    //sets the position of the new attachment point
                    NewScopeAttachmentPoint.transform.localPosition = new Vector3(-0.192f, 0.165f);
                    NewScopeAttachmentPoint.transform.localEulerAngles = Vector3.zero;
                    NewScopeAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Scope;
                    NewScopeAttachmentPoint.name = ("ScopeAttachment");

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.2857f, 0.1f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.5f, -0.01f, 0), new Vector3(-0.03f, 0.003f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.15f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.778f, 0.1f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.186f, 0f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.2143f, 0.1428f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.25f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x51;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_3.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_3.wav")
                    };

                    //creates a new scope and attaches it to the new attachment point (ඞMAKE SURE NAME IS RIGHT!!!ඞ)
                    GameObject scope = GameObject.Instantiate(ModAPI.FindSpawnable($"{Mod.ModTag} Zeiss 3-12x Attachment").Prefab);
                    CatalogBehaviour.PerformMod(ModAPI.FindSpawnable($"{Mod.ModTag} Zeiss 3-12x Attachment"), scope);
                    scope.transform.position = NewScopeAttachmentPoint.transform.position;
                }
            }
            );

            // ASVAL
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} ASVAL", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Whispering Death'  9×39mm SP-5  Skins: 0         \n\nThe ASVAL is a automatic rifle designed to fire subsonic ammunition, it comes with with a intergrated suppressor and a high ROF.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Marksman/ASVAL/ASVAL_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Marksman/ASVAL/ASVAL.png");


                    //Set the sprite for the bolt
                    var boltCover = CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Marksman/VSS/VSS_Bolt.png"), Position: new Vector2(-0.0286f, 0.1f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.1f, BoltCover: ModAPI.LoadSprite("Guns/Marksman/VSS/VSS_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1429f, 0.1f));
                    //Set the sprite for the bolt cover and the other skins
                    ////Debug.Log(boltCover.GetComponentInParent<RandomSpriteBehaviour>());
                    boltCover.AddComponent<BetterRandomSpriteChildBehaviour>().Sprites = new Sprite[]
                    {
                      ModAPI.LoadSprite("Guns/Marksman/VSS/VSS_BoltCover.png"),
                      //ModAPI.LoadSprite("Guns/Marksman/Scar-H/Scar-H_BoltCover.png")
                    };

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.6810325f, 0.144485f), new Vector2(-0.3137573f, 0.1427815f), new Vector2(-0.3181171f, 0.1144324f), new Vector2(-0.6832627f, 0.1052461f), new Vector2(-0.6832627f, -0.08663226f), new Vector2(-0.3462256f, 0.04589834f), new Vector2(-0.3673232f, -0.1100585f), new Vector2(-0.2848037f, -0.1118522f), new Vector2(-0.2764408f, -0.02874105f), new Vector2(-0.08283141f, -0.05367329f), new Vector2(-0.06251058f, -0.165224f), new Vector2(0.05866539f, -0.1278452f), new Vector2(0.02501012f, 0.006667554f), new Vector2(0.1922473f, 0.05286757f), new Vector2(0.7122175f, 0.05767742f), new Vector2(0.7080811f, 0.175565f), };

                    //creates a new attachment point for the scope
                    GameObject NewScopeAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewScopeAttachmentPoint.transform.parent = Instance.transform;
                    //sets the position of the new attachment point
                    NewScopeAttachmentPoint.transform.localPosition = new Vector3(-0.192f, 0.165f);
                    NewScopeAttachmentPoint.transform.localEulerAngles = Vector3.zero;
                    NewScopeAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Scope;
                    NewScopeAttachmentPoint.name = ("ScopeAttachment");

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.07f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.0286f, 0.1f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.28f, -0.041f, 0), new Vector3(0.13f, 0.03f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.14f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.7225f, 0.1f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1281f, 0.0146f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.157f, 0.157f, 0f); // Sets position of scope

                    // Disables muzzle flash
                    Instance.transform.GetChild(4).GetChild(0).gameObject.SetActive(false);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_939;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AK_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_Suppressed_3.wav")
                    };
                }
            }
            );

            // VSS
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("AK-47"), //item to derive from
                NameOverride = $"{Mod.ModTag} VSS", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Thread Cutter'  9×39mm SP-5  Skins: 0            \n\nThe VSS is essentially the same weapon as the ASVAL, the main notable difference is the wooden stock rather than the ASVAL metal stock.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Marksman/VSS/VSS_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Marksman/VSS/VSS.png");


                    //Set the sprite for the bolt
                    var boltCover = CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Marksman/VSS/VSS_Bolt.png"), Position: new Vector2(-0.0286f, 0.1f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.1f, BoltCover: ModAPI.LoadSprite("Guns/Marksman/VSS/VSS_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1429f, 0.1f));
                    //Set the sprite for the bolt cover and the other skins
                    ////Debug.Log(boltCover.GetComponentInParent<RandomSpriteBehaviour>());
                    boltCover.AddComponent<BetterRandomSpriteChildBehaviour>().Sprites = new Sprite[]
                    {
                      ModAPI.LoadSprite("Guns/Marksman/VSS/VSS_BoltCover.png"),
                      //ModAPI.LoadSprite("Guns/Marksman/Scar-H/Scar-H_BoltCover.png")
                    };

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.6798109f, 0.1463466f), new Vector2(-0.3134843f, 0.1446744f), new Vector2(-0.319613f, 0.08930825f), new Vector2(-0.7109415f, 0.08433241f), new Vector2(-0.7142857f, -0.1179202f), new Vector2(-0.2628091f, -0.1363138f), new Vector2(-0.235935f, -0.05406676f), new Vector2(-0.09386048f, -0.05270697f), new Vector2(-0.05372922f, -0.16474f), new Vector2(0.05997601f, -0.1195924f), new Vector2(0.02431338f, 0.002117641f), new Vector2(0.2108542f, 0.05453119f), new Vector2(0.71763f, 0.06019688f), new Vector2(0.7126136f, 0.1731007f), };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.07f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.0286f, 0.1f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.28f, -0.041f, 0), new Vector3(0.13f, 0.03f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.14f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.7225f, 0.1f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1281f, 0.0146f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.157f, 0.157f, 0f); // Sets position of scope

                    // Disables muzzle flash
                    Instance.transform.GetChild(4).GetChild(0).gameObject.SetActive(false);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_939;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AK_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_Suppressed_3.wav")
                    };
                }
            }
            );

            // VPO123
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Sniper Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} VPO-123", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Vepr'  7.62x54mmR  Skins: 0                      \n\nThe VPO-123 is a Russian hunting firearm manufactured by Molot Oruzhie for the civillian market, it has a resemblence to the SVD.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Marksman/VPO123/VPO123_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Marksman/VPO123/VPO123.png");

                    // Adjusts Colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.698012f, 0.07132269f), new Vector2(0.686904f, 0.1269519f), new Vector2(0.575028f, 0.07524124f), new Vector2(0.2980525f, 0.0717702f), new Vector2(0.2665817f, 0.1252686f), new Vector2(-0.4633666f, 0.1232682f), new Vector2(-0.506314f, 0.06915663f), new Vector2(-0.641775f, 0.0689099f), new Vector2(-0.6584945f, 0.04164609f), new Vector2(-0.8431271f, 0.03967406f), new Vector2(-0.8428571f, -0.1285714f), new Vector2(-0.7020935f, -0.1285714f), new Vector2(-0.6761652f, -0.09893897f), new Vector2(-0.5853157f, -0.1010588f), new Vector2(-0.5685855f, -0.124136f), new Vector2(-0.494634f, -0.1224822f), new Vector2(-0.4390502f, -0.03760821f), new Vector2(-0.3783162f, -0.07033204f), new Vector2(-0.2787625f, -0.01782585f), new Vector2(-0.2051481f, -0.1197453f), new Vector2(-0.09642755f, -0.08555823f), new Vector2(-0.1392858f, 0.009190321f), new Vector2(0.2962449f, 0.01369182f), new Vector2(0.2973188f, 0.04181519f), new Vector2(0.8428571f, 0.04127514f), new Vector2(0.8447092f, 0.07115855f), };

                    //creates a new attachment point for the scope
                    GameObject NewScopeAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewScopeAttachmentPoint.transform.parent = Instance.transform;
                    //sets the position of the new attachment point
                    NewScopeAttachmentPoint.transform.localPosition = new Vector3(-0.192f, 0.165f);
                    NewScopeAttachmentPoint.transform.localEulerAngles = Vector3.zero;
                    NewScopeAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Scope;
                    NewScopeAttachmentPoint.name = ("ScopeAttachment");

                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Marksman/VPO123/VPO123_Bolt.png"), Position: new Vector2(-0.1857f, 0.0857f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Marksman/VPO123/VPO123_BoltCover.png"), BoltCoverPosition: new Vector2(-0.3f, 0.0857f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.1857f, 0.0857f);
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.864f, 0.059f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.5f, -0.039f, 0), new Vector3(0.021f, 0f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.15f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.85f, 0.0573f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.0856f, 0f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.3143f, 0.1426f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x54;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_3.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_3.wav")
                    };
                }
            }
            );

            // VPO124
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Sniper Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} Vepr Hunter VPO 124", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Hunter'  7.62x54mmR  Skins: 0                      \n\nThe VPO-124 is a Russian magazine feed hunting rifle chambered in 7.62x54mmR, it's a basic design but an effective hunting rifle.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Marksman/VPO124/VPO124_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Marksman/VPO124/VPO124.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.4869353f, 0.07276325f), new Vector2(0.4844576f, 0.1017714f), new Vector2(0.4545656f, 0.09835448f), new Vector2(0.4469134f, 0.1326521f), new Vector2(0.4228974f, 0.0997524f), new Vector2(-0.2770697f, 0.09531099f), new Vector2(-0.3908118f, 0.01556683f), new Vector2(-0.4386291f, 0.04138324f), new Vector2(-0.7413642f, 0.04476214f), new Vector2(-0.7428572f, -0.1285714f), new Vector2(-0.6107531f, -0.1234161f), new Vector2(-0.4990443f, -0.07188138f), new Vector2(-0.4251283f, -0.07056745f), new Vector2(-0.412392f, -0.09867377f), new Vector2(-0.3468728f, -0.099884f), new Vector2(-0.3068616f, -0.0168566f), new Vector2(-0.2592908f, -0.01958999f), new Vector2(-0.1980586f, -0.07116958f), new Vector2(-0.1230223f, -0.01411226f), new Vector2(-0.08152737f, -0.09535388f), new Vector2(0.03082494f, -0.09556603f), new Vector2(0.03348232f, -0.02085276f), new Vector2(0.4849203f, 0.01521302f), new Vector2(0.4851211f, 0.04195384f), new Vector2(0.7425209f, 0.04448296f), new Vector2(0.7422647f, 0.07093143f), };
                    
                    // Sets up bolt sprite
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Marksman/VPO124/VPO124_Bolt.png"), Position: new Vector2(-0.04286f, 0.05714f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Marksman/VPO124/VPO124_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1714f, 0.05714f));

                    //creates a new attachment point for the scope
                    GameObject NewScopeAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewScopeAttachmentPoint.transform.parent = Instance.transform;
                    //sets the position of the new attachment point
                    NewScopeAttachmentPoint.transform.localPosition = new Vector3(-0.192f, 0.165f);
                    NewScopeAttachmentPoint.transform.localEulerAngles = Vector3.zero;
                    NewScopeAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Scope;
                    NewScopeAttachmentPoint.name = ("ScopeAttachment");

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.04286f, 0.05714f);
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.759f, 0.05714f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.36f, -0.01f, 0), new Vector3(0.103f, -0.016f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.14f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.75f, 0.0572f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.3286f, 0f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1285f, 0.1142f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel


                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x54;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_3.wav")
                    };
                    
                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_3.wav")
                    };
                }
            }
            );

            // VPO215
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Sniper Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} VPO 215", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Gornostay'  .366 TKM  Skins: 0                     \n\nThe VPO-215 is a cheap but effective Russian made bolt action hunting rifle for the civillian market made by Molot Oruzhie.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Marksman/VPO215/VPO215_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Marksman/VPO215/VPO215.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.2384966f, 0.08685437f), new Vector2(-0.3262974f, 0.02170653f), new Vector2(-0.3583858f, 0.05716696f), new Vector2(-0.6416909f, 0.05714431f), new Vector2(-0.611371f, -0.1119534f), new Vector2(-0.3306062f, -0.05688865f), new Vector2(-0.3012458f, -0.0909855f), new Vector2(-0.2206073f, 0.005034193f), new Vector2(-0.1479646f, -0.05415066f), new Vector2(-0.09608128f, -0.002697192f), new Vector2(0.3455378f, -0.0009631868f), new Vector2(0.3980162f, 0.05638845f), new Vector2(0.6427307f, 0.05663465f), new Vector2(0.6428571f, 0.08559169f), };
                    
                    // Sets up bolt sprite
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Marksman/VPO215/VPO215_Bolt.png"), Position: new Vector2(-0.11429f, 0.05714f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Marksman/VPO215/VPO215_BoltCover.png"), BoltCoverPosition: new Vector2(-0.15714f, 0.07142f));

                    //creates a new attachment point for the scope
                    GameObject NewScopeAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewScopeAttachmentPoint.transform.parent = Instance.transform;
                    //sets the position of the new attachment point
                    NewScopeAttachmentPoint.transform.localPosition = new Vector3(-0.192f, 0.165f);
                    NewScopeAttachmentPoint.transform.localEulerAngles = Vector3.zero;
                    NewScopeAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Scope;
                    NewScopeAttachmentPoint.name = ("ScopeAttachment");

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.03607f, 0.07142f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.295f, 0f, 0), new Vector3(0.142f, 0f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.14f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.652f, 0.0714f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.3286f, 0f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0571f, 0.1f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.25f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_300Blk;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_3.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_Suppressed_3.wav")
                    };
                }
            }
            );

            // K98
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Sniper Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} K98k", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Karabiner'  7.92×57mm Mauser  Skins: 0           \n\nThe Karabiner 98 kurz was a german bolt-action rifle, it was the standard service rifle of the German Wehrmacht in World War 2.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Marksman/K98/K98_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Marksman/K98/K98.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.3767258f, 0.1290151f), new Vector2(-0.4075182f, 0.07453731f), new Vector2(-0.4925822f, 0.0579794f), new Vector2(-0.9242441f, 0.04374459f), new Vector2(-0.9285715f, -0.1571429f), new Vector2(-0.463049f, -0.01972166f), new Vector2(-0.3805182f, -0.06914011f), new Vector2(-0.2878667f, -0.01966778f), new Vector2(-0.132562f, 0.0110573f), new Vector2(0.9047711f, 0.07137363f), new Vector2(0.9220804f, 0.1268515f), };
                    
                    // Sets up Bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Marksman/K98/K98_Bolt.png"), Position: new Vector2(-0.2857f, 0.08571f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Marksman/K98/K98_BoltCover.png"), BoltCoverPosition: new Vector2(-0.3428f, 0.1143f));

                    //creates a new attachment point for the scope
                    GameObject NewScopeAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewScopeAttachmentPoint.transform.parent = Instance.transform;
                    //sets the position of the new attachment point
                    NewScopeAttachmentPoint.transform.localPosition = new Vector3(-0.192f, 0.165f);
                    NewScopeAttachmentPoint.transform.localEulerAngles = Vector3.zero;
                    NewScopeAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Scope;
                    NewScopeAttachmentPoint.name = ("ScopeAttachment");

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.2298f, 0.1f);
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.975f, 0.1143f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.462f, 0.014f, 0), new Vector3(0.082f, 0.053f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.17f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.937f, 0.1144f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.457f, 0.0288f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.2286f, 0.1428f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.25f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_30_Gov;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_3.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_Suppressed_3.wav")
                    };
                }
            }
            );

            // M1Garand
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Sniper Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} M1 Garand", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Garand'  .30-06 Springfield  Skins: 0            \n\nThe M1 Garand is an American semi automatic battle rifle developed in the mid 1930's, it was used extensively during WW2 by the Allies.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Marksman/M1Garand/M1Garand_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    // Sets sprite to normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Marksman/M1Garand/M1Garand.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.8742791f, 0.1256149f), new Vector2(0.8673598f, 0.1902509f), new Vector2(0.8191536f, 0.1224783f), new Vector2(-0.3313223f, 0.1244318f), new Vector2(-0.326457f, 0.1524845f), new Vector2(-0.3812277f, 0.152662f), new Vector2(-0.3773309f, 0.1252628f), new Vector2(-0.4432335f, 0.126569f), new Vector2(-0.4843252f, 0.04821461f), new Vector2(-0.8978094f, 0.06942619f), new Vector2(-0.8928372f, -0.1588537f), new Vector2(-0.6043042f, -0.07822938f), new Vector2(-0.5137345f, -0.1002822f), new Vector2(-0.4376541f, -0.02047546f), new Vector2(-0.3485822f, -0.07454654f), new Vector2(-0.2590933f, -0.01842199f), new Vector2(0.8824755f, 0.07314869f), new Vector2(0.9087623f, 0.1221879f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Marksman/M1Garand/M1Garand_Bolt.png"), Position: new Vector2(-0.1571f, 0.1143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Marksman/M1Garand/M1Garand_BoltCover.png"), BoltCoverPosition: new Vector2(-0.3428f, 0.1143f));

                    //creates a new attachment point for the scope
                    GameObject NewScopeAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewScopeAttachmentPoint.transform.parent = Instance.transform;
                    //sets the position of the new attachment point
                    NewScopeAttachmentPoint.transform.localPosition = new Vector3(-0.192f, 0.165f);
                    NewScopeAttachmentPoint.transform.localEulerAngles = Vector3.zero;
                    NewScopeAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Scope;
                    NewScopeAttachmentPoint.name = ("ScopeAttachment");

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.1571f, 0.1143f);
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.92f, 0.11f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.46f, 0f, 0), new Vector3(0.1f, 0f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.17f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.907f, 0.1141f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2285f, 0f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.2286f, 0.1428f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_30_Gov;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_3.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_3.wav")
                    };
                }
            }
            );

            // Arisaka99
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Sniper Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} Type 99", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Arisaka'  7.7×58mm Arisaka  Skins: 0             \n\nThe Type 99 was a Japanese made bolt-action rifle based on the Type 38, it was used by the Imperial Japanese Army during World War II.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Marksman/Arisaka99/Arisaka99_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Marksman/Arisaka99/Arisaka99.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.3883771f, 0.1192283f), new Vector2(-0.5160788f, 0.04012592f), new Vector2(-0.5743797f, 0.07041995f), new Vector2(-0.9106541f, 0.06998514f), new Vector2(-0.9106541f, -0.1299061f), new Vector2(-0.6122537f, -0.04379357f), new Vector2(-0.4898842f, -0.06940548f), new Vector2(-0.4057417f, -0.01105357f), new Vector2(-0.3305389f, -0.04918172f), new Vector2(-0.2263318f, 0.01698373f), new Vector2(0.8236328f, 0.04150069f), new Vector2(0.8245736f, 0.06622013f), new Vector2(0.7413344f, 0.0688613f), new Vector2(0.7397913f, 0.09787998f), new Vector2(0.9165934f, 0.1042375f), new Vector2(0.9189345f, 0.1269252f), };
                    
                    // Sets up bolt Sprite
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Marksman/Arisaka99/Arisaka99_Bolt.png"), Position: new Vector2(-0.2857f, 0.1f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Marksman/Arisaka99/Arisaka99_BoltCover.png"), BoltCoverPosition: new Vector2(-0.3143f, 0.11428f));

                    //creates a new attachment point for the scope
                    GameObject NewScopeAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewScopeAttachmentPoint.transform.parent = Instance.transform;
                    //sets the position of the new attachment point
                    NewScopeAttachmentPoint.transform.localPosition = new Vector3(-0.192f, 0.165f);
                    NewScopeAttachmentPoint.transform.localEulerAngles = Vector3.zero;
                    NewScopeAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Scope;
                    NewScopeAttachmentPoint.name = ("ScopeAttachment");

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.2857f, 0.1f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.47f, 0.01f, 0), new Vector3(0.01f, 0.033f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.923f, 0.114f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2715f, 0.0287f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.2715f, 0.1428f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.25f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_30_Gov;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_3.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_Suppressed_3.wav")
                    };
                }
            }
            );

            // Mosin
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Sniper Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} Mosin–Nagant", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'The rifle of the people'  7.62×54mmR  Skins: 0   \n\nThe Mosin-Nagant is a bolt-action rifle that has been around for over 100 years, it has been battle tested in numerous conflicts since.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Marksman/Mosin/Mosin_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Marksman/Mosin/Mosin.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.8401085f, 0.08495575f), new Vector2(0.7553568f, 0.08624049f), new Vector2(0.7585385f, 0.1089333f), new Vector2(0.9579981f, 0.1177679f), new Vector2(0.9547818f, 0.1478176f), new Vector2(-0.4155214f, 0.1423924f), new Vector2(-0.5127646f, 0.05263296f), new Vector2(-0.9531831f, 0.0469682f), new Vector2(-0.9382542f, -0.1737897f), new Vector2(-0.4464096f, -0.01323487f), new Vector2(-0.4107335f, -0.05525822f), new Vector2(-0.04355063f, 0.02053518f), new Vector2(0.8414491f, 0.0613886f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Marksman/Mosin/Mosin_Bolt.png"), Position: new Vector2(-0.2714f, 0.1285f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Marksman/Mosin/Mosin_BoltCover.png"), BoltCoverPosition: new Vector2(-0.3285f, 0.1285f));

                    //creates a new attachment point for the scope
                    GameObject NewScopeAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewScopeAttachmentPoint.transform.parent = Instance.transform;
                    //sets the position of the new attachment point
                    NewScopeAttachmentPoint.transform.localPosition = new Vector3(-0.192f, 0.165f);
                    NewScopeAttachmentPoint.transform.localEulerAngles = Vector3.zero;
                    NewScopeAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Scope;
                    NewScopeAttachmentPoint.name = ("ScopeAttachment");

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.2714f, 0.1285f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.525f, 0.01f, 0), new Vector3(0.128f, 0.044f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.963f, 0.1286f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.228f, 0.0429f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.2286f, 0.1571f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.25f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x54;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AK_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_3.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_Suppressed_3.wav")
                    };
                }
            }
            );

            // LeeEnfield
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Sniper Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} Lee-Enfield", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'SMLE'  .303 Mk VII SAA Ball  Skins: 0         \n\nThe Lee-Enfield is a British Bolt action repeating rifle that saw extended use by Commonwealth forces during World War 2.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Marksman/LeeEnfield/LeeEnfield_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Marksman/LeeEnfield/LeeEnfield.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.3326792f, 0.1216186f), new Vector2(-0.3518127f, 0.0773792f), new Vector2(-0.4687785f, 0.02592133f), new Vector2(-0.8285714f, 0.03631897f), new Vector2(-0.8227823f, -0.1532834f), new Vector2(-0.3510961f, -0.0220619f), new Vector2(-0.2663992f, -0.07582325f), new Vector2(-0.1160031f, -0.06914409f), new Vector2(-0.01210737f, 0.01259406f), new Vector2(0.7957661f, 0.05437829f), new Vector2(0.8015553f, 0.1301267f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Marksman/LeeEnfield/LeeEnfield_Bolt.png"), Position: new Vector2(-0.2143f, 0.08572f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Marksman/LeeEnfield/LeeEnfield_BoltCover.png"), BoltCoverPosition: new Vector2(-0.2571f, 0.1143f));

                    //creates a new attachment point for the scope
                    GameObject NewScopeAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewScopeAttachmentPoint.transform.parent = Instance.transform;
                    //sets the position of the new attachment point
                    NewScopeAttachmentPoint.transform.localPosition = new Vector3(-0.192f, 0.165f);
                    NewScopeAttachmentPoint.transform.localEulerAngles = Vector3.zero;
                    NewScopeAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Scope;
                    NewScopeAttachmentPoint.name = ("ScopeAttachment");

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.2143f, 0.08572f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.4f, 0f, 0), new Vector3(0.142f, 0.031f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.836f, 0.0857f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2713f, 0.0287f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1286f, 0.1428f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.25f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_30_Gov;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_3.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_Suppressed_3.wav")
                    };
                }
            }
            );

            // M14
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Sniper Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} M14", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'The People's Rifle'  7.62×51mm NATO  Skins: 0   \n\nThe M14 is a U.S made select fire battle rifle with a high ROF designed in the mid 1950's and manufactured by Springfield Armory.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Marksman/M14/M14_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Marksman/M14/M14.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.8443278f, 0.1027236f), new Vector2(0.847569f, 0.1300421f), new Vector2(-0.4420656f, 0.1243359f), new Vector2(-0.4531216f, 0.0586786f), new Vector2(-0.9059649f, 0.05448699f), new Vector2(-0.894035f, -0.1578782f), new Vector2(-0.5710898f, -0.07834649f), new Vector2(-0.5068064f, -0.1037379f), new Vector2(-0.4314578f, -0.02220661f), new Vector2(-0.3375872f, -0.07338519f), new Vector2(-0.2205151f, -0.01951788f), new Vector2(-0.21757f, -0.1555964f), new Vector2(-0.09436683f, -0.1329385f), new Vector2(-0.09842289f, -0.02074634f), new Vector2(0.5904261f, 0.04786897f), new Vector2(0.560002f, 0.09528808f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Marksman/M1Garand/M1Garand_Bolt.png"), Position: new Vector2(-0.1571f, 0.1143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Marksman/M1Garand/M1Garand_BoltCover.png"), BoltCoverPosition: new Vector2(-0.3428f, 0.1143f));

                    //creates a new attachment point for the scope
                    GameObject NewScopeAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewScopeAttachmentPoint.transform.parent = Instance.transform;
                    //sets the position of the new attachment point
                    NewScopeAttachmentPoint.transform.localPosition = new Vector3(-0.192f, 0.165f);
                    NewScopeAttachmentPoint.transform.localEulerAngles = Vector3.zero;
                    NewScopeAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Scope;
                    NewScopeAttachmentPoint.name = ("ScopeAttachment");

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().Automatic = true;
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.08f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.1571f, 0.1143f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.45f, 0f, 0), new Vector3(0.23f, 0f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.17f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.85f, 0.1145f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1715f, 0f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.2285f, 0.143f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x51;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_3.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_3.wav")
                    };
                }
            }
            );

            // M1A
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Sniper Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} Springfield Armory M1A", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'M1A'  7.62×51mm NATO  Skins: 0                   \n\nThe M1A is a semi automatic rifle based on the infamous M14, the rifle was intended for law enforcement and civillian markets.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Marksman/M1A/M1A_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Marksman/M1A/M1A.png");
                    
                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.7318506f, 0.1270194f), new Vector2(0.7204123f, 0.1584309f), new Vector2(0.7028177f, 0.1295064f), new Vector2(-0.2127836f, 0.1251206f), new Vector2(-0.2163745f, 0.1559256f), new Vector2(-0.2666735f, 0.1573713f), new Vector2(-0.2740812f, 0.1273544f), new Vector2(-0.318218f, 0.1296065f), new Vector2(-0.3633251f, 0.04887532f), new Vector2(-0.4632004f, 0.04395397f), new Vector2(-0.4727879f, 0.0751361f), new Vector2(-0.7828158f, 0.07204945f), new Vector2(-0.7857143f, -0.1571429f), new Vector2(-0.4624023f, -0.06941368f), new Vector2(-0.4060362f, -0.0901147f), new Vector2(-0.3156534f, -0.006188497f), new Vector2(-0.2246291f, -0.05761268f), new Vector2(-0.113879f, -0.007669941f), new Vector2(-0.09398104f, -0.1281531f), new Vector2(0.0108152f, -0.09599825f), new Vector2(0.005386293f, -0.01994982f), new Vector2(0.06913579f, -0.008603884f), new Vector2(0.06868604f, 0.01178657f), new Vector2(0.4693139f, 0.0201163f), new Vector2(0.4781622f, 0.04163665f), new Vector2(0.6979851f, 0.04465609f), new Vector2(0.7029287f, 0.06861246f), new Vector2(0.6746535f, 0.06848534f), new Vector2(0.6711196f, 0.0988949f), new Vector2(0.7862637f, 0.1013694f), new Vector2(0.7844989f, 0.1267601f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Marksman/M1Garand/M1Garand_Bolt.png"), Position: new Vector2(-0.043f, 0.1143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Marksman/M1A/M1A_BoltCover.png"), BoltCoverPosition: new Vector2(-0.2143f, 0.1143f));

                    //creates a new attachment point for the scope
                    GameObject NewScopeAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewScopeAttachmentPoint.transform.parent = Instance.transform;
                    //sets the position of the new attachment point
                    NewScopeAttachmentPoint.transform.localPosition = new Vector3(-0.192f, 0.165f);
                    NewScopeAttachmentPoint.transform.localEulerAngles = Vector3.zero;
                    NewScopeAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Scope;
                    NewScopeAttachmentPoint.name = ("ScopeAttachment");

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().Automatic = false;
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.08f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.043f, 0.1143f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.36f, 0f, 0), new Vector3(0.3f, 0.02f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.792f, 0.1145f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2f, 0f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1142f, 0.143f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x51;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_3.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_3.wav")
                    };
                }
            }
            );

            // M1A SOCOM
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Sniper Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} Springfield Armory M1A SOCOM", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'SOCOM 16'  7.62×51mm NATO  Skins: 0              \n\nThe M1A SOCOM is a modernized version of hte M1A, it has a shorter overall barrel legth, picatinny rails and an adjustable stock.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Marksman/M1A/M1A_SOCOM16_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Marksman/M1A/M1A_SOCOM16.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.7314395f, 0.129193f), new Vector2(0.7136227f, 0.1575261f), new Vector2(0.6954672f, 0.1301205f), new Vector2(-0.1843902f, 0.1305637f), new Vector2(-0.1863671f, 0.1584396f), new Vector2(-0.2419262f, 0.1585138f), new Vector2(-0.2479612f, 0.1257067f), new Vector2(-0.2916671f, 0.1243775f), new Vector2(-0.3317694f, 0.07033464f), new Vector2(-0.500354f, 0.07265954f), new Vector2(-0.5024298f, 0.09879318f), new Vector2(-0.7857143f, 0.09370452f), new Vector2(-0.7857143f, -0.1274062f), new Vector2(-0.737649f, -0.1257834f), new Vector2(-0.6286559f, -0.01948472f), new Vector2(-0.5249507f, -0.01226025f), new Vector2(-0.5177661f, 0.008510742f), new Vector2(-0.3580492f, 0.01466713f), new Vector2(-0.3808729f, -0.1291543f), new Vector2(-0.3066423f, -0.125467f), new Vector2(-0.2999384f, -0.04545137f), new Vector2(-0.1841969f, -0.065522f), new Vector2(-0.1318415f, -0.01356117f), new Vector2(-0.07123294f, -0.01291525f), new Vector2(-0.0672457f, -0.1298912f), new Vector2(0.04426421f, -0.09965186f), new Vector2(0.04252373f, -0.01533251f), new Vector2(0.09665345f, -0.01167418f), new Vector2(0.09483823f, 0.01626987f), new Vector2(0.5277228f, 0.01610967f), new Vector2(0.5294704f, 0.042438f), new Vector2(0.700469f, 0.04203999f), new Vector2(0.6982976f, 0.06974323f), new Vector2(0.6751786f, 0.06973848f), new Vector2(0.6726077f, 0.09775145f), new Vector2(0.7843733f, 0.09826378f), new Vector2(0.7876968f, 0.1293886f), };

                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Marksman/M1Garand/M1Garand_Bolt.png"), Position: new Vector2(-0.0143f, 0.1143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Marksman/M1A/M1A_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1858f, 0.1143f));

                    //creates a new attachment point for the scope
                    GameObject NewScopeAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewScopeAttachmentPoint.transform.parent = Instance.transform;
                    //sets the position of the new attachment point
                    NewScopeAttachmentPoint.transform.localPosition = new Vector3(-0.192f, 0.165f);
                    NewScopeAttachmentPoint.transform.localEulerAngles = Vector3.zero;
                    NewScopeAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Scope;
                    NewScopeAttachmentPoint.name = ("ScopeAttachment");

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.0143f, 0.1143f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.342f, -0.052f, 0), new Vector3(0.177f, 0f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.792f, 0.1145f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2288f, 0f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0845f, 0.143f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x51;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_3.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_3.wav")
                    };
                }
            }
            );

            // EBR
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Sniper Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} Mk14 EBR", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Bertha'  7.62×51mm NATO  Skins: 0                \n\nThe Mk 14 EBR is an American made designated marksman rifle, it was developed as an answer to a request by the SEALs for a compact M14.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Marksman/EBR/EBR_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Marksman/EBR/EBR.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.6410801f, 0.1299983f), new Vector2(0.6328536f, 0.1587037f), new Vector2(0.6170049f, 0.1322244f), new Vector2(0.4741017f, 0.1331239f), new Vector2(0.4761631f, 0.160766f), new Vector2(-0.01823051f, 0.1544399f), new Vector2(-0.01677968f, 0.1303845f), new Vector2(-0.1884505f, 0.1341536f), new Vector2(-0.190308f, 0.1535885f), new Vector2(-0.2433672f, 0.1538189f), new Vector2(-0.2603014f, 0.187897f), new Vector2(-0.307629f, 0.1245052f), new Vector2(-0.3528341f, 0.1246299f), new Vector2(-0.3911608f, 0.07228436f), new Vector2(-0.4703773f, 0.06527041f), new Vector2(-0.492653f, 0.04381572f), new Vector2(-0.4953774f, 0.09889233f), new Vector2(-0.8123983f, 0.09485754f), new Vector2(-0.8123983f, -0.1536279f), new Vector2(-0.7279804f, -0.09552048f), new Vector2(-0.7296165f, -0.02110122f), new Vector2(-0.6702847f, -0.01523152f), new Vector2(-0.6655949f, 0.008627221f), new Vector2(-0.4769948f, 0.01203269f), new Vector2(-0.4411734f, -0.03234556f), new Vector2(-0.4918566f, -0.1118292f), new Vector2(-0.4907958f, -0.1825467f), new Vector2(-0.4213018f, -0.1809687f), new Vector2(-0.3567811f, -0.06902516f), new Vector2(-0.3065638f, -0.067179f), new Vector2(-0.2740279f, -0.01530464f), new Vector2(-0.2210067f, -0.01375005f), new Vector2(-0.1846318f, -0.04126659f), new Vector2(-0.1814152f, -0.1600157f), new Vector2(-0.04298504f, -0.123429f), new Vector2(-0.042981f, 0.01412743f), new Vector2(0.4419149f, 0.01520452f), new Vector2(0.444792f, 0.0437543f), new Vector2(0.6735646f, 0.04557125f), new Vector2(0.6735684f, 0.07275722f), new Vector2(0.6451828f, 0.07118565f), new Vector2(0.6450356f, 0.09909067f), new Vector2(0.8122106f, 0.09733281f), new Vector2(0.8149009f, 0.1309787f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Marksman/EBR/EBR_Bolt.png"), Position: new Vector2(-0.1f, 0.1143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Marksman/EBR/EBR_BoltCover.png"), BoltCoverPosition: new Vector2(-0.2714f, 0.1143f));

                    //creates a new attachment point for the scope
                    GameObject NewScopeAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewScopeAttachmentPoint.transform.parent = Instance.transform;
                    //sets the position of the new attachment point
                    NewScopeAttachmentPoint.transform.localPosition = new Vector3(-0.192f, 0.165f);
                    NewScopeAttachmentPoint.transform.localEulerAngles = Vector3.zero;
                    NewScopeAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Scope;
                    NewScopeAttachmentPoint.name = ("ScopeAttachment");

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().Automatic = true;
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.08f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.1f, 0.1143f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.406f, -0.073f, 0), new Vector3(0.082f, 0.013f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.82f, 0.1144f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.343f, 0f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1426f, 0.1715f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x51;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_3.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_Suppressed_3.wav")
                    };
                }
            }
            );

            // SKSTapco
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Sniper Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} SKS Tapco Furniture", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Abomination'  7.62×39mm NATO  Skins: 0           \n\nThe SKS is a 1940's semi-automatic rifle, the TAPCO kit is an attempt to modernize the SKS with picatiny rails and an adjustable stock.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Marksman/SKS/SKS_Tapco_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Marksman/SKS/SKS_Tapco.png");

                    //Set the sprite for the bolt
                    var boltCover = CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Marksman/SKS/SKS_Bolt.png"), Position: new Vector2(-0.1143f, 0.1143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.13f, BoltCover: ModAPI.LoadSprite("Guns/Marksman/SKS/SKS_Tapco_BoltCover.png"), BoltCoverPosition: new Vector2(-0.25714f, 0.1143f));
                    
                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.5880252f, 0.1109339f), new Vector2(0.5807454f, 0.1741344f), new Vector2(0.5356668f, 0.14829f), new Vector2(-0.4083895f, 0.1433518f), new Vector2(-0.4158976f, 0.08925937f), new Vector2(-0.8334982f, 0.08904336f), new Vector2(-0.8428571f, -0.1410121f), new Vector2(-0.542307f, 0.003082663f), new Vector2(-0.4420056f, 0.00732322f), new Vector2(-0.4831545f, -0.09792446f), new Vector2(-0.4053921f, -0.1332547f), new Vector2(-0.3646662f, -0.02820443f), new Vector2(-0.2876274f, -0.05411752f), new Vector2(-0.2199838f, -0.005604431f), new Vector2(-0.1617725f, -0.006605307f), new Vector2(-0.09451527f, -0.183773f), new Vector2(0.0220668f, -0.1035764f), new Vector2(-0.03741436f, -0.05601045f), new Vector2(-0.04286848f, -0.001291037f), new Vector2(0.8396845f, 0.08480443f), new Vector2(0.8413503f, 0.1129353f), };

                    //creates a new attachment point for the scope
                    GameObject NewScopeAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewScopeAttachmentPoint.transform.parent = Instance.transform;
                    //sets the position of the new attachment point
                    NewScopeAttachmentPoint.transform.localPosition = new Vector3(-0.192f, 0.165f);
                    NewScopeAttachmentPoint.transform.localEulerAngles = Vector3.zero;
                    NewScopeAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Scope;
                    NewScopeAttachmentPoint.name = ("ScopeAttachment");

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.1143f, 0.1143f);
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.859f, 0.1f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.409f, -0.039f, 0), new Vector3(0.148f, 0.011f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.8512f, 0.1f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.143f, -0.014f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.2569f, 0.157f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x39;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AK_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_3.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_3.wav")
                    };
                }
            }
            );

            // SKS
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Sniper Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} SKS", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Simonov'  7.62×39mm  Skins: 0                    \n\nThe SKS is a late 1940's Soviet Semi Automatic Rifle, it's commonly used by geurilla fighters due to it's light weight and ease of use.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Marksman/SKS/SKS_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Marksman/SKS/SKS.png");

                    //Set the sprite for the bolt
                    var boltCover = CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Marksman/SKS/SKS_Bolt.png"), Position: new Vector2(-0.1f, 0.1f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.13f, BoltCover: ModAPI.LoadSprite("Guns/Marksman/SKS/SKS_BoltCover.png"), BoltCoverPosition: new Vector2(-0.2571f, 0.1f));

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.772675f, 0.1558019f), new Vector2(0.7740424f, 0.1009788f), new Vector2(0.5206522f, 0.1036609f), new Vector2(0.5203592f, 0.1289905f), new Vector2(-0.4322203f, 0.1289769f), new Vector2(-0.4289591f, 0.07724492f), new Vector2(-0.5368713f, 0.03570232f), new Vector2(-0.5729259f, 0.07599061f), new Vector2(-0.8238771f, 0.07380421f), new Vector2(-0.8285714f, -0.1571429f), new Vector2(-0.4166838f, -0.01600301f), new Vector2(-0.3000661f, -0.07337955f), new Vector2(-0.2242616f, -0.01724481f), new Vector2(-0.1748807f, -0.01434818f), new Vector2(-0.1734629f, -0.03765532f), new Vector2(-0.09280602f, -0.03851665f), new Vector2(-0.03102855f, 0.01236336f), new Vector2(0.2787166f, 0.0172521f), new Vector2(0.2918555f, 0.03547455f), new Vector2(0.7156119f, 0.04323991f), new Vector2(0.7141248f, 0.06751119f), new Vector2(0.8286795f, 0.06653474f), new Vector2(0.828644f, 0.09631549f), new Vector2(0.8012659f, 0.09897268f), new Vector2(0.7984049f, 0.1557717f), };

                    //creates a new attachment point for the scope
                    GameObject NewScopeAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewScopeAttachmentPoint.transform.parent = Instance.transform;
                    //sets the position of the new attachment point
                    NewScopeAttachmentPoint.transform.localPosition = new Vector3(-0.192f, 0.165f);
                    NewScopeAttachmentPoint.transform.localEulerAngles = Vector3.zero;
                    NewScopeAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Scope;
                    NewScopeAttachmentPoint.name = ("ScopeAttachment");

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.1f, 0.1f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.44f, 0.02f, 0), new Vector3(0.16f, 0.03f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.17f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.8359f, 0.0856f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.157f, 0f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.2713f, 0.14285f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x39;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AK_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_3.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_3.wav")
                    };
                }
            }
            );

            // SVT40
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Sniper Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} SVT-40", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Svetka'  7.62×54mmR  Skins: 0                    \n\nThe SVT-40 is a 1940's Soviet era semi automatic battle rifle that was used extensively by the Red Army during World War 2.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Marksman/SVT40/SVT40_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Marksman/SVT40/SVT40.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.8187743f, 0.09926601f), new Vector2(0.7983185f, 0.1560685f), new Vector2(0.7856706f, 0.09861656f), new Vector2(0.6463277f, 0.09665626f), new Vector2(0.6396883f, 0.1339059f), new Vector2(-0.4801784f, 0.1274823f), new Vector2(-0.5000571f, 0.09588446f), new Vector2(-0.5776074f, 0.05147091f), new Vector2(-0.9f, 0.07277609f), new Vector2(-0.9f, -0.1571429f), new Vector2(-0.4180495f, 0.01067825f), new Vector2(-0.3905841f, -0.07466523f), new Vector2(-0.304341f, -0.0652397f), new Vector2(-0.2730283f, 0.01431149f), new Vector2(-0.2116863f, 0.01256213f), new Vector2(-0.2090307f, -0.1059812f), new Vector2(-0.06853825f, -0.06433944f), new Vector2(-0.06986833f, 0.01524076f), new Vector2(0.3686581f, 0.04980488f), new Vector2(0.3933913f, 0.07360549f), new Vector2(0.8978908f, 0.07008108f), new Vector2(0.8978908f, 0.1001953f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Marksman/SVT40/SVT40_Bolt.png"), Position: new Vector2(-0.1429f, 0.1142f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.13f, BoltCover: ModAPI.LoadSprite("Guns/Marksman/SVT40/SVT40_BoltCover.png"), BoltCoverPosition: new Vector2(-0.2857f, 0.1142f));

                    //creates a new attachment point for the scope
                    GameObject NewScopeAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewScopeAttachmentPoint.transform.parent = Instance.transform;
                    //sets the position of the new attachment point
                    NewScopeAttachmentPoint.transform.localPosition = new Vector3(-0.192f, 0.165f);
                    NewScopeAttachmentPoint.transform.localEulerAngles = Vector3.zero;
                    NewScopeAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Scope;
                    NewScopeAttachmentPoint.name = ("ScopeAttachment");

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.1429f, 0.1142f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.5f, 0.022f, 0), new Vector3(0.015f, 0.028f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.907f, 0.086f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2286f, 0.0287f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.343f, 0.1427f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x54;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_3.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_Suppressed_3.wav")
                    };
                }
            }
            );

            // SVD
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Sniper Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} SVD", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Dragunov'  7.62×54mmR  Skins: 0                  \n\nThe SVD is a Soviet semi automatic marksman rifle first entering service in the early 1960's and still in service in Russia today.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Marksman/SVD/SVD_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Marksman/SVD/SVD.png");

                    //Set the sprite for the bolt
                    var boltCover = CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/AK/_Shared/AK_Bolt.png"), Position: new Vector2(-0.1285f, 0.0857f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.1f, BoltCover: ModAPI.LoadSprite("Guns/AK/_Shared/AK_BoltCover.png"), BoltCoverPosition: new Vector2(-0.257f, 0.0857f));

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.7969594f, 0.07495335f), new Vector2(0.6045204f, 0.07492512f), new Vector2(0.567031f, 0.1290493f), new Vector2(-0.5191935f, 0.1304868f), new Vector2(-0.5560056f, 0.07999379f), new Vector2(-1.030793f, 0.07303797f), new Vector2(-1.028571f, -0.1571429f), new Vector2(-0.4825335f, -0.1454652f), new Vector2(-0.478239f, -0.08372447f), new Vector2(-0.3246133f, -0.09033002f), new Vector2(-0.2937042f, -0.01255047f), new Vector2(-0.2517937f, -0.06956518f), new Vector2(-0.2054901f, -0.06435332f), new Vector2(-0.177377f, -0.1563072f), new Vector2(-0.05734673f, -0.1347486f), new Vector2(-0.07273835f, -0.01076528f), new Vector2(1.028571f, 0.04377508f), new Vector2(1.02635f, 0.07081664f), new Vector2(0.8904634f, 0.06741957f), new Vector2(0.8822691f, 0.1571429f), };

                    //creates a new attachment point for the scope
                    GameObject NewScopeAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewScopeAttachmentPoint.transform.parent = Instance.transform;
                    //sets the position of the new attachment point
                    NewScopeAttachmentPoint.transform.localPosition = new Vector3(-0.192f, 0.165f);
                    NewScopeAttachmentPoint.transform.localEulerAngles = Vector3.zero;
                    NewScopeAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Scope;
                    NewScopeAttachmentPoint.name = ("ScopeAttachment");


                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.1285f, 0.0857f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.5f, -0.06f, 0), new Vector3(0.1f, 0f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.18f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(1.034f, 0.057f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1859f, 0f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.357f, 0.1426f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_762x54;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AK_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_3.wav")
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_3.wav")
                    };
                }
            }
            );

            // Varmint
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} CZ 455", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Varmint'  .22LR  Skins: 0                        \n\nThe CZ 455 is a relatively new series of magazine feed bolt action civillian hunting rifles developed in the Czech Republic.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Marksman/Varmint/Varmint_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Marksman/Varmint/Varmint.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.3423614f, 0.1142857f), new Vector2(-0.386091f, 0.0630476f), new Vector2(-0.485291f, 0.06113971f), new Vector2(-0.4877721f, 0.08643264f), new Vector2(-0.7695576f, 0.09183424f), new Vector2(-0.7714286f, -0.1142857f), new Vector2(-0.5294576f, -0.02822167f), new Vector2(-0.4208081f, -0.0488022f), new Vector2(-0.3317572f, -0.0005263165f), new Vector2(-0.2861404f, -0.002374161f), new Vector2(-0.2337915f, -0.05499063f), new Vector2(-0.1735373f, -0.004141074f), new Vector2(-0.1404926f, -0.004479495f), new Vector2(-0.1400287f, -0.02688647f), new Vector2(-0.06316567f, -0.02827794f), new Vector2(-0.06325358f, -5.143508E-05f), new Vector2(0.3982565f, 0.06171248f), new Vector2(0.3990856f, 0.08775251f), new Vector2(0.7714286f, 0.08657108f), new Vector2(0.7714286f, 0.1142857f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Marksman/Varmint/Varmint_Bolt.png"), Position: new Vector2(-0.17143f, 0.08571f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.06f, BoltCover: ModAPI.LoadSprite("Guns/Marksman/Varmint/Varmint_BoltCover.png"), BoltCoverPosition: new Vector2(-0.18572f, 0.1f));
                    
                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.12f, 0.0957f);
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.786f, 0.095f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.4f, 0.021f, 0), new Vector3(0.038f, 0.017f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.12f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.779f, 0.1f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.157f, 0.0147f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.185f, 0.1284f, 0f); // Sets position of scope
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.2f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_22;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_Suppressed_3.wav")
                    };
                }
            }
            );

            // Leveraction
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} Winchester 1892 Lever Action", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'M1892'  .32-20 Winchester  Skins: 0              \n\nThe Winchester Model 1892 is a small game / taget shooting lever action repeating rifle from the late 1800's designed by John Browning.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Marksman/Leveraction/Leveraction_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Marksman/Leveraction/Leveraction.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.2687451f, 0.1021658f), new Vector2(-0.3122129f, 0.1253539f), new Vector2(-0.2935554f, 0.07202447f), new Vector2(-0.3507544f, 0.04124445f), new Vector2(-0.6797603f, 0.04442828f), new Vector2(-0.6857143f, -0.1285714f), new Vector2(-0.5560892f, -0.1206326f), new Vector2(-0.4197307f, -0.04564393f), new Vector2(-0.3749092f, -0.04494677f), new Vector2(-0.3730002f, -0.09360293f), new Vector2(-0.3208535f, -0.1199832f), new Vector2(-0.2797085f, -0.06736936f), new Vector2(-0.1915116f, -0.06369823f), new Vector2(-0.1211272f, -0.01313105f), new Vector2(-0.1124963f, 0.01423314f), new Vector2(0.3131233f, 0.01372044f), new Vector2(0.3159487f, 0.0434919f), new Vector2(0.6857143f, 0.04334782f), new Vector2(0.687668f, 0.1021968f), };
                   
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Marksman/Leveraction/Leveraction_Bolt.png"), Position: new Vector2(-0.2286f, 0.07143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.1f, BoltCover: ModAPI.LoadSprite("Guns/Marksman/Leveraction/Leveraction_BoltCover.png"), BoltCoverPosition: new Vector2(-0.25714f, 0.0714f));

                    //This sets up the Cock/Hammer of the revolver. It animates when activated, not when it fires, meaning it has a very slight delay.
                    CamsEasyMethods.SetUpGunCock(Instance, ModAPI.LoadSprite("Guns/Marksman/Leveraction/Leveraction_Lever.png"), new Vector2(-0.228f, -0.1f), new Vector3(0f, 0f, -0.8f));
                    // Set speed of bolt moving back
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.35f);
                    // Set speed and position of hammer & flips pivot point (parent of hammer) upside down and sets position of pivot point in order to rotate from top right
                    Instance.GetComponentInChildren<RotationAnimationBehaviour>().Duration = 0.3f;
                    Instance.transform.GetChild(7).localPosition = new Vector3(-0.157f, -0.0215f, 1);
                    Instance.transform.GetChild(7).GetChild(0).localScale = new Vector3(1, -1, 1);
                    Instance.transform.GetChild(7).GetChild(0).localPosition = new Vector3(-0.1f, -0.05f, 1);

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.2f, 0.05714f);
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.7f, 0.085f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.308f, 0f, 0), new Vector3(0f, 0f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.12f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.69f, 0.0716f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1858f, 0f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1285f, 0.1142f, 0f); // Sets position of scope

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_22;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);
                }
            }
            );

            #endregion

            // Shotguns
            #region Shotgun

            // MTS225
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Shotgun"), //item to derive from
                NameOverride = $"{Mod.ModTag} MTs225", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'The Russian Reaper'  12 gauge  Skins: 0          \n\nThe MTs225 is a russian made revolving shotgun, it has a unique revolving cylinder similar to a revolver which is rarely seen in shotguns.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Shotgun/MTS225/MTS225_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Shotgun/MTS225/MTS225.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.2267034f, 0.1571429f), new Vector2(-0.2335907f, 0.1297925f), new Vector2(-0.3148456f, 0.1294139f), new Vector2(-0.3209145f, 0.09949218f), new Vector2(-0.4244101f, 0.09661771f), new Vector2(-0.5063039f, 0.04625418f), new Vector2(-0.5460951f, 0.06899643f), new Vector2(-0.8270375f, 0.06875138f), new Vector2(-0.8285714f, -0.1571429f), new Vector2(-0.7473263f, -0.1540075f), new Vector2(-0.5321813f, -0.04353026f), new Vector2(-0.4853768f, -0.07192916f), new Vector2(-0.3731215f, 0.01654221f), new Vector2(-0.3161794f, 0.01850135f), new Vector2(-0.2661782f, -0.04481058f), new Vector2(-0.1935148f, 0.009948153f), new Vector2(-0.0904604f, 0.0103855f), new Vector2(-0.08690263f, 0.04000142f), new Vector2(0.3736614f, 0.04267378f), new Vector2(0.5293603f, 0.0981622f), new Vector2(0.8262157f, 0.09908983f), new Vector2(0.8285714f, 0.1571429f), };

                    //This creates a new GameObject to hold the looping texture of the revolver's cylinder.
                    GameObject Cylinder = new GameObject("Cylinder");
                    Cylinder.transform.SetParent(Instance.transform, false);
                    //This sets the position of the cylinder .
                    Cylinder.transform.localPosition = new Vector3(-0.1143f, 0.1143f, 0);
                    //This sets the sprite of the cylinder to the looping texture.
                    Cylinder.AddComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Shotgun/MTS225/MTS225_Cylinder.png");
                    //This sets up the revolver's cylinder looping texture.
                    CamsEasyMethods.SetUpGunLoopingTexture(Cylinder, ModAPI.LoadTexture("Guns/Shotgun/MTS225/MTS225_Cylinder.png"), ModAPI.LoadTexture("Guns/Shotgun/MTS225/MTS225_Mask.png"));
                    //And here we make it so when you activate the revolver, it calls a function that makes the cylinder spin
                    Instance.AddComponent<UseEventTrigger>().Action = () =>
                    {
                        //This calls a function that adds rotation to the cylinder, VVVVVV change this value to change how much it moves.
                        Cylinder.GetComponent<LoopTextureHandler>().AddRotationBurst(0.37f);
                    };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().FireDelay = 0.08f;
                    Instance.GetComponent<FirearmBehaviour>().EjectShells = false;
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.4f, 0.04f, 0), new Vector3(0.13f, 0.047f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.13f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.835f, 0.129f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.214f, 0.0287f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1f, 0.1713f, 0f); // Sets position of scope
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);


                }
            }
            );

            // DB
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Shotgun"), //item to derive from
                NameOverride = $"{Mod.ModTag} Double Barreled Shotgun", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Double'  12 gauge  Skins: 0                      \n\nDouble barreled shotguns are a staple of the wild west, even to this day they are very common in rural areas & farms among civillians.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Shotgun/DB/DB_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Shotgun/DB/DB.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.7028946f, 0.1448663f), new Vector2(0.6794022f, 0.1195902f), new Vector2(-0.3218725f, 0.1147915f), new Vector2(-0.4396333f, 0.05232396f), new Vector2(-0.474894f, 0.07992232f), new Vector2(-0.7425168f, 0.07984155f), new Vector2(-0.7379797f, -0.1501733f), new Vector2(-0.4459706f, -0.02549171f), new Vector2(-0.4102957f, -0.04794873f), new Vector2(-0.326319f, 0.004020095f), new Vector2(-0.2468632f, -0.05490381f), new Vector2(-0.1956663f, -0.005147345f), new Vector2(0.1205876f, -0.003286907f), new Vector2(0.2327922f, 0.05320789f), new Vector2(0.7428572f, 0.05357988f), new Vector2(0.7388175f, 0.1131616f), };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().FireDelay = 0.05f;
                    Instance.GetComponent<FirearmBehaviour>().EjectShells = false;
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.4f, 0.03f, 0), new Vector3(0.06f, 0.02f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.12f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.747f, 0.085f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.0142f, -0.014f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.2145f, 0.1284f, 0f); // Sets position of scope
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f); // sets scale of barrel attachment to fix offset issues

                }
            }
            );

            // DB Sawn Off
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Shotgun"), //item to derive from
                NameOverride = $"{Mod.ModTag} Sawn Off Double Barreled Shotgun", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Shorty'  12 gauge  Skins: 0                      \n\nDouble barreled shotguns are a staple of the wild west, even to this day they are very common in rural areas & farms among civillians.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Shotgun/DB/DB_Sawn_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Shotgun/DB/DB_Sawn.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.3296649f, 0.1137832f), new Vector2(-0.4539014f, 0.01912311f), new Vector2(-0.4539014f, -0.06061078f), new Vector2(-0.4063872f, -0.06160559f), new Vector2(-0.3687363f, 0.001985151f), new Vector2(-0.326151f, -0.001559727f), new Vector2(-0.2476897f, -0.05915283f), new Vector2(-0.1980396f, -0.002462931f), new Vector2(0.1406207f, 0.003743924f), new Vector2(0.2422167f, 0.06211828f), new Vector2(0.2847093f, 0.06508369f), new Vector2(0.2852118f, 0.1160197f), };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().EjectShells = false;
                    Instance.GetComponent<FirearmBehaviour>().FireDelay = 0.05f;
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.4f, 0.03f, 0), new Vector3(0.06f, 0.02f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.08f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.3f, 0.085f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.0142f, -0.014f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.2145f, 0.1284f, 0f); // Sets position of scope
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f); // sets scale of barrel attachment to fix offset issues
                }
            }
            );

            // Olympia
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Shotgun"), //item to derive from
                NameOverride = $"{Mod.ModTag} Olympia 72", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Olympia'  12 gauge  Skins: 0                     \n\nThe Rottweil Skeet Olympia 72 is a German designed, Italian made over-under double barreled shotgun designed for skeet target shooting.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Shotgun/Olympia/Olympia_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Shotgun/Olympia/Olympia.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.3197777f, 0.1285714f), new Vector2(-0.4205682f, 0.05944947f), new Vector2(-0.4499989f, 0.0969752f), new Vector2(-0.7285714f, 0.1046446f), new Vector2(-0.7232543f, -0.1285714f), new Vector2(-0.4389792f, -0.01691285f), new Vector2(-0.3792406f, -0.04151215f), new Vector2(-0.3391675f, 0.01078973f), new Vector2(-0.2425042f, -0.03681709f), new Vector2(-0.1791087f, 0.01017494f), new Vector2(0.2041641f, 0.01191073f), new Vector2(0.2520169f, 0.06793266f), new Vector2(0.7259129f, 0.07543208f), new Vector2(0.7285714f, 0.1285714f), };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().FireDelay = 0.05f;
                    Instance.GetComponent<FirearmBehaviour>().EjectShells = false;
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.35f, 0.04f, 0), new Vector3(0.142f, 0.038f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.13f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.735f, 0.1f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.0573f, 0f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1143f, 0.1428f, 0f); // Sets position of scope
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f); // sets scale of barrel attachment to fix offset issues
                }
            }
            );

            // Trench
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Shotgun"), //item to derive from
                NameOverride = $"{Mod.ModTag} Winchester Model 1897", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Trench Gun'  12 gauge  Skins: 0                  \n\nThe Model 1897 is a pump-action shotgun that saw widespread use by the U.S during WW1, the Germans considered it's use a war crime.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Shotgun/Trench/Trench_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Shotgun/Trench/Trench.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1979971f, 0.1289754f), new Vector2(-0.2009418f, 0.1005537f), new Vector2(-0.2791718f, 0.0979198f), new Vector2(-0.3778074f, 0.04246115f), new Vector2(-0.4340605f, 0.07177982f), new Vector2(-0.7413012f, 0.07100026f), new Vector2(-0.7428572f, -0.1285714f), new Vector2(-0.4366813f, -0.03854718f), new Vector2(-0.3611442f, -0.06332181f), new Vector2(-0.2417497f, 0.0192026f), new Vector2(-0.159317f, -0.03700326f), new Vector2(-0.1145987f, 0.009286042f), new Vector2(0.02677029f, 0.01431969f), new Vector2(0.03606501f, 0.0360369f), new Vector2(0.1935561f, 0.04068241f), new Vector2(0.2026713f, 0.01546142f), new Vector2(0.5156741f, 0.01639498f), new Vector2(0.5165024f, 0.04256672f), new Vector2(0.6576121f, 0.04395195f), new Vector2(0.6572152f, 0.06970394f), new Vector2(0.6288375f, 0.07012896f), new Vector2(0.6298344f, 0.09863141f), new Vector2(0.7433678f, 0.1001573f), new Vector2(0.7416624f, 0.1285714f), };
                   
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Shotgun/Trench/Trench_Bolt.png"), Position: new Vector2(0.18571f, 0.05714f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Shotgun/Trench/Trench_BoltCover.png"), BoltCoverPosition: new Vector2(-0.2f, 0.0857f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.08f, 0.08f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.3f, 0.025f, 0), new Vector3(0.27f, 0.018f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.17f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.937f, 0.1f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1144f, -0.0143f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.228f, 0.1564f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.25f);

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/Shot_Casing.png"); Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat; Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(1.4f, 1.4f, 1.4f);
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    Instance.GetComponent<Rigidbody2D>().mass = 0.14f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.751f, 0.1143f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.3317f, 0f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0714f, 0.1428f, 0f); // Sets position of scope
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f); // sets scale of barrel attachment to fix offset issues
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.2f);
                }
            }
            );

            // Toz
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Shotgun"), //item to derive from
                NameOverride = $"{Mod.ModTag} TOZ-106", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'TOZ'  20 gauge  Skins: 0                         \n\nThe TOZ-106 is a popular hunting and self defense weapon in russia, although it's performance as a hunting weapon is questionable.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Shotgun/Toz/Toz_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Shotgun/Toz/Toz.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.141112f, 0.1276608f), new Vector2(-0.1385535f, 0.1010935f), new Vector2(-0.2296039f, 0.06913701f), new Vector2(-0.2308314f, 0.04221629f), new Vector2(-0.571644f, 0.04281139f), new Vector2(-0.5736699f, 0.07163445f), new Vector2(-0.6277015f, 0.07047115f), new Vector2(-0.6285715f, -0.07089959f), new Vector2(-0.5706255f, -0.03455515f), new Vector2(-0.5711583f, 0.009803407f), new Vector2(-0.2303945f, 0.01431026f), new Vector2(-0.1910409f, -0.03534724f), new Vector2(-0.2262882f, -0.1451999f), new Vector2(-0.1474721f, -0.1543593f), new Vector2(-0.1140515f, -0.07629836f), new Vector2(-0.05955741f, -0.07424291f), new Vector2(-0.01175487f, -0.01310279f), new Vector2(-0.002126455f, -0.04345793f), new Vector2(0.1131551f, -0.04302832f), new Vector2(0.1461139f, 0.01239418f), new Vector2(0.3953107f, 0.01994501f), new Vector2(0.4581916f, 0.07056933f), new Vector2(0.6274872f, 0.07282831f), new Vector2(0.6274873f, 0.1289557f), };
                    
                    // Sets up Bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Shotgun/Toz/Toz_Bolt.png"), Position: new Vector2(0.02857f, 0.08571f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: null);

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.03f, 0.1f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.16f, -0.05f, 0), new Vector3(0.26f, 0, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.6378f, 0.1037f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2714f, 0f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.014f, 0.1428f, 0f); // Sets position of scope
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f); // sets scale of barrel attachment to fix offset issues
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.2f);
                }
            }
            );

            // M500
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Shotgun"), //item to derive from
                NameOverride = $"{Mod.ModTag} Mossberg 590A1", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Pumpkin Puncher'  12 gauge  Skins: 0             \n\nThe Mossberg 590A1 is an American made shotgun popular among Law enforcement, it's also used by the military usaully as a breaching tool.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Shotgun/M500/M500_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Shotgun/M500/M500.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.3073286f, 0.1519384f), new Vector2(-0.4266244f, 0.07330982f), new Vector2(-0.7755159f, 0.06738168f), new Vector2(-0.7857143f, -0.1571429f), new Vector2(-0.4508232f, -0.02182679f), new Vector2(-0.355009f, -0.033632f), new Vector2(-0.3153026f, 0.03881481f), new Vector2(-0.2421445f, 0.04018276f), new Vector2(-0.1850252f, -0.008640524f), new Vector2(-0.1297427f, 0.04269022f), new Vector2(0.04019174f, 0.04561046f), new Vector2(0.05296423f, 0.06772429f), new Vector2(0.1494657f, 0.07063534f), new Vector2(0.1561427f, 0.04088876f), new Vector2(0.5313753f, 0.04189824f), new Vector2(0.5299001f, 0.06520659f), new Vector2(0.7285924f, 0.0733759f), new Vector2(0.7302f, 0.09755713f), new Vector2(0.6999489f, 0.09865583f), new Vector2(0.6992354f, 0.13011f), new Vector2(0.7821975f, 0.1298622f), new Vector2(0.7805733f, 0.156286f), };

                    // Sets up Bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Shotgun/M500/M500_Bolt.png"), Position: new Vector2(0.2f, 0.08571f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Shotgun/M500/M500_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1857f, 0.1143f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.07f, 0.11f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.35f, 0.07f, 0), new Vector3(0.222f, 0.058f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.14f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.795f, 0.143f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.3135f, 0.0279f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.143f, 0.1714f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f); // sets scale of barrel attachment to fix offset issues
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.2f);

                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/Shot_Casing.png"); Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat; Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(1.4f, 1.4f, 1.4f);

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_3.wav")
                    };
                }
            }
            );

            // M590 Short
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Shotgun"), //item to derive from
                NameOverride = $"{Mod.ModTag} Mossberg 590A1 Shortened", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Mossy Shorty'  12 gauge  Skins: 0                \n\nThe Mossberg 590A1 is an American made shotgun popular among Law enforcement, it's also used by the military usaully as a breaching tool.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Shotgun/M500/M500_Short_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {


                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Shotgun/M500/M500_Short.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.3240068f, 0.1571429f), new Vector2(-0.3637078f, 0.1105361f), new Vector2(-0.3291291f, 0.05404105f), new Vector2(-0.3912692f, -0.03551505f), new Vector2(-0.355663f, -0.1020375f), new Vector2(-0.2980579f, -0.1045436f), new Vector2(-0.2413932f, 0.01860747f), new Vector2(-0.1834061f, -0.01806752f), new Vector2(-0.1260199f, 0.03706481f), new Vector2(0.04559329f, 0.04011285f), new Vector2(0.04462261f, 0.06935635f), new Vector2(0.158346f, 0.0697376f), new Vector2(0.1583582f, 0.04257384f), new Vector2(0.5271521f, 0.04309085f), new Vector2(0.5299018f, 0.07200862f), new Vector2(0.640451f, 0.07135381f), new Vector2(0.6404f, 0.09811112f), new Vector2(0.6122903f, 0.0975528f), new Vector2(0.6134999f, 0.1289966f), new Vector2(0.6984476f, 0.1306677f), new Vector2(0.6984477f, 0.1566188f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Shotgun/M500/M500_Bolt.png"), Position: new Vector2(0.2f, 0.08571f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Shotgun/M500/M500_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1857f, 0.1143f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.07f, 0.11f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.35f, 0.07f, 0), new Vector3(0.222f, 0.058f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.12f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.707f, 0.143f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.3135f, 0.0279f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.143f, 0.1714f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f); // sets scale of barrel attachment to fix offset issues
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.2f);

                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/Shot_Casing.png"); Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat; Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(1.4f, 1.4f, 1.4f);

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_3.wav")
                    };
                }
            }
            );

            // M590 Stock
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Shotgun"), //item to derive from
                NameOverride = $"{Mod.ModTag} Mossberg 590A1 Tactical", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'M590 Tactical'  12 gauge  Skins: 0               \n\nThe Mossberg 590A1 is an American made shotgun popular among Law enforcement, it's also used by the military usaully as a breaching tool.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Shotgun/M500/M500_Stock_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Shotgun/M500/M500_Stock.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.2944248f, 0.1579678f), new Vector2(-0.308593f, 0.130985f), new Vector2(-0.7019208f, 0.1285714f), new Vector2(-0.7004675f, -0.0728565f), new Vector2(-0.6118901f, -0.06638635f), new Vector2(-0.5802757f, -0.01547794f), new Vector2(-0.5048702f, -0.01455311f), new Vector2(-0.4079665f, 0.07243018f), new Vector2(-0.3314159f, 0.07042214f), new Vector2(-0.3530105f, -0.09861876f), new Vector2(-0.270438f, -0.1008115f), new Vector2(-0.2696753f, -0.01974107f), new Vector2(-0.2308694f, 0.01260764f), new Vector2(-0.1821826f, -0.02023003f), new Vector2(-0.1246685f, 0.04051858f), new Vector2(0.04151624f, 0.04135754f), new Vector2(0.04631025f, 0.06916377f), new Vector2(0.1553197f, 0.07171406f), new Vector2(0.1548823f, 0.04290099f), new Vector2(0.528873f, 0.04381787f), new Vector2(0.5282692f, 0.07108319f), new Vector2(0.7285451f, 0.07260025f), new Vector2(0.7289488f, 0.09768211f), new Vector2(0.6992664f, 0.09816396f), new Vector2(0.7003066f, 0.1267848f), new Vector2(0.7857143f, 0.1291148f), new Vector2(0.7857143f, 0.1571429f), };

                    // Sets up Bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Shotgun/M500/M500_Bolt.png"), Position: new Vector2(0.2f, 0.08571f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Shotgun/M500/M500_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1857f, 0.1143f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.07f, 0.11f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.35f, 0.07f, 0), new Vector3(0.222f, 0.058f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.14f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.795f, 0.143f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.3135f, 0.0279f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.143f, 0.1714f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f); // sets scale of barrel attachment to fix offset issues
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.2f);

                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/Shot_Casing.png"); Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat; Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(1.4f, 1.4f, 1.4f);

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_3.wav")
                    };
                }
            }
            );

            // Rem870
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Shotgun"), //item to derive from
                NameOverride = $"{Mod.ModTag} Remington M870", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Wingmaster'  12 gauge  Skins: 0                  \n\nThe Remington Model 870 is a popular American made pump action shotgun, it's used heavily by law enforcement and civillians alike.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Shotgun/Rem870/Rem870_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Shotgun/Rem870/Rem870.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.2921623f, 0.1571429f), new Vector2(-0.4480545f, 0.06164044f), new Vector2(-0.4737284f, 0.1053928f), new Vector2(-0.7805339f, 0.1001585f), new Vector2(-0.7857143f, -0.1326174f), new Vector2(-0.4494884f, -0.003858462f), new Vector2(-0.4386531f, -0.04712388f), new Vector2(-0.3529872f, -0.04440334f), new Vector2(-0.3469073f, 0.009074122f), new Vector2(-0.2736454f, 0.05028673f), new Vector2(-0.1829445f, -0.01602272f), new Vector2(-0.1261462f, 0.03987106f), new Vector2(0.04196186f, 0.04233348f), new Vector2(0.036983f, 0.06876337f), new Vector2(0.1568146f, 0.07259478f), new Vector2(0.1559644f, 0.04515389f), new Vector2(0.4989834f, 0.04087674f), new Vector2(0.502413f, 0.0671537f), new Vector2(0.5528502f, 0.06791477f), new Vector2(0.5539531f, 0.09965281f), new Vector2(0.5244537f, 0.1045955f), new Vector2(0.5214427f, 0.1256661f), new Vector2(0.7870999f, 0.1282411f), new Vector2(0.7857143f, 0.1571429f), };

                    // Sets up Bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Shotgun/Rem870/Rem870_Bolt.png"), Position: new Vector2(0.18572f, 0.08571f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Shotgun/Rem870/Rem870_BoltCover.png"), BoltCoverPosition: new Vector2(-0.18572f, 0.1143f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.07f, 0.11f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.35f, 0.07f, 0), new Vector3(0.222f, 0.058f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.14f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.795f, 0.143f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.3135f, 0.03f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1429f, 0.1714f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f); // sets scale of barrel attachment to fix offset issues
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.2f);

                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/Shot_Casing.png"); Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat; Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(1.4f, 1.4f, 1.4f);

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_3.wav")
                    };
                }
            }
            );

            // Rem870 Short
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Shotgun"), //item to derive from
                NameOverride = $"{Mod.ModTag} Remington 870 Shortened", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Wingmaster'  12 gauge  Skins: 0                  \n\nThe Remington Model 870 is a popular American made pump action shotgun, it's used heavily by law enforcement and civillians alike.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Shotgun/Rem870/Rem870_Short_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Shotgun/Rem870/Rem870_Short.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.3084025f, 0.1591555f), new Vector2(-0.4017734f, 0.09116115f), new Vector2(-0.4822801f, 0.01310343f), new Vector2(-0.4146798f, -0.04364533f), new Vector2(-0.3146109f, 0.04195558f), new Vector2(-0.2415266f, 0.04132997f), new Vector2(-0.1919958f, -0.01439861f), new Vector2(-0.1284717f, 0.04230651f), new Vector2(0.04202676f, 0.0469247f), new Vector2(0.04113546f, 0.0739278f), new Vector2(0.5547444f, 0.07458558f), new Vector2(0.5559123f, 0.1003006f), new Vector2(0.5298502f, 0.1017821f), new Vector2(0.5308576f, 0.1297902f), new Vector2(0.6320869f, 0.1319896f), new Vector2(0.6374341f, 0.1599031f), };

                    // Sets up Bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Shotgun/Rem870/Rem870_Bolt.png"), Position: new Vector2(0.18572f, 0.08571f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Shotgun/Rem870/Rem870_BoltCover.png"), BoltCoverPosition: new Vector2(-0.18572f, 0.1143f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.07f, 0.11f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.35f, 0.07f, 0), new Vector3(0.222f, 0.058f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.14f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.649f, 0.143f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.3135f, 0.03f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1429f, 0.1714f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f); // sets scale of barrel attachment to fix offset issues
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.2f);

                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/Shot_Casing.png"); Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat; Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(1.4f, 1.4f, 1.4f);

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_3.wav")
                    };
                }
            }
            );

            // Nova
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Shotgun"), //item to derive from
                NameOverride = $"{Mod.ModTag} Benelli Supernova", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Italian Stallion'  12 gauge  Skins: 0            \n\nThe Belli Supernova is a popular italian made pump-action shotgun commonly used for hunting, self-defense and by law enforcement.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Shotgun/Nova/Nova_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Shotgun/Nova/Nova.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.6948014f, 0.124736f), new Vector2(-0.1166733f, 0.1372992f), new Vector2(-0.1340544f, 0.154144f), new Vector2(-0.2152295f, 0.1545347f), new Vector2(-0.2189845f, 0.1320702f), new Vector2(-0.2587619f, 0.1273259f), new Vector2(-0.3955177f, 0.04839009f), new Vector2(-0.4542305f, 0.06755485f), new Vector2(-0.7533594f, 0.05687985f), new Vector2(-0.7571428f, -0.1571429f), new Vector2(-0.4743708f, -0.04363756f), new Vector2(-0.3930763f, -0.06867881f), new Vector2(-0.3333693f, -0.06793071f), new Vector2(-0.30315f, 0.009918079f), new Vector2(-0.2260429f, 0.01683978f), new Vector2(-0.1500426f, -0.03796229f), new Vector2(-0.09407617f, 0.01671438f), new Vector2(0.06704524f, 0.0119489f), new Vector2(0.0726823f, -0.008405523f), new Vector2(0.5566648f, 0.02208299f), new Vector2(0.5601904f, 0.04484784f), new Vector2(0.694715f, 0.04435869f), new Vector2(0.704417f, 0.07552239f), new Vector2(0.6710821f, 0.09799866f), new Vector2(0.757199f, 0.1044527f), new Vector2(0.7576737f, 0.1281206f), new Vector2(0.7136324f, 0.1609264f), };

                    // Sets up Bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Shotgun/Nova/Nova_Bolt.png"), Position: new Vector2(0.24286f, 0.04286f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Shotgun/M500/M500_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1286f, 0.08572f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.014f, 0.0854f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.31f, 0.041f, 0), new Vector3(0.263f, 0.014f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.13f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.765f, 0.1144f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.3716f, 0f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0285f, 0.1427f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f); // sets scale of barrel attachment to fix offset issues
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.2f);

                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/Shot_Casing.png"); Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat; Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(1.4f, 1.4f, 1.4f);

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_3.wav")
                    };
                }
            }
            );

            // Saiga12
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Shotgun"), //item to derive from
                NameOverride = $"{Mod.ModTag} Saiga-12", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'The Russian Beast'  12 gauge  Skins: 0           \n\nThe Saiga-12 is a Russian made semi-automatic magazine fed shotgun patterned after the Kalashnikov series of rifles.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Shotgun/Saiga12/Saiga12_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Shotgun/Saiga12/Saiga12.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.3104415f, 0.1831852f), new Vector2(-0.3469354f, 0.1312863f), new Vector2(-0.7100118f, 0.1194681f), new Vector2(-0.6907791f, -0.06232527f), new Vector2(-0.4209933f, 0.03668541f), new Vector2(-0.310935f, 0.04619178f), new Vector2(-0.3414264f, -0.1250883f), new Vector2(-0.2595153f, -0.128016f), new Vector2(-0.2332815f, -0.01819486f), new Vector2(-0.1225136f, -0.03398922f), new Vector2(-0.0675077f, 0.04373255f), new Vector2(0.03181921f, -0.1814404f), new Vector2(0.1671546f, -0.1258791f), new Vector2(0.08539428f, 0.06375609f), new Vector2(0.457849f, 0.06343608f), new Vector2(0.4557404f, 0.1006662f), new Vector2(0.7178692f, 0.105349f), new Vector2(0.7159634f, 0.1309697f), new Vector2(0.4581689f, 0.1340109f), new Vector2(0.4236574f, 0.1857143f), };

                    // Sets up Bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/AK/_Shared/AK_Bolt_Black.png"), Position: new Vector2(-0.014286f, 0.14286f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Shotgun/Saiga12/Saiga12_BoltCover.png"), BoltCoverPosition: new Vector2(-0.17143f, 0.14286f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.014286f, 0.14286f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.287f, -0.03f, 0), new Vector3(0.179f, 0.07f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.7195f, 0.1143f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2713f, 0.0572f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1571f, 0.2f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f); // sets scale of barrel attachment to fix offset issues
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.13f);

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_3.wav")
                    };
                }
            }
            );

            // AA12
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Shotgun"), //item to derive from
                NameOverride = $"{Mod.ModTag} AA12", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Auto 12'  12 gauge  Skins: 0                     \n\nThe Atchisson AA-12 is a automatic drum fed shotgun with a rate of fire of 300RPM, originally designed by Maxwell Atchisson in 1972.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Shotgun/AA12/AA12_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Shotgun/AA12/AA12.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.4425303f, 0.07059261f), new Vector2(0.441695f, 0.1860263f), new Vector2(0.4003593f, 0.1309019f), new Vector2(-0.2180243f, 0.1320302f), new Vector2(-0.2203487f, 0.2174241f), new Vector2(-0.3068346f, 0.1295463f), new Vector2(-0.6714286f, 0.125077f), new Vector2(-0.6714286f, -0.1024306f), new Vector2(-0.5899702f, -0.1004842f), new Vector2(-0.397355f, 0.01884414f), new Vector2(-0.3054133f, 0.01365703f), new Vector2(-0.2777775f, -0.03970946f), new Vector2(-0.3258997f, -0.1534249f), new Vector2(-0.2455457f, -0.1538403f), new Vector2(-0.2192727f, -0.07215683f), new Vector2(-0.1327439f, -0.06742258f), new Vector2(-0.06817873f, -0.01276609f), new Vector2(-0.07002605f, -0.2132789f), new Vector2(0.04479383f, -0.2099087f), new Vector2(0.04415357f, 0.01130991f), new Vector2(0.4425851f, 0.01485079f), new Vector2(0.4436217f, 0.04030861f), new Vector2(0.6714286f, 0.04468065f), new Vector2(0.6714286f, 0.07011817f), };

                    // Sets up Bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Shotgun/AA12/AA12_Bolt.png"), Position: new Vector2(-0.01428f, 0.08571f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Shotgun/AA12/AA12_BoltCover.png"), BoltCoverPosition: new Vector2(-0.128566f, 0.08571f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().Automatic = true;
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.2f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.01428f, 0.08571f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.26f, -0.069f, 0), new Vector3(0.067f, 0f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.678f, 0.0571f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2278f, 0f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1143f, 0.143f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f); // sets scale of barrel attachment to fix offset issues
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.13f);

                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/Shot_Casing.png"); Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat; Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(1.4f, 1.4f, 1.4f);

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_3.wav")
                    };
                }
            }
            );

            // KSG
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Shotgun"), //item to derive from
                NameOverride = $"{Mod.ModTag} Kel-Tec KSG", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'KSG'  12 gauge  Skins: 0                         \n\nThe Kel-Tec KSG is a unique American made 12 gauge pump-action bullpup shotgun designed by George Kellgren and released in 2011.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Shotgun/KSG/KSG_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Shotgun/KSG/KSG.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.4409276f, 0.128507f), new Vector2(0.4390709f, 0.158567f), new Vector2(0.1293729f, 0.1596449f), new Vector2(0.1274284f, 0.1305598f), new Vector2(-0.4946046f, 0.131964f), new Vector2(-0.4946045f, -0.07101984f), new Vector2(-0.4488657f, -0.06721852f), new Vector2(-0.3845948f, 0.01121067f), new Vector2(-0.2103238f, 0.01527173f), new Vector2(-0.2085192f, -0.009069607f), new Vector2(-0.08940868f, -0.00762555f), new Vector2(-0.1329226f, -0.1556418f), new Vector2(-0.04130383f, -0.1553444f), new Vector2(-0.04262014f, -0.07635988f), new Vector2(0.0386256f, -0.07212261f), new Vector2(0.1070618f, 0.01612243f), new Vector2(0.4694257f, 0.01489881f), new Vector2(0.4713905f, 0.07323162f), new Vector2(0.4999827f, 0.07349005f), new Vector2(0.5001479f, 0.09869266f), new Vector2(0.4736709f, 0.09873751f), new Vector2(0.4716958f, 0.1297826f), };

                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Shotgun/KSG/KSG_Bolt.png"), Position: new Vector2(0.27143f, 0.05714f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: null);

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingDirection = new Vector2(-0.02f, -0.11f);
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.181f, 0.029f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.074f, -0.072f, 0), new Vector3(0.154f, 0.02f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.13f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.507f, 0.0857f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.286f, 0f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0285f, 0.1427f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f); // sets scale of barrel attachment to fix offset issues
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.2f);

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_3.wav")
                    };
                }
            }
            );

            // M26
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Shotgun"), //item to derive from
                NameOverride = $"{Mod.ModTag} M26-MASS", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'M26'  12 gauge  Skins: 0                         \n\nThe M26-MASS is a mag fed shotgun designed by Ira M. Kay in 2002, the weapon system is designed to be mounted underneath a weapon.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Shotgun/M26/M26_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Shotgun/M26/M26.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.3108611f, 0.1195665f), new Vector2(0.3088367f, 0.147815f), new Vector2(0.2295188f, 0.1465162f), new Vector2(0.227899f, 0.117648f), new Vector2(0.03755042f, 0.118411f), new Vector2(-0.006021902f, 0.1735297f), new Vector2(-0.08174832f, 0.1738855f), new Vector2(-0.08356526f, 0.1146488f), new Vector2(-0.1601801f, 0.1112927f), new Vector2(-0.1772906f, 0.08589525f), new Vector2(-0.4808728f, 0.08637287f), new Vector2(-0.4857143f, -0.08428143f), new Vector2(-0.4342122f, -0.07954181f), new Vector2(-0.3070038f, 0.02397198f), new Vector2(-0.1671421f, 0.02827643f), new Vector2(-0.220873f, -0.06254857f), new Vector2(-0.2271376f, -0.1359242f), new Vector2(-0.1504804f, -0.1357831f), new Vector2(-0.1136907f, -0.05245189f), new Vector2(0.02252193f, -0.04835831f), new Vector2(0.04780835f, -0.03010388f), new Vector2(0.124305f, -0.1708254f), new Vector2(0.2618687f, -0.1036474f), new Vector2(0.2023607f, -0.005729377f), new Vector2(0.2072576f, 0.02878874f), new Vector2(0.2824667f, 0.02768818f), new Vector2(0.284188f, 0.05146065f), new Vector2(0.4857143f, 0.05403088f), new Vector2(0.4841004f, 0.1165581f), };

                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Shotgun/M26/M26_Bolt.png"), Position: new Vector2(0.1143f, 0.07142f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Shotgun/M26/M26_BoltCover.png"), BoltCoverPosition: new Vector2(0f, 0.07142f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.1143f, 0.07142f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.155f, -0.054f, 0), new Vector3(0.2f, -0.04f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.13f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.493f, 0.0859f);
                    Instance.transform.Find("BarrelAttachment").gameObject.SetActive(false); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.1282f, 0.129f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f); // sets scale of barrel attachment to fix offset issues
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.13f);

                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/Shot_Casing.png"); Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat; Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(1.4f, 1.4f, 1.4f);

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_3.wav")
                    };
                }
            }
            );

            // Spas12
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Shotgun"), //item to derive from
                NameOverride = $"{Mod.ModTag} Franchi SPAS-12", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'SPAS'  12 gauge  Skins: 0                        \n\nThe Franchi SPAS-12 is a italian made dual-mode shotgun that can be adjusted to be either semi-automatic or pump-action.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Shotgun/Spas12/Spas12_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Shotgun/Spas12/Spas12.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.2704094f, 0.09879691f), new Vector2(-0.274352f, 0.07346693f), new Vector2(-0.6702254f, 0.06758559f), new Vector2(-0.6637426f, -0.1263492f), new Vector2(-0.363494f, 0.008413419f), new Vector2(-0.2999723f, 0.01112323f), new Vector2(-0.3332063f, -0.1528526f), new Vector2(-0.2465834f, -0.1480676f), new Vector2(-0.2024191f, -0.04003203f), new Vector2(-0.1816693f, -0.06583168f), new Vector2(-0.131403f, -0.06593724f), new Vector2(-0.07396892f, -0.02424376f), new Vector2(0.2133803f, -0.01706755f), new Vector2(0.2146076f, -0.04387657f), new Vector2(0.240746f, -0.04514363f), new Vector2(0.2406803f, -0.01670125f), new Vector2(0.3562627f, -0.01744692f), new Vector2(0.3588792f, -0.0483839f), new Vector2(0.4949957f, -0.03999371f), new Vector2(0.5520483f, -0.01070048f), new Vector2(0.5532311f, 0.01630493f), new Vector2(0.639166f, 0.02049828f), new Vector2(0.6406531f, 0.04611515f), new Vector2(0.6102448f, 0.04656313f), new Vector2(0.6188642f, 0.0744536f), new Vector2(0.7555222f, 0.07545549f), new Vector2(0.7555222f, 0.09717619f), };

                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Shotgun/Spas12/Spas12_Bolt.png"), Position: new Vector2(0.2286f, 0.01428f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Shotgun/Spas12/Spas12_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1571f, 0.05714f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.04f, 0.06f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.27f, -0.06f, 0), new Vector3(0.341f, -0.014f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.764f, 0.085f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.4285f, -0.0572f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0856f, 0.114f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f); // sets scale of barrel attachment to fix offset issues
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.2f);

                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/Shot_Casing.png"); Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat; Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(1.4f, 1.4f, 1.4f);

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_3.wav")
                    };
                }
            }
            );

            // Spas12 Foldable
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Shotgun"), //item to derive from
                NameOverride = $"{Mod.ModTag} Franchi SPAS-12 Folding Stock", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'SPAS'  12 gauge  Skins: 0                        \n\nThe Franchi SPAS-12 is a italian made dual-mode shotgun that can be adjusted to be either semi-automatic or pump-action.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Shotgun/Spas12/Spas12_Foldable_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Shotgun/Spas12/Spas12_Foldable.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.2704094f, 0.09879691f), new Vector2(-0.436424f, 0.04915611f), new Vector2(-0.7512615f, 0.03355045f), new Vector2(-0.7528823f, -0.1312113f), new Vector2(-0.7002861f, -0.1263521f), new Vector2(-0.6957419f, -0.01913884f), new Vector2(-0.2999723f, 0.01112323f), new Vector2(-0.3499887f, -0.1318745f), new Vector2(-0.2780505f, -0.1501654f), new Vector2(-0.2024191f, -0.04003203f), new Vector2(-0.1816693f, -0.06583168f), new Vector2(-0.131403f, -0.06593724f), new Vector2(-0.07396892f, -0.02424376f), new Vector2(0.2133803f, -0.01706755f), new Vector2(0.2146076f, -0.04387657f), new Vector2(0.240746f, -0.04514363f), new Vector2(0.2406803f, -0.01670125f), new Vector2(0.3562627f, -0.01744692f), new Vector2(0.3588792f, -0.0483839f), new Vector2(0.4949957f, -0.03999371f), new Vector2(0.5520483f, -0.01070048f), new Vector2(0.5532311f, 0.01630493f), new Vector2(0.639166f, 0.02049828f), new Vector2(0.6406531f, 0.04611515f), new Vector2(0.6102448f, 0.04656313f), new Vector2(0.6188642f, 0.0744536f), new Vector2(0.7555222f, 0.07545549f), new Vector2(0.7555222f, 0.09717619f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Shotgun/Spas12/Spas12_Bolt.png"), Position: new Vector2(0.2286f, 0.01428f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Shotgun/Spas12/Spas12_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1571f, 0.05714f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.04f, 0.06f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.27f, -0.06f, 0), new Vector3(0.341f, -0.014f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.764f, 0.085f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.4285f, -0.0572f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0856f, 0.114f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f); // sets scale of barrel attachment to fix offset issues
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.2f);

                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/Shot_Casing.png"); Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat; Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(1.4f, 1.4f, 1.4f);

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_3.wav")
                    };
                }
            }
            );

            // Spas12 Folded
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Shotgun"), //item to derive from
                NameOverride = $"{Mod.ModTag} Franchi SPAS-12 Folded Stock", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'SPAS'  12 gauge  Skins: 0                        \n\nThe Franchi SPAS-12 is a italian made dual-mode shotgun that can be adjusted to be either semi-automatic or pump-action.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Shotgun/Spas12/Spas12_Foldable_Folded_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Shotgun/Spas12/Spas12_Foldable_Folded.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.3085846f, 0.1008947f), new Vector2(0.2983486f, 0.1573791f), new Vector2(-0.1953434f, 0.1573209f), new Vector2(-0.2733411f, 0.09115593f), new Vector2(-0.3278314f, 0.04197828f), new Vector2(-0.3020701f, -0.001463603f), new Vector2(-0.3562821f, -0.1213855f), new Vector2(-0.2927351f, -0.1522632f), new Vector2(-0.2024191f, -0.04003203f), new Vector2(-0.1816693f, -0.06583168f), new Vector2(-0.131403f, -0.06593724f), new Vector2(-0.07396892f, -0.02424376f), new Vector2(0.2133803f, -0.01706755f), new Vector2(0.2146076f, -0.04387657f), new Vector2(0.240746f, -0.04514363f), new Vector2(0.2406803f, -0.01670125f), new Vector2(0.3562627f, -0.01744692f), new Vector2(0.3588792f, -0.0483839f), new Vector2(0.4949957f, -0.03999371f), new Vector2(0.5520483f, -0.01070048f), new Vector2(0.5532311f, 0.01630493f), new Vector2(0.639166f, 0.02049828f), new Vector2(0.6406531f, 0.04611515f), new Vector2(0.6102448f, 0.04656313f), new Vector2(0.6188642f, 0.0744536f), new Vector2(0.7555222f, 0.07545549f), new Vector2(0.7555222f, 0.09717619f), };

                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Shotgun/Spas12/Spas12_Bolt.png"), Position: new Vector2(0.2286f, 0.01428f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Shotgun/Spas12/Spas12_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1571f, 0.05714f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.04f, 0.06f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.27f, -0.06f, 0), new Vector3(0.341f, -0.014f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.16f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.764f, 0.085f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.4285f, -0.0572f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").gameObject.SetActive(false); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f); // sets scale of barrel attachment to fix offset issues
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.2f);

                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/Shot_Casing.png"); Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat; Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(1.4f, 1.4f, 1.4f);

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_3.wav")
                    };
                }
            }
            );

            // Spas12 Shortened
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Shotgun"), //item to derive from
                NameOverride = $"{Mod.ModTag} Franchi SPAS-12 Shortened", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'SPAS'  12 gauge  Skins: 0                        \n\nThe Franchi SPAS-12 is a italian made dual-mode shotgun that can be adjusted to be either semi-automatic or pump-action.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Shotgun/Spas12/Spas12_Short_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Shotgun/Spas12/Spas12_Short.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.3085846f, 0.1008947f), new Vector2(-0.2782699f, 0.09608471f), new Vector2(-0.3278314f, 0.04197828f), new Vector2(-0.3020701f, -0.001463603f), new Vector2(-0.3562821f, -0.1213855f), new Vector2(-0.2927351f, -0.1522632f), new Vector2(-0.2024191f, -0.04003203f), new Vector2(-0.1816693f, -0.06583168f), new Vector2(-0.131403f, -0.06593724f), new Vector2(-0.07396892f, -0.02424376f), new Vector2(0.2133803f, -0.01706755f), new Vector2(0.2146076f, -0.04387657f), new Vector2(0.240746f, -0.04514363f), new Vector2(0.2406803f, -0.01670125f), new Vector2(0.3562627f, -0.01744692f), new Vector2(0.3588792f, -0.0483839f), new Vector2(0.4949957f, -0.03999371f), new Vector2(0.5520483f, -0.01070048f), new Vector2(0.5532311f, 0.01630493f), new Vector2(0.639166f, 0.02049828f), new Vector2(0.6406531f, 0.04611515f), new Vector2(0.6102448f, 0.04656313f), new Vector2(0.6188642f, 0.0744536f), new Vector2(0.7555222f, 0.07545549f), new Vector2(0.7555222f, 0.09717619f), };

                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Shotgun/Spas12/Spas12_Bolt.png"), Position: new Vector2(0.2286f, 0.01428f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/Shotgun/Spas12/Spas12_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1571f, 0.05714f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.04f, 0.06f);
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.771f, 0.085f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.27f, -0.06f, 0), new Vector3(0.341f, -0.014f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.15f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.764f, 0.085f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.4285f, -0.0572f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0856f, 0.114f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f); // sets scale of barrel attachment to fix offset issues
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.2f);

                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/Shot_Casing.png"); Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat; Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(1.4f, 1.4f, 1.4f);

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_3.wav")
                    };
                }
            }
            );

            // Striker12
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Shotgun"), //item to derive from
                NameOverride = $"{Mod.ModTag} Striker-12", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Street Sweeper'  12 gauge  Skins: 0              \n\nThe Sentinel Arms Co Striker-12 is a South African made 12 gauge shotgun with a revolving cylinder intended for riot control.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Shotgun/Striker12/Striker12_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Shotgun/Striker12/Striker12.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.5716336f, 0.05669101f), new Vector2(0.5612176f, 0.08507273f), new Vector2(0.5330864f, 0.05711133f), new Vector2(0.1703945f, 0.05628685f), new Vector2(0.167967f, 0.08885158f), new Vector2(-0.212209f, 0.08904098f), new Vector2(-0.2605499f, 0.0310594f), new Vector2(-0.5447219f, 0.03131843f), new Vector2(-0.5948928f, 0.08923163f), new Vector2(-0.5986619f, -0.1481945f), new Vector2(-0.5405684f, -0.03160156f), new Vector2(-0.1685211f, -0.02992632f), new Vector2(-0.2249425f, -0.1919157f), new Vector2(-0.1514221f, -0.1959687f), new Vector2(-0.107071f, -0.08655228f), new Vector2(-0.07749071f, -0.1088545f), new Vector2(-0.006371342f, -0.1115709f), new Vector2(0.003278453f, -0.2326102f), new Vector2(0.1455687f, -0.2262035f), new Vector2(0.1422015f, -0.1137346f), new Vector2(0.1714542f, -0.09857921f), new Vector2(0.1445823f, -0.08308487f), new Vector2(0.1450141f, -0.0312391f), new Vector2(0.1736815f, -0.03252605f), new Vector2(0.1716673f, -0.002569804f), new Vector2(0.3421158f, -0.001418984f), new Vector2(0.3195074f, -0.1419985f), new Vector2(0.3685512f, -0.1419465f), new Vector2(0.404967f, 0.001244903f), new Vector2(0.5974464f, 0.003179692f), new Vector2(0.5977196f, 0.05603488f), };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().EjectShells = false;
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.156f, -0.1f, 0), new Vector3(0.323f, -0.06f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.13f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.604f, 0.03f);
                    Instance.transform.Find("BarrelAttachment").gameObject.SetActive(false); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0433f, 0.1f, 0f); // Sets position of scope
                }
            }
            );

            // Striker12 Folded
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Shotgun"), //item to derive from
                NameOverride = $"{Mod.ModTag} Striker 12 Folded", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Street Sweeper'  12 gauge  Skins: 0              \n\nThe Sentinel Arms Co Striker-12 is a South African made 12 gauge shotgun with a revolving cylinder intended for riot control.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Shotgun/Striker12/Striker12_Folded_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Shotgun/Striker12/Striker12_Folded.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.5735533f, 0.0572321f), new Vector2(0.5576069f, 0.08692667f), new Vector2(0.5447748f, 0.05749767f), new Vector2(0.4283897f, 0.05503349f), new Vector2(0.4009763f, 0.1185897f), new Vector2(0.2573953f, 0.1170164f), new Vector2(0.2512675f, 0.140173f), new Vector2(-0.1679093f, 0.1384133f), new Vector2(-0.2562183f, 0.0830301f), new Vector2(-0.2513563f, 0.03764309f), new Vector2(-0.1741941f, -0.037407f), new Vector2(-0.2315836f, -0.2004175f), new Vector2(-0.1407006f, -0.2013064f), new Vector2(-0.1032081f, -0.08307603f), new Vector2(-0.07168187f, -0.1090773f), new Vector2(0.002698686f, -0.1149677f), new Vector2(0.002058774f, -0.2220986f), new Vector2(0.1416642f, -0.2232926f), new Vector2(0.1441689f, -0.1175419f), new Vector2(0.1718874f, -0.0994639f), new Vector2(0.1392172f, -0.08097902f), new Vector2(0.1419281f, -0.02718502f), new Vector2(0.1697026f, -0.0213961f), new Vector2(0.1770045f, 0.003221089f), new Vector2(0.3372977f, -0.002187765f), new Vector2(0.3163246f, -0.1462317f), new Vector2(0.3665627f, -0.1461434f), new Vector2(0.4074199f, -0.002889559f), new Vector2(0.6f, -0.001252599f), new Vector2(0.5982405f, 0.05177452f), };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().EjectShells = false;
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.156f, -0.1f, 0), new Vector3(0.323f, -0.06f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.13f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.604f, 0.03f);
                    Instance.transform.Find("BarrelAttachment").gameObject.SetActive(false); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").gameObject.SetActive(false); // Sets position of scope
                }
            }
            );

            // Striker12 Stockless
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Shotgun"), //item to derive from
                NameOverride = $"{Mod.ModTag} Striker 12 Stockless", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "D1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Street Sweeper'  12 gauge  Skins: 0              \n\nThe Sentinel Arms Co Striker-12 is a South African made 12 gauge shotgun with a revolving cylinder intended for riot control.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Shotgun/Striker12/Striker12_Stockless_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Shotgun/Striker12/Striker12_Stockless.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.5723564f, 0.05797108f), new Vector2(0.5604014f, 0.08791496f), new Vector2(0.5428394f, 0.05712283f), new Vector2(0.1712767f, 0.0552471f), new Vector2(0.1727753f, 0.08491358f), new Vector2(-0.2286299f, 0.08154422f), new Vector2(-0.2280577f, 0.006209739f), new Vector2(-0.1766518f, -0.03483857f), new Vector2(-0.2314994f, -0.191874f), new Vector2(-0.1457348f, -0.200575f), new Vector2(-0.109234f, -0.08583398f), new Vector2(-0.07839577f, -0.1129365f), new Vector2(0.00169263f, -0.1120273f), new Vector2(-0.0007665604f, -0.2324119f), new Vector2(0.1399487f, -0.2306857f), new Vector2(0.1419999f, -0.1169993f), new Vector2(0.1724273f, -0.1014819f), new Vector2(0.1417081f, -0.08361311f), new Vector2(0.1415654f, -0.02666135f), new Vector2(0.1729395f, -0.02565359f), new Vector2(0.1722946f, 0.003290094f), new Vector2(0.3443324f, 0.002763316f), new Vector2(0.3169256f, -0.1465071f), new Vector2(0.3669733f, -0.1447316f), new Vector2(0.4035841f, 0.002613924f), new Vector2(0.599077f, 0.001007911f), new Vector2(0.5996134f, 0.05748306f), };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().EjectShells = false;
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.156f, -0.1f, 0), new Vector3(0.323f, -0.06f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.13f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.604f, 0.03f);
                    Instance.transform.Find("BarrelAttachment").gameObject.SetActive(false); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0433f, 0.1f, 0f); // Sets position of scope
                }
            }
            );

            #endregion

            // SMGS
            #region SMG

            //AR9
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} AR9", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Glockmag'  9x19mm Parabellum  Skins: 1           \n\nThe AR9 is a 9MM weapon technically classified as a pistol or short barrelled rifle but with many of the features of a typical AR or SMG.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/AR/AR9/AR9_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    // Sets the sprite//Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/AR/AR9/AR9.png"),
                        ModAPI.LoadSprite("Guns/AR/AR9/AR9_Tan.png")
                    };
                    //Set to zero so it always starts normal
                    
                    //Set the sprite
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/AR/AR9/AR9.png");
                    
                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.5304793f, 0.1632737f), new Vector2(0.4715286f, 0.2428571f), new Vector2(0.4133528f, 0.2403496f), new Vector2(0.4137934f, 0.2168645f), new Vector2(-0.2122993f, 0.2133818f), new Vector2(-0.2108256f, 0.2428571f), new Vector2(-0.3007253f, 0.2428571f), new Vector2(-0.3302007f, 0.1824327f), new Vector2(-0.6714286f, 0.1824327f), new Vector2(-0.6714286f, -0.07256829f), new Vector2(-0.5867439f, -0.06771078f), new Vector2(-0.371169f, 0.1185167f), new Vector2(-0.2988836f, 0.09812262f), new Vector2(-0.3265123f, -0.1247307f), new Vector2(-0.2444931f, -0.1247085f), new Vector2(-0.201882f, -0.04543547f), new Vector2(-0.1023309f, -0.04892458f), new Vector2(-0.1034191f, -0.2369621f), new Vector2(-0.01970917f, -0.231067f), new Vector2(0.04253279f, 0.09906755f), new Vector2(0.4985752f, 0.1034437f), new Vector2(0.6670072f, 0.1333268f), new Vector2(0.6699548f, 0.1618f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/AR/AR9/AR9_Bolt.png"), Position: new Vector2(-0.05707f, 0.143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.0537f, BoltCover: ModAPI.LoadSprite("Guns/AR/_Shared/AR_BoltCover.png"), BoltCoverPosition: new Vector2(-0.12852f, 0.1428f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().Automatic = false;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.1286f, 0.08573f);
                    Instance.GetComponent<FirearmBehaviour>().casingDirection = new Vector2(0.1f, 0.54f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.27f, -0.05f, 0), new Vector3(0.06f, 0.07f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.11f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.68f, 0.143f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.257f, 0.086f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1143f, 0.2285f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.11f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };
                }
            }
            );
            
            // Evo3
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} Scorpion EVO 3", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'EVO'  9x19mm Parabellum  Skins: 0                \n\nThe CZ Scorpion Evo 3 is a Czech made submachine gun chambered in 9x19mm, it's made mostly of polymer making it very light weight.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/Evo3/Evo3_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/Evo3/Evo3.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.4190484f, 0.1931021f), new Vector2(0.4199436f, 0.2568561f), new Vector2(0.3613906f, 0.1958315f), new Vector2(-0.08718289f, 0.1998046f), new Vector2(-0.09336469f, 0.25745f), new Vector2(-0.1327583f, 0.2552952f), new Vector2(-0.1738882f, 0.200033f), new Vector2(-0.4232648f, 0.1439622f), new Vector2(-0.6530272f, 0.1462582f), new Vector2(-0.6576192f, -0.1709522f), new Vector2(-0.6009632f, -0.1663183f), new Vector2(-0.5093466f, 0.02833346f), new Vector2(-0.2069586f, 0.06501484f), new Vector2(-0.1349744f, -0.00933592f), new Vector2(-0.2014862f, -0.1574441f), new Vector2(-0.09684009f, -0.2008275f), new Vector2(-0.05032349f, -0.04999974f), new Vector2(0.04948325f, -0.09083675f), new Vector2(0.1126132f, -0.05588338f), new Vector2(0.1502026f, -0.2527617f), new Vector2(0.2513599f, -0.2159863f), new Vector2(0.2190941f, -0.048148f), new Vector2(0.2799026f, 0.02492043f), new Vector2(0.5977896f, 0.02998671f), new Vector2(0.6023173f, 0.06124387f), new Vector2(0.6578571f, 0.06039805f), new Vector2(0.6551635f, 0.1089576f), new Vector2(0.6017725f, 0.1130831f), new Vector2(0.5028057f, 0.1974658f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/Evo3/Evo3_Bolt.png"), Position: new Vector2(0.1857f, 0.14286f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.05f, BoltCover: ModAPI.LoadSprite("Guns/SMG/Evo3/Evo3_BoltCover.png"), BoltCoverPosition: new Vector2(0.1f, 0.14286f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.05f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.1857f, 0.14286f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.108f, -0.071f, 0), new Vector3(0.353f, 0.02f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.12f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.665f, 0.0836f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.386f, 0.0146f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.0141f, 0.2138f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.11f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };
                }
            }
            );

            // Evo3 Carbine
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} CZ Scorpion EVO 3 Carbine", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'EVO'  9x19mm Parabellum  Skins: 0                \n\nThe CZ Scorpion Evo 3 is a Czech made submachine gun chambered in 9x19mm, it's made mostly of polymer making it very light weight.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/Evo3/Evo3_Carbine_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/Evo3/Evo3_Carbine.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.2289313f, 0.2090889f), new Vector2(-0.239929f, 0.2433612f), new Vector2(-0.3133238f, 0.2456055f), new Vector2(-0.3152952f, 0.2152106f), new Vector2(-0.6056502f, 0.1604214f), new Vector2(-0.8583004f, 0.1544701f), new Vector2(-0.8520013f, -0.1579886f), new Vector2(-0.7987242f, -0.1520807f), new Vector2(-0.7037063f, 0.04692415f), new Vector2(-0.3545285f, 0.06965873f), new Vector2(-0.2809686f, -8.881837E-05f), new Vector2(-0.3407974f, -0.148813f), new Vector2(-0.2440281f, -0.1871811f), new Vector2(-0.19547f, -0.04114103f), new Vector2(-0.0990539f, -0.07430755f), new Vector2(-0.02839171f, -0.03769223f), new Vector2(0.01053824f, -0.2307141f), new Vector2(0.1192951f, -0.1977492f), new Vector2(0.07296813f, -0.01990762f), new Vector2(0.1476524f, 0.03941132f), new Vector2(0.6562992f, 0.0405613f), new Vector2(0.6588807f, 0.09678487f), new Vector2(0.8557528f, 0.09806214f), new Vector2(0.853368f, 0.1297369f), new Vector2(0.6608589f, 0.1295156f), new Vector2(0.5717172f, 0.2143561f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/Evo3/Evo3_Bolt.png"), Position: new Vector2(0.04286f, 0.15714f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.05f, BoltCover: ModAPI.LoadSprite("Guns/SMG/Evo3/Evo3_BoltCover.png"), BoltCoverPosition: new Vector2(-0.0429f, 0.15714f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.05f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.04286f, 0.15714f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.25f, -0.054f, 0), new Vector3(0.323f, 0.044f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.14f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.865f, 0.1145f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.3f, 0.029f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1286f, 0.2285f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.11f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };
                }
            }
            );

            // APC9
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} APC9", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'APC'  .45 ACP  Skins: 1                \n\nThe B&T APC is a Swiss series of SMG's designed for law enforcement use, the gun can easily be modified to fire different calibers.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/APC9/APC9_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]

                    {
                        ModAPI.LoadSprite("Guns/SMG/APC9/APC9.png"),
                        ModAPI.LoadSprite("Guns/SMG/APC9/APC9_Mag.png"),
                    };

                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/APC9/APC9.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.128337f, 0.1851255f), new Vector2(-0.1599567f, 0.1304632f), new Vector2(-0.4676482f, 0.1311583f), new Vector2(-0.4742557f, 0.1827518f), new Vector2(-0.5256904f, 0.1509027f), new Vector2(-0.527131f, 0.01763844f), new Vector2(-0.4738567f, -0.01422311f), new Vector2(-0.4697329f, 0.1021988f), new Vector2(-0.1672538f, 0.1022443f), new Vector2(-0.1014468f, 0.06596824f), new Vector2(-0.1036884f, 0.01887809f), new Vector2(-0.07134759f, -0.0005774386f), new Vector2(-0.1245298f, -0.06141945f), new Vector2(-0.123756f, -0.122636f), new Vector2(-0.0523734f, -0.1589831f), new Vector2(-0.008967768f, -0.04235813f), new Vector2(0.09040028f, -0.04530738f), new Vector2(0.1350316f, -0.01644593f), new Vector2(0.1107114f, -0.2044351f), new Vector2(0.1703529f, -0.2114047f), new Vector2(0.2097555f, -0.004730433f), new Vector2(0.2390263f, 0.06830212f), new Vector2(0.4756467f, 0.07406905f), new Vector2(0.4752786f, 0.09987899f), new Vector2(0.5276359f, 0.1019847f), new Vector2(0.52733f, 0.1268097f), new Vector2(0.4750061f, 0.1246207f), new Vector2(0.4728429f, 0.1555751f), new Vector2(0.4334969f, 0.1825942f), };
                    
                    // sets up bolt sprite
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/APC9/APC9_Bolt.png"), Position: new Vector2(0.18571f, 0.1143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.05f, BoltCover: ModAPI.LoadSprite("Guns/SMG/APC9/APC9_BoltCover.png"), BoltCoverPosition: new Vector2(0.12857f, 0.1143f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.07f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.18571f, 0.1143f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.05f, -0.05f, 0), new Vector3(0.312f, 0.06f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.09f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.536f, 0.1143f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.343f, 0.0575f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.0571f, 0.2f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.11f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_45;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_3.wav")
                    };
                }
            }
            );

            // APC9 Stock
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} APC9 Stock", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'APC'  .45 ACP  Skins: 1                \n\nThe B&T APC is a Swiss series of SMG's designed for law enforcement use, the gun can easily be modified to fire different calibers.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/APC9/APC9_Stock_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]

                    {
                        ModAPI.LoadSprite("Guns/SMG/APC9/APC9_Stock.png"),
                        ModAPI.LoadSprite("Guns/SMG/APC9/APC9_Stock_Mag.png"),
                    };

                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/APC9/APC9_Stock.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.128337f, 0.1851255f), new Vector2(-0.1729214f, 0.1563926f), new Vector2(-0.4676481f, 0.1527661f), new Vector2(-0.4670531f, -0.03908865f), new Vector2(-0.4265172f, -0.0389725f), new Vector2(-0.2349584f, 0.06623128f), new Vector2(-0.1014468f, 0.06596824f), new Vector2(-0.1036884f, 0.01887809f), new Vector2(-0.07134759f, -0.0005774386f), new Vector2(-0.1245298f, -0.06141945f), new Vector2(-0.123756f, -0.122636f), new Vector2(-0.0523734f, -0.1589831f), new Vector2(-0.008967768f, -0.04235813f), new Vector2(0.09040028f, -0.04530738f), new Vector2(0.1350316f, -0.01644593f), new Vector2(0.1107114f, -0.2044351f), new Vector2(0.1703529f, -0.2114047f), new Vector2(0.2097555f, -0.004730433f), new Vector2(0.2390263f, 0.06830212f), new Vector2(0.4756467f, 0.07406905f), new Vector2(0.4752786f, 0.09987899f), new Vector2(0.5276359f, 0.1019847f), new Vector2(0.52733f, 0.1268097f), new Vector2(0.4750061f, 0.1246207f), new Vector2(0.4728429f, 0.1555751f), new Vector2(0.4334969f, 0.1825942f), };
                   
                    // sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/APC9/APC9_Bolt.png"), Position: new Vector2(0.18571f, 0.1143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.05f, BoltCover: ModAPI.LoadSprite("Guns/SMG/APC9/APC9_BoltCover.png"), BoltCoverPosition: new Vector2(0.12857f, 0.1143f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.07f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.18571f, 0.1143f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.05f, -0.05f, 0), new Vector3(0.312f, 0.06f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.09f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.536f, 0.1143f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.343f, 0.0575f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.0571f, 0.2f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.11f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_45;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_3.wav")
                    };
                }
            }
            );

            // FMG
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} Magpul FMG-9", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'FPG'  9x19mm Parabellum  Skins: 0              \n\nThe Magpul FMG-9 was a 2008 prototype 9x19mm submachine gun with a unique design that allowed it to be folded and easily concealable.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/FMG/FMG_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/FMG/FMG.png");
                    
                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.1294791f, 0.273167f), new Vector2(0.07868612f, 0.1975743f), new Vector2(0.06802806f, 0.1911795f), new Vector2(-0.5554044f, 0.1586544f), new Vector2(-0.5554043f, -0.06749781f), new Vector2(-0.4665033f, 0.04127395f), new Vector2(0.02065426f, 0.04307437f), new Vector2(-0.03651026f, -0.2537418f), new Vector2(0.03739262f, -0.2676294f), new Vector2(0.1104676f, -0.04369976f), new Vector2(0.2098634f, -0.04269311f), new Vector2(0.2770727f, 0.0437059f), new Vector2(0.530549f, 0.05029929f), new Vector2(0.5311465f, 0.09657057f), new Vector2(0.5565588f, 0.09563386f), new Vector2(0.5582133f, 0.1291527f), new Vector2(0.5313216f, 0.1305356f), new Vector2(0.5357166f, 0.1822474f), new Vector2(0.3877007f, 0.1887921f), new Vector2(0.3834855f, 0.237097f), new Vector2(0.4965652f, 0.2474011f), new Vector2(0.5020556f, 0.2733282f), };

                    // sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/FMG/FMG_Bolt.png"), Position: new Vector2(0.1429f, 0.12857f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.065f, BoltCover: ModAPI.LoadSprite("Guns/SMG/FMG/FMG_BoltCover.png"), BoltCoverPosition: new Vector2(0.0572f, 0.12857f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.07f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.1429f, 0.12857f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0.056f, -0.042f, 0), new Vector3(0.432f, 0.032f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.567f, 0.1144f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.3714f, 0.0287f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.2854f, 0.2855f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.11f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };

                }
            }
            );

            // MP5
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} MP5", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Navy'  9x19mm Parabellum  Skins: 0            \n\nThe Heckler & Koch MP5 is one of, if not the most iconic submachine gun ever built, it's often used by law enforcement and military alike.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/MP5/MP5_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/MP5/MP5.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.5962304f, -0.06904755f), new Vector2(-0.2566694f, 0.0733849f), new Vector2(-0.08312964f, 0.07805698f), new Vector2(-0.1470318f, -0.1250748f), new Vector2(-0.06041407f, -0.1535659f), new Vector2(-0.02857741f, -0.07014251f), new Vector2(0.09215137f, -0.05720136f), new Vector2(0.1096845f, 0.01548444f), new Vector2(0.2513228f, -0.2111315f), new Vector2(0.3103332f, -0.1727097f), new Vector2(0.2083033f, 0.004200423f), new Vector2(0.2156521f, 0.06538299f), new Vector2(0.5813021f, 0.1317064f), new Vector2(0.5799895f, 0.1555952f), new Vector2(0.5268061f, 0.1576115f), new Vector2(0.5280101f, 0.2464919f), new Vector2(0.4957055f, 0.2157593f), new Vector2(-0.03251306f, 0.2108439f), new Vector2(-0.04238227f, 0.2411427f), new Vector2(-0.09375428f, 0.2391252f), new Vector2(-0.1019745f, 0.222573f), new Vector2(-0.2559831f, 0.1523867f), new Vector2(-0.580706f, 0.1474923f), };

                    // sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/MP5/MP5_Bolt.png"), Position: new Vector2(0.12856f, 0.1714f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.05f, BoltCover: ModAPI.LoadSprite("Guns/SMG/MP5/MP5_BoltCover.png"), BoltCoverPosition: new Vector2(0.0714f, 0.1714f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.075f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.12856f, 0.1714f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.057f, -0.03f, 0), new Vector3(0.33f, 0.083f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.12f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.594f, 0.143f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.4f, 0.0857f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.0571f, 0.2285f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.11f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };
                }
            }
            );

            // MP5 Stock 1
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} MP5 Adjustable Stock", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
              //DescriptionOverride = "'Buzzsaw'  7.92x57mm Mauser  Skins: 0  \n\nThe MG42, or Maschinengewehr 42, was a German machine gun that terrorized Allied troops during World War II with a insane RPM of 1600.", //new item description
                DescriptionOverride = "'Navy'  9x19mm Parabellum  Skins: 0             \n\nThe Heckler & Koch MP5 is one of, if not the most iconic submachine gun ever built, it's often used by law enforcement and military alike.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/MP5/MP5_Stock1_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/MP5/MP5_Stock1.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.4710396f, -0.00633948f), new Vector2(-0.423103f, -0.04492893f), new Vector2(-0.3966426f, 0.09898975f), new Vector2(-0.08312964f, 0.07805698f), new Vector2(-0.1470318f, -0.1250748f), new Vector2(-0.06041407f, -0.1535659f), new Vector2(-0.02857741f, -0.07468224f), new Vector2(0.075758f, -0.06913608f), new Vector2(0.1186017f, 0.01226874f), new Vector2(0.2498366f, -0.2143112f), new Vector2(0.3103241f, -0.1640356f), new Vector2(0.2172205f, 0.00865905f), new Vector2(0.2156521f, 0.06538299f), new Vector2(0.5844547f, 0.1272298f), new Vector2(0.5846643f, 0.1526228f), new Vector2(0.5343903f, 0.160602f), new Vector2(0.5252268f, 0.2450237f), new Vector2(0.498822f, 0.2201819f), new Vector2(-0.03251306f, 0.2108439f), new Vector2(-0.04238227f, 0.2411427f), new Vector2(-0.09375428f, 0.2391252f), new Vector2(-0.1019745f, 0.222573f), new Vector2(-0.1877034f, 0.1626286f), new Vector2(-0.4121989f, 0.1577999f), new Vector2(-0.4189533f, 0.1859563f), new Vector2(-0.4743126f, 0.1869739f), };
                    
                    // Sets up gun bolt
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/MP5/MP5_Bolt.png"), Position: new Vector2(0.12856f, 0.1714f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.05f, BoltCover: ModAPI.LoadSprite("Guns/SMG/MP5/MP5_BoltCover.png"), BoltCoverPosition: new Vector2(0.0714f, 0.1714f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.075f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.12856f, 0.1714f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.057f, -0.03f, 0), new Vector3(0.33f, 0.083f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.11f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.594f, 0.143f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.4f, 0.0857f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.0571f, 0.2285f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.11f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };
                }
            }
            );

            // MP5 Stock 1 Folded
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} MP5 Adjustable Stock Folded", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Navy'  9x19mm Parabellum  Skins: 0             \n\nThe Heckler & Koch MP5 is one of, if not the most iconic submachine gun ever built, it's often used by law enforcement and military alike.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/MP5/MP5_Stock1_Folded_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/MP5/MP5_Stock1_Folded.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.5248995f, 0.1558852f), new Vector2(0.5285602f, 0.2454144f), new Vector2(0.4951259f, 0.2208705f), new Vector2(-0.03803438f, 0.2118712f), new Vector2(-0.07707238f, 0.2424462f), new Vector2(-0.1074127f, 0.2075276f), new Vector2(-0.2027236f, 0.182501f), new Vector2(-0.2724668f, 0.1830122f), new Vector2(-0.273897f, -0.01110535f), new Vector2(-0.2238428f, -0.04576551f), new Vector2(-0.213749f, 0.06354306f), new Vector2(-0.1041702f, 0.07211418f), new Vector2(-0.1037117f, -0.01259772f), new Vector2(-0.1632724f, -0.09407669f), new Vector2(-0.05220792f, -0.1418688f), new Vector2(-0.0371933f, -0.07176675f), new Vector2(0.06499644f, -0.06870452f), new Vector2(0.1235293f, 0.01027271f), new Vector2(0.2444144f, -0.2091943f), new Vector2(0.3022548f, -0.1647159f), new Vector2(0.2115892f, 0.003411397f), new Vector2(0.2180653f, 0.07089905f), new Vector2(0.497023f, 0.09500322f), new Vector2(0.5029461f, 0.1265188f), new Vector2(0.5806229f, 0.1259759f), new Vector2(0.5862334f, 0.1587002f), };

                    // Sets up gun bolt
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/MP5/MP5_Bolt.png"), Position: new Vector2(0.12856f, 0.1714f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.05f, BoltCover: ModAPI.LoadSprite("Guns/SMG/MP5/MP5_BoltCover.png"), BoltCoverPosition: new Vector2(0.0714f, 0.1714f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.075f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.12856f, 0.1714f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.057f, -0.03f, 0), new Vector3(0.33f, 0.083f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.11f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.594f, 0.143f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.4f, 0.0857f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.0571f, 0.2285f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.11f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };
                }
            }
            );

            // MP5K
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} MP5K", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Navy'  9x19mm Parabellum  Skins: 0             \n\nThe Heckler & Koch MP5K is a shortened version of the MP5 designed to be used in close quarters combat and clandestine uses.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/MP5/MP5K_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/MP5/MP5K.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.4894022f, 0.2161673f), new Vector2(-0.04341603f, 0.2126872f), new Vector2(-0.04997462f, 0.2456484f), new Vector2(-0.08500591f, 0.2458548f), new Vector2(-0.1666589f, 0.1599686f), new Vector2(-0.4935892f, 0.1597744f), new Vector2(-0.4945884f, -0.07231894f), new Vector2(-0.4474337f, -0.06736973f), new Vector2(-0.2937856f, 0.09874669f), new Vector2(-0.1569543f, 0.09458013f), new Vector2(-0.155717f, 0.07231613f), new Vector2(-0.091167f, 0.06776958f), new Vector2(-0.1626918f, -0.1132087f), new Vector2(-0.0506321f, -0.1605176f), new Vector2(-0.03962786f, -0.06942355f), new Vector2(0.06763208f, -0.06730749f), new Vector2(0.1184325f, 0.01313481f), new Vector2(0.1644385f, -0.09196828f), new Vector2(0.2571674f, -0.2110222f), new Vector2(0.306151f, -0.1499812f), new Vector2(0.2065231f, 0.04151476f), new Vector2(0.2405095f, 0.09961564f), new Vector2(0.3599738f, 0.1026815f), new Vector2(0.3607628f, -0.04382649f), new Vector2(0.4104975f, -0.04389503f), new Vector2(0.413751f, 0.09353929f), new Vector2(0.4670484f, 0.09839228f), new Vector2(0.4865466f, 0.06123913f), new Vector2(0.5037593f, 0.1280665f), new Vector2(0.5845268f, 0.128423f), new Vector2(0.5841068f, 0.1590002f), new Vector2(0.5303968f, 0.1616363f), new Vector2(0.5255145f, 0.2493763f), };

                    // Sets up gun bolt
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/MP5/MP5_Bolt.png"), Position: new Vector2(0.12856f, 0.1714f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.05f, BoltCover: ModAPI.LoadSprite("Guns/SMG/MP5/MP5_BoltCover.png"), BoltCoverPosition: new Vector2(0.0714f, 0.1714f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.075f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.12856f, 0.1714f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.057f, -0.03f, 0), new Vector3(0.33f, 0.083f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.09f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.594f, 0.143f);
                    Instance.transform.Find("BarrelAttachment").gameObject.SetActive(false); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.0571f, 0.2285f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.11f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };
                }
            }
            );

            // MP5K Folded
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} MP5K Folded", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Navy'  9x19mm Parabellum  Skins: 0             \n\nThe Heckler & Koch MP5K is a shortened version of the MP5 designed to be used in close quarters combat and clandestine uses.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/MP5/MP5K_Folded_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/MP5/MP5K_Folded.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.4996355f, 0.2427222f), new Vector2(0.4978562f, 0.2168663f), new Vector2(-0.04434782f, 0.2152012f), new Vector2(-0.03949869f, 0.2410523f), new Vector2(-0.09694347f, 0.2408683f), new Vector2(-0.1544698f, 0.1812557f), new Vector2(-0.1586982f, 0.08797278f), new Vector2(-0.09035999f, 0.05680037f), new Vector2(-0.1585754f, -0.1126606f), new Vector2(-0.04950155f, -0.1473351f), new Vector2(-0.03546875f, -0.06545524f), new Vector2(0.06550138f, -0.07124958f), new Vector2(0.1219653f, 0.01871957f), new Vector2(0.2517337f, -0.2130244f), new Vector2(0.3069955f, -0.1586089f), new Vector2(0.2564856f, -0.07296039f), new Vector2(0.3017144f, -0.06948221f), new Vector2(0.2980823f, 0.09950606f), new Vector2(0.3578072f, 0.1021746f), new Vector2(0.3588533f, -0.0422349f), new Vector2(0.4154414f, -0.04377372f), new Vector2(0.4154364f, 0.09831703f), new Vector2(0.4721105f, 0.09774281f), new Vector2(0.4709121f, 0.07173122f), new Vector2(0.498745f, 0.07118651f), new Vector2(0.4998151f, 0.1284781f), new Vector2(0.5861886f, 0.1308146f), new Vector2(0.5849564f, 0.1569215f), new Vector2(0.5303911f, 0.1604072f), new Vector2(0.52895f, 0.2434774f), };

                    // Sets up gun bolt
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/MP5/MP5_Bolt.png"), Position: new Vector2(0.12856f, 0.1714f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.05f, BoltCover: ModAPI.LoadSprite("Guns/SMG/MP5/MP5_BoltCover.png"), BoltCoverPosition: new Vector2(0.0714f, 0.1714f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.075f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.12856f, 0.1714f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.057f, -0.03f, 0), new Vector3(0.33f, 0.083f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.09f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.594f, 0.143f);
                    Instance.transform.Find("BarrelAttachment").gameObject.SetActive(false); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.0571f, 0.2285f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.11f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };
                }
            }
            );

            // MP5K Stockless
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} MP5K Stockless", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Navy'  9x19mm Parabellum  Skins: 0             \n\nThe Heckler & Koch MP5K is a shortened version of the MP5 designed to be used in close quarters combat and clandestine uses.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/MP5/MP5K_Stockless_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/MP5/MP5K_Stockless.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.500771f, 0.2439826f), new Vector2(0.5003494f, 0.2132116f), new Vector2(-0.04165547f, 0.215478f), new Vector2(-0.04313669f, 0.2430299f), new Vector2(-0.09747724f, 0.2428571f), new Vector2(-0.1299657f, 0.2080369f), new Vector2(-0.1275167f, 0.1001215f), new Vector2(-0.09939629f, 0.09900366f), new Vector2(-0.09894198f, 0.02713576f), new Vector2(-0.1591874f, -0.112825f), new Vector2(-0.05146858f, -0.1546143f), new Vector2(-0.0348395f, -0.07176638f), new Vector2(0.07612335f, -0.07081206f), new Vector2(0.1315217f, 0.0189652f), new Vector2(0.1747396f, -0.1013521f), new Vector2(0.2513041f, -0.2126344f), new Vector2(0.3045493f, -0.1584733f), new Vector2(0.236491f, -0.04365307f), new Vector2(0.208997f, 0.04312005f), new Vector2(0.2505144f, 0.09820523f), new Vector2(0.3554389f, 0.102469f), new Vector2(0.3560904f, -0.04377128f), new Vector2(0.41417f, -0.04164699f), new Vector2(0.4169185f, 0.09921093f), new Vector2(0.4705248f, 0.09956621f), new Vector2(0.4708697f, 0.06865095f), new Vector2(0.499041f, 0.07196932f), new Vector2(0.4998256f, 0.1272987f), new Vector2(0.5858291f, 0.1277393f), new Vector2(0.5849327f, 0.1570273f), new Vector2(0.5297236f, 0.1571068f), new Vector2(0.5269759f, 0.2440319f), };
                   
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/MP5/MP5_Bolt.png"), Position: new Vector2(0.12856f, 0.1714f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.05f, BoltCover: ModAPI.LoadSprite("Guns/SMG/MP5/MP5_BoltCover.png"), BoltCoverPosition: new Vector2(0.0714f, 0.1714f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.075f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.12856f, 0.1714f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.057f, -0.03f, 0), new Vector3(0.33f, 0.083f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.08f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.594f, 0.143f);
                    Instance.transform.Find("BarrelAttachment").gameObject.SetActive(false); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.0571f, 0.2285f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.11f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };
                }
            }
            );

            // MP5SD
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} MP5SD", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Ninja Gun'  9x19mm Parabellum  Skins: 0        \n\nThe HK MP5SD is a integrally suppressed variant of the MP5, it features a very quiet report making it ideal for clandestine operations.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/MP5SD/MP5SD_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/MP5SD/MP5SD.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.4315801f, 0.1846023f), new Vector2(0.4264124f, 0.2169671f), new Vector2(-0.1363924f, 0.2212137f), new Vector2(-0.135528f, 0.2487266f), new Vector2(-0.1966053f, 0.2445657f), new Vector2(-0.2029809f, 0.2233395f), new Vector2(-0.3612606f, 0.156454f), new Vector2(-0.6334651f, 0.1597361f), new Vector2(-0.6961238f, 0.1573409f), new Vector2(-0.6857745f, -0.07166284f), new Vector2(-0.3557148f, 0.06091069f), new Vector2(-0.2624892f, 0.09403685f), new Vector2(-0.1955202f, 0.07200777f), new Vector2(-0.2135375f, 0.01105753f), new Vector2(-0.2466933f, -0.1011044f), new Vector2(-0.154327f, -0.1441359f), new Vector2(-0.1390025f, -0.06995777f), new Vector2(-0.0205796f, -0.06591194f), new Vector2(0.01256827f, 0.01964922f), new Vector2(0.1534205f, -0.2149885f), new Vector2(0.2010739f, -0.1670509f), new Vector2(0.1068336f, 0.06414545f), new Vector2(0.6522643f, 0.1014563f), new Vector2(0.6521818f, 0.1809364f), };

                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/MP5/MP5_Bolt.png"), Position: new Vector2(0.02856f, 0.1714f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.05f, BoltCover: ModAPI.LoadSprite("Guns/SMG/MP5/MP5_BoltCover.png"), BoltCoverPosition: new Vector2(-0.0285f, 0.1714f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.085f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.02856f, 0.1714f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.156f, -0.03f, 0), new Vector3(0.224f, 0.082f, 0) };
                    Instance.transform.GetChild(4).GetChild(0).gameObject.SetActive(false);
                    Instance.GetComponent<Rigidbody2D>().mass = 0.12f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.665f, 0.1431f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2713f, 0.0576f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.043f, 0.2286f, 0f); // Sets position of scope
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.12f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };
                }
            }
            );

            // MP5SD Stock 1
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} MP5SD Adjustable Stock", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Ninja Gun'  9x19mm Parabellum  Skins: 0        \n\nThe HK MP5SD is a integrally suppressed variant of the MP5, it features a very quiet report making it ideal for clandestine operations.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/MP5SD/MP5SD_Stock1_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/MP5SD/MP5SD_Stock1.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.4315801f, 0.1846023f), new Vector2(0.4264124f, 0.2169671f), new Vector2(-0.1363924f, 0.2212137f), new Vector2(-0.1887071f, 0.236909f), new Vector2(-0.28376f, 0.1618426f), new Vector2(-0.5072836f, 0.1612971f), new Vector2(-0.5178436f, 0.1889524f), new Vector2(-0.5684684f, 0.1818941f), new Vector2(-0.5676075f, -0.008105293f), new Vector2(-0.5365775f, -0.04211886f), new Vector2(-0.4886626f, 0.09340905f), new Vector2(-0.2624892f, 0.09403685f), new Vector2(-0.1955202f, 0.07200777f), new Vector2(-0.2135375f, 0.01105753f), new Vector2(-0.2466933f, -0.1011044f), new Vector2(-0.154327f, -0.1441359f), new Vector2(-0.1390025f, -0.06995777f), new Vector2(-0.0205796f, -0.06591194f), new Vector2(0.01256827f, 0.01964922f), new Vector2(0.1534205f, -0.2149885f), new Vector2(0.2010739f, -0.1670509f), new Vector2(0.1068336f, 0.06414545f), new Vector2(0.6522643f, 0.1014563f), new Vector2(0.6521818f, 0.1809364f), };

                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/MP5/MP5_Bolt.png"), Position: new Vector2(0.02856f, 0.1714f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.05f, BoltCover: ModAPI.LoadSprite("Guns/SMG/MP5/MP5_BoltCover.png"), BoltCoverPosition: new Vector2(-0.0285f, 0.1714f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.085f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.02856f, 0.1714f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.156f, -0.03f, 0), new Vector3(0.224f, 0.082f, 0) };
                    Instance.transform.GetChild(4).GetChild(0).gameObject.SetActive(false);
                    Instance.GetComponent<Rigidbody2D>().mass = 0.11f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.665f, 0.1431f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2713f, 0.0576f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.043f, 0.2286f, 0f); // Sets position of scope
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.12f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };
                }
            }
            );

            // MP5SD Stock 1 Folded
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} MP5SD Adjustable Stock Folded", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Ninja Gun'  9x19mm Parabellum  Skins: 0        \n\nThe HK MP5SD is a integrally suppressed variant of the MP5, it features a very quiet report making it ideal for clandestine operations.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/MP5SD/MP5SD_Stock1_Folded_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/MP5SD/MP5SD_Stock1_Folded.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1483338f, 0.217109f), new Vector2(-0.1673691f, 0.2413476f), new Vector2(-0.2086689f, 0.221806f), new Vector2(-0.2848935f, 0.1777728f), new Vector2(-0.3724668f, 0.1792719f), new Vector2(-0.3313234f, -0.04867387f), new Vector2(-0.3168195f, 0.06621067f), new Vector2(-0.2088358f, 0.08022355f), new Vector2(-0.194463f, 0.01064061f), new Vector2(-0.25717f, -0.1150876f), new Vector2(-0.1479445f, -0.1526188f), new Vector2(-0.1332181f, -0.06816179f), new Vector2(-0.03113458f, -0.06470659f), new Vector2(0.01713587f, 0.01392031f), new Vector2(0.134763f, -0.1998821f), new Vector2(0.204992f, -0.1608139f), new Vector2(0.1061208f, 0.03439774f), new Vector2(0.1187989f, 0.08084306f), new Vector2(0.4273262f, 0.07011612f), new Vector2(0.4236194f, 0.09960434f), new Vector2(0.6544408f, 0.1045723f), new Vector2(0.656311f, 0.1857143f), new Vector2(0.4312937f, 0.1855068f), new Vector2(0.4137802f, 0.2403806f), new Vector2(0.3920999f, 0.216675f), };
                   
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/MP5/MP5_Bolt.png"), Position: new Vector2(0.02856f, 0.1714f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.05f, BoltCover: ModAPI.LoadSprite("Guns/SMG/MP5/MP5_BoltCover.png"), BoltCoverPosition: new Vector2(-0.0285f, 0.1714f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.085f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.02856f, 0.1714f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.156f, -0.03f, 0), new Vector3(0.224f, 0.082f, 0) };
                    Instance.transform.GetChild(4).GetChild(0).gameObject.SetActive(false);
                    Instance.GetComponent<Rigidbody2D>().mass = 0.11f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.665f, 0.1431f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2713f, 0.0576f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.043f, 0.2286f, 0f); // Sets position of scope
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.12f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };

                }
            }
            );

            // UZI
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} UZI", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'The Israeli Typewriter'  9x19mm Parabellum  Skins: 0 \n\nThe UZI is a israeli made machine pistol, originally developed for military use but later became popular amongst criminals in the 1980's.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/UZI/UZI_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/UZI/UZI.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.4145803f, 0.2524493f), new Vector2(0.4150143f, 0.2049352f), new Vector2(-0.2203756f, 0.198028f), new Vector2(-0.2158282f, 0.2571429f), new Vector2(-0.2991953f, 0.2571429f), new Vector2(-0.334525f, 0.1736919f), new Vector2(-0.6954527f, 0.1146609f), new Vector2(-0.6924213f, -0.146492f), new Vector2(-0.519852f, 0.08087286f), new Vector2(-0.07627004f, 0.08193241f), new Vector2(-0.01314516f, -0.2541113f), new Vector2(0.07157566f, -0.2525956f), new Vector2(0.07251191f, -0.02677406f), new Vector2(0.156805f, -0.02398173f), new Vector2(0.1930599f, 0.05592675f), new Vector2(0.4453514f, 0.05608333f), new Vector2(0.444179f, 0.08557848f), new Vector2(0.5311342f, 0.08603547f), new Vector2(0.5342734f, 0.1124451f), new Vector2(0.6968023f, 0.1138776f), new Vector2(0.7010698f, 0.1460889f), new Vector2(0.5314438f, 0.1430484f), new Vector2(0.5315902f, 0.1700209f), new Vector2(0.4673333f, 0.1703648f), new Vector2(0.4726351f, 0.2571429f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/UZI/UZI_Bolt.png"), Position: new Vector2(0f, 0.1571f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.08f, BoltCover: ModAPI.LoadSprite("Guns/SMG/UZI/UZI_BoltCover.png"), BoltCoverPosition: new Vector2(-0.0857f, 0.1571f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0f, 0.1571f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0.02f, -0.03f, 0), new Vector3(0.329f, 0.068f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.11f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.706f, 0.1286f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.3143f, 0.043f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1144f, 0.2145f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.1f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };
                }
            }
            );

            // UZI Folded
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} UZI Folded", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'The Israeli Typewriter'  9x19mm Parabellum  Skins: 0  \n\nThe UZI is a israeli made machine pistol, originally developed for military use but later became popular amongst criminals in the 1980's.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/UZI/UZI_Folded_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/UZI/UZI_Folded.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.4145803f, 0.2524493f), new Vector2(0.4150143f, 0.2049352f), new Vector2(-0.2203756f, 0.198028f), new Vector2(-0.2158282f, 0.2571429f), new Vector2(-0.2991953f, 0.2571429f), new Vector2(-0.334525f, 0.1736919f), new Vector2(-0.381373f, 0.07487746f), new Vector2(-0.3825293f, -0.1506797f), new Vector2(-0.2057723f, 0.05993421f), new Vector2(-0.07627004f, 0.08193241f), new Vector2(-0.01314516f, -0.2541113f), new Vector2(0.07157566f, -0.2525956f), new Vector2(0.07251191f, -0.02677406f), new Vector2(0.156805f, -0.02398173f), new Vector2(0.1930599f, 0.05592675f), new Vector2(0.4453514f, 0.05608333f), new Vector2(0.444179f, 0.08557848f), new Vector2(0.5311342f, 0.08603547f), new Vector2(0.5342734f, 0.1124451f), new Vector2(0.6968023f, 0.1138776f), new Vector2(0.7010698f, 0.1460889f), new Vector2(0.5314438f, 0.1430484f), new Vector2(0.5315902f, 0.1700209f), new Vector2(0.4673333f, 0.1703648f), new Vector2(0.4726351f, 0.2571429f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/UZI/UZI_Bolt.png"), Position: new Vector2(0f, 0.1571f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.08f, BoltCover: ModAPI.LoadSprite("Guns/SMG/UZI/UZI_BoltCover.png"), BoltCoverPosition: new Vector2(-0.0857f, 0.1571f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0f, 0.1571f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0.02f, -0.03f, 0), new Vector3(0.329f, 0.068f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.11f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.706f, 0.1286f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.3143f, 0.043f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1144f, 0.2145f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.1f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };
                }
            }
            );

            // UZI Mini
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} UZI Mini", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Mini'  9x19mm Parabellum  Skins: 0             \n\nThe Mini UZI is a smaller variant of the UZI, introduced in 1980 it has a much shorter bolt resulting in a even higher firerate.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/UZI/UZI_Mini_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/UZI/UZI_Mini.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.4140835f, 0.1694647f), new Vector2(0.3546532f, 0.1711144f), new Vector2(0.3561353f, 0.2611392f), new Vector2(0.3067834f, 0.2592388f), new Vector2(0.3005624f, 0.2072018f), new Vector2(-0.1271789f, 0.1976214f), new Vector2(-0.174904f, 0.2571429f), new Vector2(-0.2828652f, 0.150491f), new Vector2(-0.5916151f, 0.0920025f), new Vector2(-0.6481562f, 0.1130077f), new Vector2(-0.640301f, -0.08443625f), new Vector2(-0.5778592f, 0.05322796f), new Vector2(-0.2799758f, 0.09947971f), new Vector2(-0.0738087f, 0.07657643f), new Vector2(-0.006422993f, -0.2504164f), new Vector2(0.07544959f, -0.2540008f), new Vector2(0.07442191f, -0.04118501f), new Vector2(0.1789757f, -0.01732784f), new Vector2(0.1835784f, 0.05729595f), new Vector2(0.412101f, 0.08234191f), new Vector2(0.411821f, 0.1110592f), new Vector2(0.502157f, 0.1105577f), new Vector2(0.4958729f, 0.1428572f), new Vector2(0.4164427f, 0.1424581f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/UZI/UZI_Bolt.png"), Position: new Vector2(0f, 0.1571f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.08f, BoltCover: ModAPI.LoadSprite("Guns/SMG/UZI/UZI_BoltCover.png"), BoltCoverPosition: new Vector2(-0.0857f, 0.1571f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.06f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0f, 0.1571f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0.02f, -0.03f, 0), new Vector3(0.329f, 0.068f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.09f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.507f, 0.128f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.257f, 0.043f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0283f, 0.214f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.1f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };
                }
            }
            );

            // UZI Mini Folded
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} UZI Mini Folded", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Mini'  9x19mm Parabellum  Skins: 0             \n\nThe Mini UZI is a smaller variant of the UZI, introduced in 1980 it has a much shorter bolt resulting in a even higher firerate.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/UZI/UZI_Mini_Folded_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/UZI/UZI_Mini_Folded.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.3015116f, 0.2503554f), new Vector2(0.2977579f, 0.2028413f), new Vector2(-0.1240578f, 0.2001219f), new Vector2(-0.1341675f, 0.2529551f), new Vector2(-0.2133469f, 0.2508613f), new Vector2(-0.2675214f, 0.1506594f), new Vector2(-0.2641166f, 0.08115906f), new Vector2(-0.07263723f, 0.07755157f), new Vector2(-0.001379877f, -0.2514762f), new Vector2(0.07061791f, -0.2499578f), new Vector2(0.07867597f, -0.03113629f), new Vector2(0.1669272f, -0.03006779f), new Vector2(0.1930198f, 0.05939032f), new Vector2(0.2483965f, 0.05279282f), new Vector2(0.2950001f, -0.08679768f), new Vector2(0.2956592f, 0.06011447f), new Vector2(0.3343765f, 0.06236492f), new Vector2(0.3352979f, 0.08139075f), new Vector2(0.4117839f, 0.08603547f), new Vector2(0.4149231f, 0.1124451f), new Vector2(0.4978852f, 0.1138776f), new Vector2(0.4937772f, 0.143995f), new Vector2(0.4162812f, 0.1430484f), new Vector2(0.410146f, 0.1721147f), new Vector2(0.3500768f, 0.1724586f), new Vector2(0.351191f, 0.255049f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/UZI/UZI_Bolt.png"), Position: new Vector2(0f, 0.1571f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.08f, BoltCover: ModAPI.LoadSprite("Guns/SMG/UZI/UZI_BoltCover.png"), BoltCoverPosition: new Vector2(-0.0857f, 0.1571f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.06f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0f, 0.1571f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0.02f, -0.03f, 0), new Vector3(0.329f, 0.068f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.09f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.507f, 0.128f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.257f, 0.043f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0283f, 0.214f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.1f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };
                }
            }
            );

            // UZI Micro
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag}  UZI Micro", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Micro'  9x19mm Parabellum  Skins: 0             \n\nThe Micro UZI is even further scaled down UZI introduced in 1986, it features an even shorter closed bolt resulting in a even higher firerate.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/UZI/UZI_Micro_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/UZI/UZI_Micro.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.0681881f, -0.2463266f), new Vector2(0.07940951f, -0.02613266f), new Vector2(0.1782296f, -0.01473217f), new Vector2(0.1817124f, 0.05146365f), new Vector2(0.3801978f, 0.08746936f), new Vector2(0.3836002f, 0.1082063f), new Vector2(0.4656625f, 0.1178711f), new Vector2(0.4695679f, 0.1392035f), new Vector2(0.381243f, 0.1429875f), new Vector2(0.382765f, 0.1730081f), new Vector2(0.325902f, 0.1693026f), new Vector2(0.325867f, 0.256459f), new Vector2(0.2685316f, 0.2506672f), new Vector2(0.2713869f, 0.2012522f), new Vector2(-0.1016283f, 0.2023073f), new Vector2(-0.1033214f, 0.2571515f), new Vector2(-0.1595573f, 0.2583164f), new Vector2(-0.1643995f, 0.2069338f), new Vector2(-0.2205049f, 0.1440742f), new Vector2(-0.5848374f, 0.1030019f), new Vector2(-0.5855801f, -0.100103f), new Vector2(-0.5294483f, 0.04707608f), new Vector2(-0.2157711f, 0.1071896f), new Vector2(-0.1445078f, 0.05484304f), new Vector2(-0.07682389f, 0.05653434f), new Vector2(-0.001444817f, -0.255854f), };

                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/UZI/UZI_Bolt.png"), Position: new Vector2(0f, 0.1571f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.08f, BoltCover: ModAPI.LoadSprite("Guns/SMG/UZI/UZI_BoltCover.png"), BoltCoverPosition: new Vector2(-0.0857f, 0.1571f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.05f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0f, 0.1571f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0.02f, -0.03f, 0), new Vector3(0.329f, 0.068f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.075f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.479f, 0.128f);
                    Instance.transform.Find("BarrelAttachment").gameObject.SetActive(false); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0f, 0.214f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.1f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };
                }
            }
            );

            // UZI Micro Folded
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag}  UZI Micro Folded", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Micro'  9x19mm Parabellum  Skins: 0             \n\nThe Micro UZI is even further scaled down UZI introduced in 1986, it features an even shorter closed bolt resulting in a even higher firerate.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/UZI/UZI_Micro_Folded_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/UZI/UZI_Micro_Folded.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.3302987f, 0.176806f), new Vector2(0.3261288f, 0.2561212f), new Vector2(0.2728983f, 0.2559757f), new Vector2(0.2679666f, 0.2060692f), new Vector2(-0.09891221f, 0.2040018f), new Vector2(-0.09890991f, 0.2562927f), new Vector2(-0.1551373f, 0.2562218f), new Vector2(-0.1618766f, 0.2047963f), new Vector2(-0.2121295f, 0.1616301f), new Vector2(-0.2065905f, 0.09462646f), new Vector2(-0.07298574f, 0.05335768f), new Vector2(-0.0168539f, -0.2487674f), new Vector2(0.06697251f, -0.2508613f), new Vector2(0.06850077f, -0.04162982f), new Vector2(0.1792632f, -0.008720748f), new Vector2(0.1910445f, 0.05391214f), new Vector2(0.3838553f, 0.02656987f), new Vector2(0.3873448f, -0.09405358f), new Vector2(0.4186428f, -0.09250207f), new Vector2(0.4117226f, 0.05117849f), new Vector2(0.3579497f, 0.0583734f), new Vector2(0.3868266f, 0.110515f), new Vector2(0.4801442f, 0.1193503f), new Vector2(0.4759565f, 0.1440742f), };

                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/UZI/UZI_Bolt.png"), Position: new Vector2(0f, 0.1571f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.08f, BoltCover: ModAPI.LoadSprite("Guns/SMG/UZI/UZI_BoltCover.png"), BoltCoverPosition: new Vector2(-0.0857f, 0.1571f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.05f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0f, 0.1571f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0.02f, -0.03f, 0), new Vector3(0.329f, 0.068f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.075f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.479f, 0.128f);
                    Instance.transform.Find("BarrelAttachment").gameObject.SetActive(false); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0f, 0.214f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.1f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };
                }
            }
            );

            // UMP
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} HK UMP", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'UMP'  9x19mm Parabellum  Skins: 0              \n\nThe HK UMP is a .45 ACP German submachine gun manufactured by Heckler & Koch as a cheaper and lighter alternative to the expensive MP5.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/UMP/UMP_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/UMP/UMP.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.6345519f, 0.1852863f), new Vector2(0.7129683f, 0.1819839f), new Vector2(0.7061721f, 0.2153788f), new Vector2(0.6350232f, 0.214742f), new Vector2(0.6358547f, 0.2771856f), new Vector2(-0.6343284f, 0.2447314f), new Vector2(-0.6289194f, 0.01393775f), new Vector2(-0.2044308f, 0.1489476f), new Vector2(-0.08212754f, 0.1232236f), new Vector2(-0.1506639f, -0.07076694f), new Vector2(-0.05291209f, -0.07600732f), new Vector2(-0.03720088f, 0.02485825f), new Vector2(0.2328022f, 0.03688645f), new Vector2(0.3065211f, -0.2713645f), new Vector2(0.3899117f, -0.2578437f), new Vector2(0.3110989f, 0.1251709f), new Vector2(0.6250366f, 0.1282234f), };

                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/UMP/UMP_Bolt.png"), Position: new Vector2(0.2429f, 0.2143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.1f, BoltCover: ModAPI.LoadSprite("Guns/SMG/UMP/UMP_BoltCover.png"), BoltCoverPosition: new Vector2(0.1f, 0.2143f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.085f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.2429f, 0.1857f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.05f, 0.024f, 0), new Vector3(0.45f, 0.097f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.13f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.719f, 0.2f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.4717f, 0.143f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.0427f, 0.2858f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.12f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_45;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_3.wav")
                    };
                }
            }
            );

            // Vector
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} KRISS Vector", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Super V'  9x19mm Parabellum  Skins: 0          \n\nThe KRISS Vector is an American made .45 submachine gun with a unique recoil mitigation system that reduces the felt recoil of the weapon.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/Vector/Vector_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/Vector/Vector.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.03814831f, 0.2428571f), new Vector2(-0.1356266f, 0.1944095f), new Vector2(-0.354033f, 0.1859345f), new Vector2(-0.4251365f, 0.1050246f), new Vector2(-0.5528686f, 0.1001524f), new Vector2(-0.550019f, -0.1287238f), new Vector2(-0.4714286f, -0.1301485f), new Vector2(-0.3643428f, -0.03603801f), new Vector2(-0.3540648f, 0.0549183f), new Vector2(-0.2864726f, 0.1314785f), new Vector2(-0.0758386f, 0.1393773f), new Vector2(-0.1315803f, -0.03599694f), new Vector2(0.02341997f, -0.09673734f), new Vector2(0.1587286f, -0.1026623f), new Vector2(0.1182146f, -0.2400831f), new Vector2(0.2104685f, -0.2385829f), new Vector2(0.3249066f, 0.06654491f), new Vector2(0.4973465f, 0.06728479f), new Vector2(0.4970932f, 0.09781078f), new Vector2(0.5620878f, 0.09905522f), new Vector2(0.5594872f, 0.1291649f), new Vector2(0.5062612f, 0.1277175f), new Vector2(0.495878f, 0.2442819f), };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.05f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.28f, 0.16f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.041f, 0.061f, 0), new Vector3(0.311f, 0.019f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.13f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.565f, 0.1144f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.4f, 0.0571f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.143f, 0.2287f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_45;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_3.wav")
                    };
                }
            }
            );

            // AAC
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} AAC Honey Badger", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Honey Badger'  9x19mm Parabellum  Skins: 1     \n\nThe AAC Honey Badger is a PDW chambered in .300 AAC Blackout, it was designed as a replacement for the HK MP5 for use in CQB.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/AAC/AAC_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/SMG/AAC/AAC_Tan.png"),
                        ModAPI.LoadSprite("Guns/SMG/AAC/AAC.png")
                    };
                    //Set to zero so it always starts normal
                    
                    
                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/AAC/AAC_Tan.png");

                    //Set the sprite for the bolt
                    var boltCover = CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/AAC/AAC_Bolt.png"), Position: new Vector2(0f, 0.1142f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.07f, BoltCover: ModAPI.LoadSprite("Guns/SMG/AAC/AAC_Tan_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1143f, 0.1142f));
                    //Set the sprite for the bolt cover and the other skins
                    boltCover.AddComponent<BetterRandomSpriteChildBehaviour>().Sprites = new Sprite[]
                    {
                      ModAPI.LoadSprite("Guns/SMG/AAC/AAC_Tan_BoltCover.png"),
                      ModAPI.LoadSprite("Guns/SMG/AAC/AAC_BoltCover.png")
                    };

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.4000135f, 0.1533678f), new Vector2(0.3983062f, 0.1840419f), new Vector2(-0.2596299f, 0.1792633f), new Vector2(-0.2599631f, 0.1494057f), new Vector2(-0.429902f, 0.1495279f), new Vector2(-0.4285277f, 0.1251938f), new Vector2(-0.6302937f, 0.1288826f), new Vector2(-0.6268492f, -0.09858893f), new Vector2(-0.5713409f, -0.03072187f), new Vector2(-0.5685552f, 0.07171413f), new Vector2(-0.2635375f, 0.07258081f), new Vector2(-0.2251916f, 0.03618889f), new Vector2(-0.2856116f, -0.1032633f), new Vector2(-0.2194429f, -0.1547366f), new Vector2(-0.1654043f, -0.04092395f), new Vector2(-0.1036286f, -0.07052214f), new Vector2(-0.03689218f, -0.03624652f), new Vector2(-0.01978643f, -0.1122828f), new Vector2(0.02879068f, -0.1877136f), new Vector2(0.1175468f, -0.1309052f), new Vector2(0.08211166f, -0.05768801f), new Vector2(0.0856068f, 0.03718947f), new Vector2(0.1221001f, 0.07261911f), new Vector2(0.3995148f, 0.07354566f), new Vector2(0.4018973f, 0.1006065f), new Vector2(0.6251271f, 0.1018054f), new Vector2(0.6251271f, 0.1564373f), };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.075f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0f, 0.1142f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.21f, -0.044f, 0), new Vector3(0.225f, 0.059f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.14f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.635f, 0.13f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.243f, 0.0574f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1f, 0.2f, 0f); // Sets position of scope
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.12f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_300Blk;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/MCX_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/MCX_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/MCX_Suppressed_3.wav")
                    };

                }
            }
            );
            
            // AAC Folded
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} AAC Honey Badger Folded", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Honey Badger'  9x19mm Parabellum  Skins: 1     \n\nThe AAC Honey Badger is a PDW chambered in .300 AAC Blackout, it was designed as a replacement for the HK MP5 for use in CQB.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/AAC/AAC_Folded_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/SMG/AAC/AAC_Folded_Tan.png"),
                        ModAPI.LoadSprite("Guns/SMG/AAC/AAC_Folded.png")

                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/AAC/AAC_Folded_Tan.png");

                    //Set the sprite for the bolt
                    var boltCover = CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/AAC/AAC_Bolt.png"), Position: new Vector2(0f, 0.1142f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.07f, BoltCover: ModAPI.LoadSprite("Guns/SMG/AAC/AAC_Tan_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1143f, 0.1142f));
                    //Set the sprite for the bolt cover and the other skins
                    boltCover.AddComponent<BetterRandomSpriteChildBehaviour>().Sprites = new Sprite[]
                    {
                      ModAPI.LoadSprite("Guns/SMG/AAC/AAC_Tan_BoltCover.png"),
                      ModAPI.LoadSprite("Guns/SMG/AAC/AAC_BoltCover.png")
                    };

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.4000135f, 0.1533678f), new Vector2(0.3983062f, 0.1840419f), new Vector2(-0.2596299f, 0.1792633f), new Vector2(-0.2599631f, 0.1494057f), new Vector2(-0.4794953f, 0.1527714f), new Vector2(-0.4745579f, -0.09112369f), new Vector2(-0.4250217f, -0.03072187f), new Vector2(-0.4297012f, 0.07470022f), new Vector2(-0.2635375f, 0.07258081f), new Vector2(-0.2251916f, 0.03618889f), new Vector2(-0.2856116f, -0.1032633f), new Vector2(-0.2194429f, -0.1547366f), new Vector2(-0.1654043f, -0.04092395f), new Vector2(-0.1036286f, -0.07052214f), new Vector2(-0.03689218f, -0.03624652f), new Vector2(-0.01978643f, -0.1122828f), new Vector2(0.02879068f, -0.1877136f), new Vector2(0.1175468f, -0.1309052f), new Vector2(0.08211166f, -0.05768801f), new Vector2(0.0856068f, 0.03718947f), new Vector2(0.1221001f, 0.07261911f), new Vector2(0.3995148f, 0.07354566f), new Vector2(0.4018973f, 0.1006065f), new Vector2(0.6251271f, 0.1018054f), new Vector2(0.6251271f, 0.1564373f), };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.075f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0f, 0.1142f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.21f, -0.044f, 0), new Vector3(0.225f, 0.059f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.14f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.635f, 0.13f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.243f, 0.0574f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1f, 0.2f, 0f); // Sets position of scope
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.12f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_300Blk;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/MCX_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/MCX_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/MCX_Suppressed_3.wav")
                    };

                }
            }
            );

            // AAC Extended
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} AAC Honey Badger Extended Handguard", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Honey Badger'  9x19mm Parabellum  Skins: 1     \n\nThe AAC Honey Badger is a PDW chambered in .300 AAC Blackout, it was designed as a replacement for the HK MP5 for use in CQB.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/AAC/AAC_Extended_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/SMG/AAC/AAC_Extended_Tan.png"),
                        ModAPI.LoadSprite("Guns/SMG/AAC/AAC_Extended.png")

                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/AAC/AAC_Extended_Tan.png");

                    //Set the sprite for the bolt
                    var boltCover = CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/AAC/AAC_Bolt.png"), Position: new Vector2(0f, 0.1142f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.07f, BoltCover: ModAPI.LoadSprite("Guns/SMG/AAC/AAC_Tan_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1143f, 0.1142f));
                    //Set the sprite for the bolt cover and the other skins
                    boltCover.AddComponent<BetterRandomSpriteChildBehaviour>().Sprites = new Sprite[]
                    {
                      ModAPI.LoadSprite("Guns/SMG/AAC/AAC_Tan_BoltCover.png"),
                      ModAPI.LoadSprite("Guns/SMG/AAC/AAC_BoltCover.png")
                    };

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.5795776f, 0.1548519f), new Vector2(0.5808383f, 0.1855259f), new Vector2(-0.2596299f, 0.1792633f), new Vector2(-0.2599631f, 0.1494057f), new Vector2(-0.4256409f, 0.1570231f), new Vector2(-0.4272537f, 0.128278f), new Vector2(-0.6323431f, 0.12782f), new Vector2(-0.6318694f, -0.1010442f), new Vector2(-0.5681693f, -0.03501035f), new Vector2(-0.5738299f, 0.07415247f), new Vector2(-0.4297012f, 0.07470022f), new Vector2(-0.2635375f, 0.07258081f), new Vector2(-0.2251916f, 0.03618889f), new Vector2(-0.2856116f, -0.1032633f), new Vector2(-0.2194429f, -0.1547366f), new Vector2(-0.1654043f, -0.04092395f), new Vector2(-0.1036286f, -0.07052214f), new Vector2(-0.03689218f, -0.03624652f), new Vector2(-0.01978643f, -0.1122828f), new Vector2(0.02879068f, -0.1877136f), new Vector2(0.1175468f, -0.1309052f), new Vector2(0.08211166f, -0.05768801f), new Vector2(0.0856068f, 0.03718947f), new Vector2(0.1221001f, 0.07261911f), new Vector2(0.5790789f, 0.07799767f), new Vector2(0.5770094f, 0.1020905f), new Vector2(0.6251271f, 0.1018054f), new Vector2(0.6251271f, 0.1564373f), };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.075f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0f, 0.1142f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.21f, -0.044f, 0), new Vector3(0.225f, 0.059f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.15f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.636f, 0.13f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.3f, 0.0572f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1f, 0.2f, 0f); // Sets position of scope
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.12f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_300Blk;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/MCX_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/MCX_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/MCX_Suppressed_3.wav")
                    };

                }
            }
            );

            // AAC Extended Folded
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} AAC Honey Badger Ext Handguard Folded", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Honey Badger'  9x19mm Parabellum  Skins: 1     \n\nThe AAC Honey Badger is a PDW chambered in .300 AAC Blackout, it was designed as a replacement for the HK MP5 for use in CQB.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/AAC/AAC_Extended_Folded_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/SMG/AAC/AAC_Extended_Folded_Tan.png"),
                        ModAPI.LoadSprite("Guns/SMG/AAC/AAC_Extended_Folded.png")
                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/AAC/AAC_Extended_Folded_Tan.png");

                    //Set the sprite for the bolt
                    var boltCover = CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/AAC/AAC_Bolt.png"), Position: new Vector2(0f, 0.1142f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.07f, BoltCover: ModAPI.LoadSprite("Guns/SMG/AAC/AAC_Tan_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1143f, 0.1142f));
                    //Set the sprite for the bolt cover and the other skins
                    boltCover.AddComponent<BetterRandomSpriteChildBehaviour>().Sprites = new Sprite[]
                    {
                      ModAPI.LoadSprite("Guns/SMG/AAC/AAC_Tan_BoltCover.png"),
                      ModAPI.LoadSprite("Guns/SMG/AAC/AAC_BoltCover.png"),

                    };

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.5795776f, 0.1548519f), new Vector2(0.5808383f, 0.1855259f), new Vector2(-0.2596299f, 0.1792633f), new Vector2(-0.2599631f, 0.1494057f), new Vector2(-0.4794953f, 0.1527714f), new Vector2(-0.4745579f, -0.09112369f), new Vector2(-0.4250217f, -0.03072187f), new Vector2(-0.4297012f, 0.07470022f), new Vector2(-0.2635375f, 0.07258081f), new Vector2(-0.2251916f, 0.03618889f), new Vector2(-0.2856116f, -0.1032633f), new Vector2(-0.2194429f, -0.1547366f), new Vector2(-0.1654043f, -0.04092395f), new Vector2(-0.1036286f, -0.07052214f), new Vector2(-0.03689218f, -0.03624652f), new Vector2(-0.01978643f, -0.1122828f), new Vector2(0.02879068f, -0.1877136f), new Vector2(0.1175468f, -0.1309052f), new Vector2(0.08211166f, -0.05768801f), new Vector2(0.0856068f, 0.03718947f), new Vector2(0.1221001f, 0.07261911f), new Vector2(0.5790789f, 0.07799767f), new Vector2(0.5770094f, 0.1020905f), new Vector2(0.6251271f, 0.1018054f), new Vector2(0.6251271f, 0.1564373f), };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.075f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0f, 0.1142f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.21f, -0.044f, 0), new Vector3(0.225f, 0.059f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.15f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.636f, 0.13f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.3f, 0.0572f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1f, 0.2f, 0f); // Sets position of scope
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.12f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_300Blk;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/MCX_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/MCX_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/MCX_Suppressed_3.wav")
                    };

                }
            }
            );

            // PP19 Vityaz
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("G1 Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} PP-19 Vityaz", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Vityaz'  9x19mm Parabellum  Skins: 0           \n\nThe PP-19 Vityaz is a Russian made submachine gun developed in 2004, the weapon is based on the AK-74 allowing for part compatability.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/PP19/PP19_Vityaz_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/PP19/PP19_Vityaz.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1778383f, 0.1914148f), new Vector2(-0.2234614f, 0.1280246f), new Vector2(-0.5825722f, 0.1278794f), new Vector2(-0.5794302f, -0.10245f), new Vector2(-0.2601394f, 0.03663456f), new Vector2(-0.1882482f, 0.04062966f), new Vector2(-0.215591f, -0.1226132f), new Vector2(-0.1393391f, -0.1237181f), new Vector2(-0.1042359f, -0.03376631f), new Vector2(0.04621138f, -0.01476558f), new Vector2(0.1339681f, -0.2113388f), new Vector2(0.2104516f, -0.1750101f), new Vector2(0.1340199f, -0.02122237f), new Vector2(0.1247116f, 0.0392828f), new Vector2(0.4961659f, 0.06956456f), new Vector2(0.4965146f, 0.09750477f), new Vector2(0.5899807f, 0.1012171f), new Vector2(0.5880472f, 0.1274667f), new Vector2(0.4960736f, 0.1278023f), new Vector2(0.4977369f, 0.1954334f), };
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/AK/_Shared/AK_Bolt_Black.png"), Position: new Vector2(0.0571f, 0.1143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.09f, BoltCover: ModAPI.LoadSprite("Guns/SMG/PP19/PP19_BoltCover.png"), BoltCoverPosition: new Vector2(-0.0857f, 0.1143f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.075f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.0571f, 0.1143f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.16f, -0.03f, 0), new Vector3(0.3f, 0.049f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.14f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.593f, 0.1148f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.3143f, 0.0573f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0285f, 0.2f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };
                }
            }
            );

            // PP19 Bizon
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("G1 Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} PP-19 Bizon", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Bizon'  9×18mm Makarov  Skins: 0               \n\nThe PP-19 Bizon is a Russian made submachine gun developed by Izhmash in 1993, it is primarily used for counter-terroism & law enforcement.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/PP19/PP19_Bizon_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/PP19/PP19_Bizon.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1640716f, 0.1908786f), new Vector2(-0.2126086f, 0.1341635f), new Vector2(-0.5810012f, 0.1275864f), new Vector2(-0.5857143f, -0.100586f), new Vector2(-0.193202f, 0.04725833f), new Vector2(-0.2109315f, -0.1275863f), new Vector2(-0.1420439f, -0.1244443f), new Vector2(-0.1149118f, -0.0429946f), new Vector2(0.01310885f, -0.04598945f), new Vector2(0.03115854f, -0.01472498f), new Vector2(0.4710295f, -0.01015862f), new Vector2(0.4971105f, 0.09736378f), new Vector2(0.581908f, 0.1003541f), new Vector2(0.5830458f, 0.1321578f), new Vector2(0.4982914f, 0.1336339f), new Vector2(0.4977369f, 0.1860073f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/AK/_Shared/AK_Bolt_Black.png"), Position: new Vector2(0.0571f, 0.1143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.09f, BoltCover: ModAPI.LoadSprite("Guns/SMG/PP19/PP19_BoltCover.png"), BoltCoverPosition: new Vector2(-0.0857f, 0.1143f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.09f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.0571f, 0.1143f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.16f, -0.03f, 0), new Vector3(0.3f, 0.049f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.14f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.593f, 0.1148f);
                    Instance.transform.Find("BarrelAttachment").gameObject.SetActive(false); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0285f, 0.2f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };
                }
            }
            );

            // MP40
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} MP 40", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Schmeisser'  9×19mm Parabellum  Skins: 0       \n\nThe Maschinenpistole 40 was a WW2 submachine gun designed in Nazi Germany during WW2, it was frequently used by German infantry.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/MP40/MP40_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/MP40/MP40.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.6857143f, 0.1587374f), new Vector2(-0.6857143f, -0.01083039f), new Vector2(-0.6155933f, 0.0870219f), new Vector2(-0.2899573f, 0.09813472f), new Vector2(-0.2497661f, 0.07450501f), new Vector2(-0.3221091f, -0.06368566f), new Vector2(-0.2426839f, -0.09539814f), new Vector2(-0.2054694f, -0.0160617f), new Vector2(-0.1100585f, -0.01929546f), new Vector2(-0.08251877f, 0.04151095f), new Vector2(0.1378758f, 0.04288813f), new Vector2(0.1684837f, 0.07007776f), new Vector2(0.2267825f, 0.04004489f), new Vector2(0.2346132f, -0.2199712f), new Vector2(0.2885956f, -0.2167654f), new Vector2(0.2853308f, 0.07175837f), new Vector2(0.3988853f, 0.1064884f), new Vector2(0.4003037f, 0.128848f), new Vector2(0.6848643f, 0.1278113f), new Vector2(0.6857143f, 0.1577444f), new Vector2(0.654003f, 0.1567795f), new Vector2(0.6515067f, 0.218451f), new Vector2(0.599298f, 0.1588437f), new Vector2(0.4017553f, 0.1613565f), new Vector2(0.3975201f, 0.1851755f), new Vector2(-0.2535494f, 0.1852119f), new Vector2(-0.2980705f, 0.1275304f), new Vector2(-0.6431486f, 0.1259625f), };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.11f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.2429f, 0.1857f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.225f, 0.003f, 0), new Vector3(0.259f, 0f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.12f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.692f, 0.143f);
                    Instance.transform.Find("BarrelAttachment").gameObject.SetActive(false); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1f, 0.2f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };
                }
            }
            );

            // M3
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} M3 SMG", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Grease Gun'  .45 ACP  Skins: 0       \n\nThe M3 submachine gun was a American made weapon developed during WW2 as a replacement to the M1A1 Thompson submachine gun.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/M3/M3_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/M3/M3.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.170185f, 0.1846348f), new Vector2(-0.2021632f, 0.09750859f), new Vector2(-0.5749174f, 0.09210695f), new Vector2(-0.5654276f, -0.04162282f), new Vector2(-0.5388308f, 0.06591584f), new Vector2(-0.1654755f, 0.06929576f), new Vector2(-0.1991612f, -0.06472312f), new Vector2(-0.11608f, -0.09472574f), new Vector2(-0.0875302f, -0.01323204f), new Vector2(-0.004240796f, -0.01247221f), new Vector2(0.03800293f, 0.04182779f), new Vector2(0.1992922f, 0.07216328f), new Vector2(0.1979579f, -0.2190344f), new Vector2(0.2586815f, -0.2163722f), new Vector2(0.2591773f, 0.07189001f), new Vector2(0.33788f, 0.1023594f), new Vector2(0.3411574f, 0.129145f), new Vector2(0.5480722f, 0.1277095f), new Vector2(0.5467104f, 0.1521469f), new Vector2(0.3392144f, 0.1519216f), new Vector2(0.3401462f, 0.1865318f), };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.13f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.2429f, 0.1857f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.225f, 0.003f, 0), new Vector3(0.259f, 0f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.11f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.552f, 0.143f);
                    Instance.transform.Find("BarrelAttachment").gameObject.SetActive(false); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0144f, 0.2f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_45;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_3.wav")
                    };
                }
            }
            );

            // Sten
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} Sten MK II", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'The Stench Gun'  9×19mm Parabellum  Skins: 0   \n\nThe Sten gun was a series of British submachine guns developed during WW2 which were commonly seen used by commonwealth forces.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/Sten/Sten_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/Sten/Sten.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.192011f, 0.1450293f), new Vector2(-0.2163551f, 0.0922517f), new Vector2(-0.6285715f, 0.02694669f), new Vector2(-0.6285715f, -0.1428571f), new Vector2(-0.5391089f, -0.01723575f), new Vector2(-0.322394f, 0.02854836f), new Vector2(-0.2735707f, -0.0327385f), new Vector2(-0.203573f, -0.0008482169f), new Vector2(-0.2044292f, -0.053379f), new Vector2(-0.083235f, -0.0556553f), new Vector2(-0.05574248f, -0.003536586f), new Vector2(0.05087114f, -0.0268363f), new Vector2(0.1118294f, 0.05862345f), new Vector2(0.4555336f, 0.06122009f), new Vector2(0.4564742f, 0.08755477f), new Vector2(0.6320068f, 0.08827085f), new Vector2(0.637068f, 0.1130173f), new Vector2(0.4576834f, 0.1164514f), new Vector2(0.4587984f, 0.1444896f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/Sten/Sten_Bolt.png"), Position: new Vector2(-0.01428f, 0.1f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.11f, BoltCover: ModAPI.LoadSprite("Guns/SMG/Sten/Sten_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1714f, 0.1f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.22f, 0.1f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.251f, 0.018f, 0), new Vector3(0.209f, 0.07f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.11f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.636f, 0.1f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2713f, 0.043f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0428f, 0.1571f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };
                }
            }
            );

            // M1A1
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} Thompson M1A1", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Tommy-gun'  .45 ACP  Skins: 0                  \n\nThe Thompson M1A1 'Tommy-gun' was a iconic American weapon of the WW2 era, it was extensively used by American forces during WW2.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/M1A1/M1A1_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/M1A1/M1A1.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.7449207f, 0.1871437f), new Vector2(-0.2155659f, 0.1873721f), new Vector2(-0.2906743f, 0.2128447f), new Vector2(-0.3747406f, 0.1872961f), new Vector2(-0.3787314f, 0.06539962f), new Vector2(-0.7263495f, 0.01539817f), new Vector2(-0.7180957f, -0.2387302f), new Vector2(-0.1404668f, 0.07449338f), new Vector2(-0.2056867f, -0.129704f), new Vector2(-0.1076817f, -0.1362682f), new Vector2(-0.06850799f, -0.01689895f), new Vector2(0.08507653f, 0.006632462f), new Vector2(0.07682102f, -0.238943f), new Vector2(0.1704776f, -0.2366668f), new Vector2(0.1665911f, 0.06465785f), new Vector2(0.6333811f, 0.07579362f), new Vector2(0.6550795f, 0.1549179f), new Vector2(0.7407937f, 0.1515865f), };

                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/M1A1/M1A1_Bolt.png"), Position: new Vector2(-0.0571f, 0.14285f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.09f, BoltCover: ModAPI.LoadSprite("Guns/SMG/M1A1/M1A1_BoltCover.png"), BoltCoverPosition: new Vector2(-0.2142f, 0.14285f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.09f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.118f, 0.172f);
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.76f, 0.17f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.136f, -0.044f, 0), new Vector3(0.4f, 0.08f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.13f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.75f, 0.1713f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.4714f, 0.05731f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1287f, 0.2f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_45;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_3.wav")
                    };
                }
            }
            );

            // PPSH
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} PPSh-41", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Papasha'  7.62×25mm Tokarev  Skins: 0          \n\nThe PPSh-41 is a Soviet made selective-fire submachine gun, it's most noticable feature is it's extremely high firerate.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/PPSH/PPSH_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/PPSH/PPSH.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.252672f, 0.1258316f), new Vector2(-0.2910637f, 0.04576902f), new Vector2(-0.3994771f, 0.0684521f), new Vector2(-0.6213314f, 0.05074076f), new Vector2(-0.6213314f, -0.1643829f), new Vector2(-0.3416464f, -0.04040036f), new Vector2(-0.2888245f, -0.0624214f), new Vector2(-0.235582f, -0.007533446f), new Vector2(-0.1915447f, -0.04696702f), new Vector2(-0.1186546f, -0.04561277f), new Vector2(-0.08503991f, 0.01527519f), new Vector2(0.05596519f, 0.02013052f), new Vector2(0.06500396f, -0.159224f), new Vector2(0.137691f, -0.1594421f), new Vector2(0.1417565f, 0.008944638f), new Vector2(0.2099483f, 0.03652881f), new Vector2(0.5971582f, 0.04195537f), new Vector2(0.6249514f, 0.07078503f), new Vector2(0.6285715f, 0.1299926f), };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.05f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.087f, 0.116f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.26f, 0.024f, 0), new Vector3(0.257f, 0.035f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.14f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.6375f, 0.0859f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.3f, 0.0287f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.0141f, 0.1427f, 0f); // Sets position of scope
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_Tokarev;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);
                }
            }
            );

            // MP7
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} HK MP7", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Pocket Rocket'  HK 4.6×30mm  Skins: 0          \n\nThe Heckler & Koch MP7 is a german made heavy hitting submachine gun designed as a compact weapon that could defeat body armour.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/MP7/MP7_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/MP7/MP7.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.152631f, 0.2276124f), new Vector2(-0.2254f, 0.1576805f), new Vector2(-0.5527331f, 0.1877339f), new Vector2(-0.5505279f, -0.04441342f), new Vector2(-0.483417f, 0.1357107f), new Vector2(-0.1952377f, 0.1059152f), new Vector2(-0.18501f, 0.04236098f), new Vector2(-0.01449979f, 0.04854569f), new Vector2(-0.003279984f, -0.1244342f), new Vector2(0.0508853f, -0.2476129f), new Vector2(0.1313639f, -0.2111167f), new Vector2(0.1040561f, -0.1459934f), new Vector2(0.09909928f, -0.01678995f), new Vector2(0.1844159f, -0.01583829f), new Vector2(0.2246293f, 0.06656689f), new Vector2(0.4909949f, 0.0349641f), new Vector2(0.4944463f, 0.0952462f), new Vector2(0.5620415f, 0.09858615f), new Vector2(0.5615321f, 0.1289916f), new Vector2(0.4949986f, 0.13186f), new Vector2(0.48879f, 0.216398f), };
                    
                    // sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/MP7/MP7_Bolt.png"), Position: new Vector2(0.0143f, 0.1143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.09f, BoltCover: ModAPI.LoadSprite("Guns/SMG/MP7/MP7_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1143f, 0.1143f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.06f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.0143f, 0.1143f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0.04f, -0.046f, 0), new Vector3(0.4f, 0.05f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.564f, 0.1143f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.3425f, 0.0571f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.0284f, 0.2287f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_300Blk;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_3.wav")
                    };
                }
            }
            );

            // MP7 Folded
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} MP7 Folded", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Pocket Rocket'  HK 4.6×30mm  Skins: 0          \n\nThe Heckler & Koch MP7 is a german made heavy hitting submachine gun designed as a compact weapon that could defeat body armour.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/MP7/MP7_Folded_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/MP7/MP7_Folded.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.387577f, 0.209973f), new Vector2(0.3809558f, 0.2458777f), new Vector2(-0.1624604f, 0.2384473f), new Vector2(-0.2462475f, 0.1452106f), new Vector2(-0.2386698f, -0.0450936f), new Vector2(-0.2128771f, -0.05283979f), new Vector2(-0.2136741f, 0.04677084f), new Vector2(-0.01449979f, 0.04854569f), new Vector2(-0.003279984f, -0.1244342f), new Vector2(0.0508853f, -0.2476129f), new Vector2(0.1313639f, -0.2111167f), new Vector2(0.1040561f, -0.1459934f), new Vector2(0.09909928f, -0.01678995f), new Vector2(0.1844159f, -0.01583829f), new Vector2(0.2246293f, 0.06656689f), new Vector2(0.4909949f, 0.0349641f), new Vector2(0.4944463f, 0.0952462f), new Vector2(0.5620415f, 0.09858615f), new Vector2(0.5615321f, 0.1289916f), new Vector2(0.4949986f, 0.13186f), new Vector2(0.48879f, 0.216398f), };
                  
                    // Sets up bolt sprite
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/MP7/MP7_Bolt.png"), Position: new Vector2(0.0143f, 0.1143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.09f, BoltCover: ModAPI.LoadSprite("Guns/SMG/MP7/MP7_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1143f, 0.1143f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.06f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.0143f, 0.1143f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0.04f, -0.046f, 0), new Vector3(0.4f, 0.05f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.564f, 0.1143f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.3425f, 0.0571f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.0284f, 0.2287f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_300Blk;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_3.wav")
                    };
                }
            }
            );

            // MP9
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} MP9", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'MP9'  9×19mm Parabellum  Skins: 0              \n\nThe Brugger & Thomet MP9 is a Swiss made submachine gun, the weapon is extremely compact and light due to it's polymer construction.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/MP9/MP9_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/MP9/MP9.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1397276f, 0.2405547f), new Vector2(-0.2375064f, 0.1690102f), new Vector2(-0.5465933f, 0.1720875f), new Vector2(-0.5571429f, -0.04725216f), new Vector2(-0.4900708f, 0.1295323f), new Vector2(-0.2291437f, 0.1217344f), new Vector2(-0.1743134f, 0.08199345f), new Vector2(-0.03550613f, 0.07365222f), new Vector2(0.01949655f, -0.2428571f), new Vector2(0.1012609f, -0.2428571f), new Vector2(0.1028648f, -0.01515253f), new Vector2(0.1939949f, -0.01393587f), new Vector2(0.2637669f, 0.07728582f), new Vector2(0.297735f, -0.07040432f), new Vector2(0.3551241f, -0.07010384f), new Vector2(0.3622526f, 0.07532868f), new Vector2(0.418658f, 0.0454789f), new Vector2(0.4186528f, 0.1024208f), new Vector2(0.5193558f, 0.1098947f), new Vector2(0.5184528f, 0.1435657f), new Vector2(0.4192897f, 0.1576211f), new Vector2(0.3680818f, 0.2372278f), };

                    // Sets up bolt sprite
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/MP9/MP9_Bolt.png"), Position: new Vector2(0.0286f, 0.1714f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.08f, BoltCover: ModAPI.LoadSprite("Guns/SMG/MP9/MP9_BoltCover.png"), BoltCoverPosition: new Vector2(-0.0571f, 0.1714f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.065f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.0286f, 0.1714f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0.04f, -0.046f, 0), new Vector3(0.4f, 0.05f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.085f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.48f, 0.13f);
                    Instance.transform.Find("BarrelAttachment").gameObject.SetActive(false); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.0284f, 0.2287f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };
                }
            }
            );

            // MP9 Folded
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} MP9 Folded", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'MP9'  9×19mm Parabellum  Skins: 0              \n\nThe Brugger & Thomet MP9 is a Swiss made submachine gun, the weapon is extremely compact and light due to it's polymer construction.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/MP9/MP9_Folded_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/MP9/MP9_Folded.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1510668f, 0.2383984f), new Vector2(-0.2316566f, 0.1607811f), new Vector2(-0.178152f, 0.07388993f), new Vector2(-0.03744689f, 0.07570906f), new Vector2(0.01410748f, -0.2383984f), new Vector2(0.09307992f, -0.2413709f), new Vector2(0.1028301f, -0.01876535f), new Vector2(0.1788448f, -0.01520238f), new Vector2(0.2688679f, 0.06937428f), new Vector2(0.3028171f, 0.033247f), new Vector2(0.3013017f, -0.07517881f), new Vector2(0.3550008f, -0.07637957f), new Vector2(0.3590842f, 0.07198752f), new Vector2(0.4097242f, 0.03930733f), new Vector2(0.4113959f, 0.09010449f), new Vector2(0.5252239f, 0.1115387f), new Vector2(0.5255989f, 0.1387969f), new Vector2(0.3933237f, 0.1860472f), new Vector2(0.3766422f, 0.2398847f), };

                    // Sets up bolt sprite
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/MP9/MP9_Bolt.png"), Position: new Vector2(0.0286f, 0.1714f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.08f, BoltCover: ModAPI.LoadSprite("Guns/SMG/MP9/MP9_BoltCover.png"), BoltCoverPosition: new Vector2(-0.0571f, 0.1714f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.065f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.0286f, 0.1714f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0.04f, -0.046f, 0), new Vector3(0.4f, 0.05f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.085f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.48f, 0.13f);
                    Instance.transform.Find("BarrelAttachment").gameObject.SetActive(false); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.0284f, 0.2287f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };
                }
            }
            );

            // MX4 Storm
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} Mx4 Storm", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Mx4'  9×19mm Parabellum  Skins: 0              \n\nThe Beretta Mx4 Storm is a Italian submachine gun made in 2003, the weapon is a fully automatic variant of the Beretta Cx4 Storm.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/MX4/MX4_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/MX4/MX4.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.4490269f, 0.1847274f), new Vector2(-0.03478301f, 0.1852336f), new Vector2(-0.05730379f, 0.2276873f), new Vector2(-0.1022672f, 0.2312628f), new Vector2(-0.1805127f, 0.1444008f), new Vector2(-0.5700179f, 0.1467478f), new Vector2(-0.5700179f, -0.08642703f), new Vector2(-0.296317f, -0.02576466f), new Vector2(-0.2074101f, -0.07762085f), new Vector2(-0.1183308f, -0.08632214f), new Vector2(-0.1163797f, -0.2271607f), new Vector2(-0.05269714f, -0.2325649f), new Vector2(-0.05202377f, -0.1166824f), new Vector2(-0.03037724f, -0.1126267f), new Vector2(-0.02745987f, -0.01655394f), new Vector2(0.08362844f, -0.02582822f), new Vector2(0.1157257f, 0.02916582f), new Vector2(0.4874814f, 0.05712813f), new Vector2(0.5149985f, 0.1089844f), new Vector2(0.5762004f, 0.1157448f), new Vector2(0.5768528f, 0.1449996f), new Vector2(0.5145698f, 0.1434938f), new Vector2(0.51782f, 0.2243392f), };

                    // Sets up bolt sprite
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/SMG/MX4/MX4_Bolt.png"), Position: new Vector2(-0.04285f, 0.12857f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.08f, BoltCover: ModAPI.LoadSprite("Guns/SMG/MX4/MX4_BoltCover.png"), BoltCoverPosition: new Vector2(-0.12856f, 0.12857f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.06f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.04285f, 0.12857f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.05f, 0.015f, 0), new Vector3(0.314f, 0.073f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.11f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.578f, 0.1285f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.3568f, 0.043f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.0714f, 0.1856f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };
                }
            }
            );

            // P90
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} FN P90", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "E", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'P90'  FN 5.7×28mm  Skins: 0                    \n\nThe FN P90 is a submachine gun / PDW made in Belgium, it was designed to be a powerful but compact weapon for use by vehicle crews.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/SMG/P90/P90_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/SMG/P90/P90.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.1740732f, 0.2008022f), new Vector2(0.06629484f, 0.09236656f), new Vector2(-0.5285714f, 0.08372059f), new Vector2(-0.5285714f, -0.1702211f), new Vector2(0.05669857f, -0.2009239f), new Vector2(0.1815093f, -0.1361881f), new Vector2(0.1843454f, -0.2f), new Vector2(0.2992067f, -0.2f), new Vector2(0.3740048f, -0.0837206f), new Vector2(0.4426024f, -0.1273268f), new Vector2(0.4462512f, -0.02906398f), new Vector2(0.5333626f, -0.02853595f), new Vector2(0.5309342f, 0.02634478f), new Vector2(0.4476353f, 0.02761567f), new Vector2(0.4448101f, 0.1414954f), new Vector2(0.378259f, 0.2f), };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.06f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.14f, -0.14f);
                    Instance.GetComponent<FirearmBehaviour>().casingDirection = new Vector2(0f, -90f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0.11f, -0.105f, 0), new Vector3(0.365f, -0.125f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.12f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.5343f, 0f);
                    Instance.transform.Find("BarrelAttachment").gameObject.SetActive(false); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.2856f, 0.214f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_45;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.GetChild(2).localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_3.wav")
                    };
                }
            }
            );

            #endregion

            // Pistol
            #region Pistol

            // Deagle
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} Desert Eagle", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Deagle'  .50 Action Express  Skins: 1          \n\nThe Desert Eagle is a semi-automatic pistol chambered in .50 AE, most consider the weapon impractical but there's no denying it's power.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/Deagle/Deagle_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Pistol/Deagle/Deagle.png"),
                        ModAPI.LoadSprite("Guns/Pistol/Deagle/Deagle_Gold.png")
                    };
                    //Set to zero so it always starts normal
                    
                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/Deagle/Deagle.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.1980693f, 0.1282012f), new Vector2(-0.2520577f, 0.1275801f), new Vector2(-0.2592775f, 0.04637516f), new Vector2(-0.2046094f, 0.04322746f), new Vector2(-0.2302317f, -0.1270407f), new Vector2(-0.1962923f, -0.1298554f), new Vector2(-0.2010792f, -0.1558868f), new Vector2(-0.08510277f, -0.1564426f), new Vector2(-0.05475277f, -0.01525278f), new Vector2(0.02764612f, -0.01186387f), new Vector2(0.02772099f, 0.04225448f), new Vector2(0.2305569f, 0.04267177f), new Vector2(0.2278187f, 0.1589009f), };
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Pistol/Deagle/Deagle_Slide.png"), Position: new Vector2(-0.02857f, 0.11428f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.17f, BoltCover: null, BoltCoverPosition: new Vector2(0f, 0f));

                    //Set the sprites for the bolt to be random too (this is a bit more complicated)
                    var bolt = Instance.GetComponentInChildren<BoltAnimator>().gameObject;
                    bolt.AddComponent<BetterRandomSpriteChildBehaviour>().Sprites = new Sprite[]
                    {
                      ModAPI.LoadSprite("Guns/Pistol/Deagle/Deagle_Slide.png"),
                      ModAPI.LoadSprite("Guns/Pistol/Deagle/Deagle_Gold_Slide.png")
                    };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.16f);
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.1f, 0.113f);
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.25f, 0.091f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.12f, -0.028f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.09f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.2354f, 0.0857f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1286f, 0.0286f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0714f, 0.1428f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_50AE;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/MG42_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/MG42_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/MG42_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/AWM_Suppressed_3.wav")
                    };
                }
            }
            );
            
            // ASP
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} ASP", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'ASP'  9×19mm Parabellum  Skins: 0              \n\nThe ASP is a compact handgun designed by Paris Theodore, it was based on the S&W M39 pistol however in many ways was a downgrade.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/ASP/ASP_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/ASP/ASP.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1301917f, 0.1280083f), new Vector2(-0.1279527f, 0.06945641f), new Vector2(-0.1610143f, 0.07204886f), new Vector2(-0.1319497f, 0.01912793f), new Vector2(-0.1555943f, -0.09063162f), new Vector2(-0.08404809f, -0.1231515f), new Vector2(-0.01190836f, -0.01668365f), new Vector2(0.04094279f, -0.01249736f), new Vector2(0.06956664f, 0.04096355f), new Vector2(0.1563686f, 0.07011103f), new Vector2(0.1563686f, 0.1262486f), };

                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Pistol/ASP/ASP_Slide.png"), Position: new Vector2(0.01428f, 0.1f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.08f, BoltCover: null, BoltCoverPosition: new Vector2(0f, 0f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.11f);
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.01428f, 0.1f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.08f, -0.027f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.06f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.166f, 0.1f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.14287f, 0.02861f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0f, 0.14337f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.16f);
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };
                }
            }
            );

            // AutoMag
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} AMT AutoMag II", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'AMT'  .22 Winchester Magnum  Skins: 0          \n\nThe AMT AutoMag II is a semi-automatic pistol developed by Arcadia Machine and Tool, the weapon fires .22 Winchester Magnum.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/AutoMag/AutoMag_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/AutoMag/AutoMag.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.1980693f, 0.1282012f), new Vector2(-0.2520577f, 0.1275801f), new Vector2(-0.2592775f, 0.04637516f), new Vector2(-0.2046094f, 0.04322746f), new Vector2(-0.2302317f, -0.1270407f), new Vector2(-0.1962923f, -0.1298554f), new Vector2(-0.2010792f, -0.1558868f), new Vector2(-0.08510277f, -0.1564426f), new Vector2(-0.05475277f, -0.01525278f), new Vector2(0.02764612f, -0.01186387f), new Vector2(0.02772099f, 0.04225448f), new Vector2(0.2305569f, 0.04267177f), new Vector2(0.2278187f, 0.1589009f), };
                   
                    // Sets up gun bolt
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Pistol/AutoMag/AutoMag_Slide.png"), Position: new Vector2(0.01429f, 0.085714f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.08f, BoltCover: null, BoltCoverPosition: new Vector2(0f, 0f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.13f);
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.025f, 0.086f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.14f, -0.027f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.07f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.2389f, 0.075f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1f, 0f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0428f, 0.11433f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_22;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_Suppressed_3.wav")
                    };

                }
            }
            );

            // HK4
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} HK4", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'HK4'  .22 Winchester Magnum  Skins: 0          \n\nThe HK4 is a german made pocket pistol, it was the first pistol developed by Heckler & Koch in 1967, it was designed by Alex Seidel.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/HK4/HK4_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/HK4/HK4.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.118123f, 0.1461088f), new Vector2(-0.149946f, 0.1045307f), new Vector2(-0.1847898f, 0.03434571f), new Vector2(-0.1277004f, 0.02608549f), new Vector2(-0.1349064f, -0.01543203f), new Vector2(-0.15882f, -0.02818326f), new Vector2(-0.1683721f, -0.1417733f), new Vector2(-0.03990857f, -0.1428571f), new Vector2(-0.02371879f, -0.007049736f), new Vector2(0.0694446f, 0.003138419f), new Vector2(0.1072258f, 0.05613076f), new Vector2(0.1857143f, 0.08384961f), new Vector2(0.1857143f, 0.1428571f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Pistol/HK4/HK4_Slide.png"), Position: new Vector2(0.01429f, 0.1143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.05f, BoltCover: null, BoltCoverPosition: new Vector2(0f, 0f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.11f);
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.031f, 0.13f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.092f, -0.033f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.05f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.1948f, 0.1156f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1429f, 0.0428f, 0f);// Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0f, 0.1565f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_22;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_Suppressed_3.wav")
                    };

                }
            }
            );

            // M9
            ModAPI.Register(
             new Modification()
             {
                 OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                 NameOverride = $"{Mod.ModTag} M9 Beretta", //new item name with a suffix to assure it is globally unique
                 NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                 DescriptionOverride = "'92F'  9×19mm Parabellum  Skins: 1              \n\nThe Beretta M9 is a semi-automatic pistol designed as a sidearm for law enforcement and military use as a replacement to the M1911A1.", //new item description
                 CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                 ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/Beretta M9/M9_TN.png"), //new item thumbnail (relative path)
                 AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                 {
                     //adds the GeneralGunHandler script to the gun, which is required for all guns
                     Instance.AddComponent<GeneralGunHandler>();

                     //Set the sprites
                     if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                       {
                        ModAPI.LoadSprite("Guns/Pistol/Beretta M9/M9.png"),
                        ModAPI.LoadSprite("Guns/Pistol/Beretta M9/M9_Silver.png")
                       };
                     //Set to zero so it always starts normal
                     
                     //Set the sprite to the normal one
                     Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/Beretta M9/M9.png");

                     // Adjusts colliders
                     Instance.FixColliders();
                     Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.1989155f, 0.1173467f), new Vector2(0.1859469f, 0.1415732f), new Vector2(0.1729323f, 0.1185355f), new Vector2(-0.1436981f, 0.1184834f), new Vector2(-0.1599116f, 0.1417471f), new Vector2(-0.1836109f, 0.1144317f), new Vector2(-0.2245107f, 0.04119167f), new Vector2(-0.1726112f, 0.02317296f), new Vector2(-0.1969166f, -0.1387001f), new Vector2(-0.09925459f, -0.1388839f), new Vector2(-0.08483407f, -0.02847685f), new Vector2(-0.002494927f, -0.02601151f), new Vector2(0.0345078f, 0.03028607f), new Vector2(0.226541f, 0.02972601f), new Vector2(0.2293435f, 0.1174346f), };
                     
                     // Sets up bolt sprites
                     CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Pistol/Beretta M9/M9_Slide.png"), Position: new Vector2(0.01431f, 0.1f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.12f, BoltCover: null, BoltCoverPosition: new Vector2(0f, 0f));

                     //Set the sprites for the bolt to be random too (this is a bit more complicated)
                     var bolt = Instance.GetComponentInChildren<BoltAnimator>().gameObject;
                     bolt.AddComponent<BetterRandomSpriteChildBehaviour>().Sprites = new Sprite[]
                    {
                      ModAPI.LoadSprite("Guns/Pistol/Beretta M9/M9_Slide.png"),
                      ModAPI.LoadSprite("Guns/Pistol/Beretta M9/M9_Silver_Slide.png")
                      };

                     // Firerate, Casing, Holding & attachment positions
                     Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.11f);
                     Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.078f, 0.1f);
                     Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.135f, -0.042f, 0) };
                     Instance.GetComponent<Rigidbody2D>().mass = 0.08f;
                     Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.231f, 0.0862f);
                     Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1f, 0.0143f, 0f);// Sets position of grip
                     Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0143f, 0.1289f, 0f); // Sets position of scope
                     Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                     Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                     // Sets cartridge to custom one
                     Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                     // Sets casing sprite
                     Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                     Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                     Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                     // Changes sounds of shots
                     Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                     {
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_3.wav"),
                     };

                     //creates a new attachment point for the barrel
                     GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                     NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                     //sets the position of the new attachment point
                     NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                     NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                     //Sets a custom shot sound with a supressor
                     Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                     {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                     };
                 }
             }
             );

            // Glock 18
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} Glock 18 Machine Pistol", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
              //DescriptionOverride = "'Buzzsaw'  7.92x57mm Mauser  Skins: 0  \n\nThe MG42, or Maschinengewehr 42, was a German machine gun that terrorized Allied troops during World War II with a insane RPM of 1600.", //new item description
                DescriptionOverride = "'G18'  9×19mm Parabellum  Skins: 0              \n\nThe Glock 18 is a selective fire variant of the Glock 17, it can fire full-auto at a blistering firerate of up to 1,200 RPM.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/Glock/Glock_18_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/Glock/Glock_18.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.2f, 0.1285714f), new Vector2(-0.1985781f, 0.04487269f), new Vector2(-0.1704406f, 0.03202915f), new Vector2(-0.2f, -0.1029766f), new Vector2(-0.08816013f, -0.1285714f), new Vector2(-0.08442489f, -0.01883685f), new Vector2(0.03175112f, -0.01410767f), new Vector2(0.03016444f, 0.04265896f), new Vector2(0.2014219f, 0.04401372f), new Vector2(0.2f, 0.1285714f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Pistol/Glock/Glock_18_Slide.png"), Position: new Vector2(0f, 0.1f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.1f, BoltCover: null, BoltCoverPosition: new Vector2(0f, 0f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.09f);
                    Instance.GetComponent<FirearmBehaviour>().Automatic = true;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.072f, 0.116f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.13f, -0.016f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.07f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.2072f, 0.1145f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1f, 0.0286f, 0f);// Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0427f, 0.1426f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition + new Vector3(0.0285f, -0.0285f, 0); // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };
                }
            }
            );

            // Glock 19
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} Glock 19", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'G19'  9×19mm Parabellum  Skins: 0              \n\nThe Glock 19 is a compact Glock variant made primarily for law enforcement and military use, It was first produced in 1988.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/Glock/Glock_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/Glock/Glock.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.2f, 0.1285714f), new Vector2(-0.1985781f, 0.04487269f), new Vector2(-0.1704406f, 0.03202915f), new Vector2(-0.2f, -0.1029766f), new Vector2(-0.08816013f, -0.1285714f), new Vector2(-0.08442489f, -0.01883685f), new Vector2(0.03175112f, -0.01410767f), new Vector2(0.03016444f, 0.04265896f), new Vector2(0.2014219f, 0.04401372f), new Vector2(0.2f, 0.1285714f), };
                   
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Pistol/Glock/Glock_Slide.png"), Position: new Vector2(0f, 0.1f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.1f, BoltCover: null, BoltCoverPosition: new Vector2(0f, 0f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.09f);
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.072f, 0.116f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.13f, -0.016f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.06f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.2072f, 0.1145f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1f, 0.0286f, 0f);// Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0427f, -0.1426f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition + new Vector3(0.0285f, -0.0285f, 0); // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };

                }
            }
            );

            // Glock 43
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} Glock 43", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Pocket Glock'  9×19mm Parabellum  Skins: 0     \n\nThe Glock 43 is a ultracompact Glock variant, ideal for conealed carry, the downside is a lack of compatibility with other glock mags.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/Glock/Glock_43_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/Glock/Glock_43.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.2f, 0.1285714f), new Vector2(-0.2024066f, 0.04305829f), new Vector2(-0.1701393f, 0.04060688f), new Vector2(-0.2f, -0.07027201f), new Vector2(-0.08105043f, -0.09444495f), new Vector2(-0.08140025f, -0.0125556f), new Vector2(0.02768023f, -0.01428571f), new Vector2(0.02820886f, 0.0434251f), new Vector2(0.1445445f, 0.04285714f), new Vector2(0.1473883f, 0.1285714f), };
                    
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Pistol/Glock/Glock_43_Slide.png"), Position: new Vector2(0f, 0.1f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.1f, BoltCover: null, BoltCoverPosition: new Vector2(0f, 0f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.09f);
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.072f, 0.116f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.13f, -0.016f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.05f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.1532f, 0.1151f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1f, 0.0286f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0426f, 0.143f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition + new Vector3(0.0285f, -0.0285f, 0); // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };

                }
            }
            );

            // HiPoint
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} Hi-Point C-9", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Yeet Cannon'  9×19mm Parabellum  Skins: 0      \n\nThe Hi-Point C-9 is a very cheap American pistol, it is made of low quality parts, it's un-ergonomic and innacurate, but it works.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/Hipoint/HiPoint_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/Hipoint/HiPoint.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.169376f, 0.1454954f), new Vector2(-0.2013101f, 0.1153454f), new Vector2(-0.2015123f, 0.03656291f), new Vector2(-0.1735226f, 0.01735108f), new Vector2(-0.1947525f, -0.0309695f), new Vector2(-0.2f, -0.1428571f), new Vector2(-0.08777571f, -0.1428571f), new Vector2(-0.0560656f, -0.02934078f), new Vector2(0.02954154f, -0.02821725f), new Vector2(0.02800995f, 0.02838094f), new Vector2(0.1673434f, 0.03395602f), new Vector2(0.2f, 0.05789419f), new Vector2(0.2f, 0.1428571f), };

                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Pistol/Hipoint/HiPoint_Slide.png"), Position: new Vector2(0f, 0.1f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.08f, BoltCover: null, BoltCoverPosition: new Vector2(-0.1857f, 0.12857f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.09f);
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.03f, 0.1f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.13f, -0.05f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.07f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.2071f, 0.1f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1f, 0.0143f, 0f);// Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.04301f, 0.1556f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };

                }
            }
            );

            // USP
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} USP9", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'USP'  9×19mm Parabellum  Skins: 0              \n\nThe Heckler & Koch USP9 is a German made semi-automatic pistol, it was deisgned primarily for U.S Law enforcement markets.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/USP/USP_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/USP/USP.png");
                    
                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.2016876f, 0.1428571f), new Vector2(-0.2025693f, 0.08928433f), new Vector2(-0.2234644f, 0.07412659f), new Vector2(-0.2303903f, 0.03411525f), new Vector2(-0.1716341f, 0.02794365f), new Vector2(-0.1988577f, -0.1414422f), new Vector2(-0.08631126f, -0.1414422f), new Vector2(-0.08811474f, -0.02184707f), new Vector2(0.05524844f, 0.01092394f), new Vector2(0.05691536f, 0.05386744f), new Vector2(0.2002727f, 0.06225729f), new Vector2(0.2023829f, 0.1149441f), new Vector2(0.2299913f, 0.1155812f), new Vector2(0.2285714f, 0.1442721f), };

                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Pistol/USP/USP_Slide.png"), Position: new Vector2(0f, 0.1143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.1f, BoltCover: null, BoltCoverPosition: new Vector2(0f, 0f));
                    
                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.09f);
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.065f, 0.129f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.13f, -0.015f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.07f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.2378f, 0.1289f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1283f, 0.0429f, 0f);// Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0428f, 0.158f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };

                }
            }
            );

            // P2000
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} HK P2000", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'P2000'  9×19mm Parabellum  Skins: 0            \n\nThe Heckler & Koch P2000 is a German made Semi-Automatic pistol designed in 2001 targeted at law enforcement and military use.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/P2000/P2000_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/P2000/P2000.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1720104f, 0.1428571f), new Vector2(-0.1984781f, 0.1002463f), new Vector2(-0.1981865f, 0.03883369f), new Vector2(-0.1695636f, 0.007780299f), new Vector2(-0.2f, -0.110899f), new Vector2(-0.08826545f, -0.1398135f), new Vector2(-0.08233134f, -0.03148612f), new Vector2(0.02631122f, -0.02869323f), new Vector2(0.05959632f, 0.0551902f), new Vector2(0.2f, 0.06239453f), new Vector2(0.2f, 0.1428571f), };

                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Pistol/P2000/P2000_Slide.png"), Position: new Vector2(0f, 0.1143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.1f, BoltCover: null, BoltCoverPosition: new Vector2(0f, 0f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.09f);
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.048f, 0.128f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.13f, -0.018f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.07f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.209f, 0.1161f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1283f, 0.0429f, 0f);// Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0144f, 0.1572f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };

                }
            }
            );

            // P250
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} SIG P250", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'P250'  .45 ACP  Skins: 0             \n\nThe SIG Sauer P250 is a 2007 semi-automatic pistol manufactured by SIG Sauer Inc. the gun lacks a external safety mechanism.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/P250/P250_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/P250/P250.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1842841f, 0.1428571f), new Vector2(-0.185418f, 0.07435674f), new Vector2(-0.2167748f, 0.05315769f), new Vector2(-0.1597674f, 0.02094371f), new Vector2(-0.1912076f, -0.145165f), new Vector2(-0.075719f, -0.1428571f), new Vector2(-0.04700716f, 0.004207127f), new Vector2(0.07136622f, 0.005071193f), new Vector2(0.07356846f, 0.05761309f), new Vector2(0.2142857f, 0.06231092f), new Vector2(0.2142857f, 0.1428571f), };

                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Pistol/P250/P250_Slide.png"), Position: new Vector2(0.01428f, 0.1143f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.1f, BoltCover: null, BoltCoverPosition: new Vector2(0f, 0f));

                    //This line is used to set the bolt animation duration.
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.09f);

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.09f);
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.048f, 0.128f);
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.23f, 0.107f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.13f, -0.018f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.06f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.224f, 0.1145f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.143f, 0.0429f, 0f);// Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.02894f, 0.1572f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_45;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_3.wav")
                    };

                }
            }
            );

            // P226
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} P226", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'P226'  9×19mm Parabellum  Skins: 0             \n\nThe SIG Sauer P226 is a semi-automatic pistol based on the P220, unlike the P220 the weapon feeds from double stacked magazines.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/P226/P226_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/P226/P226.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1848367f, 0.1417664f), new Vector2(-0.1844139f, 0.08351211f), new Vector2(-0.2185667f, 0.07648581f), new Vector2(-0.1588885f, 0.02330711f), new Vector2(-0.1848366f, -0.1144988f), new Vector2(-0.07318372f, -0.1428571f), new Vector2(-0.0478341f, -0.001041308f), new Vector2(0.06522513f, 0.001838066f), new Vector2(0.06844939f, 0.0584996f), new Vector2(0.2142857f, 0.05714286f), new Vector2(0.2142857f, 0.1428571f), };

                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Pistol/P226/P226_Slide.png"), Position: new Vector2(0.01428f, 0.1f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.1f, BoltCover: ModAPI.LoadSprite("Guns/Pistol/P226/P226_BoltCover.png"), BoltCoverPosition: new Vector2(0.07142f, 0.07142f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.09f);
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.042f, 0.129f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.112f, -0.016f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.06f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.2236f, 0.1136f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.143f, 0.0429f, 0f);// Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0291f, 0.1567f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };

                }
            }
            );

            // Tec9
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} TEC-9", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'TEC-9'  9×19mm Parabellum  Skins: 0            \n\nThe TEC-9 is a machine pistol designed by Intratec in 1984, it was intended for military use but is instead often associated with crime.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/Tec9/Tec9_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/Tec9/Tec9.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.2857143f, 0.2142857f), new Vector2(-0.2828933f, 0.1375205f), new Vector2(-0.2507072f, 0.09477893f), new Vector2(-0.2857143f, -0.09588034f), new Vector2(-0.2049771f, -0.09819643f), new Vector2(-0.1492514f, 0.0343982f), new Vector2(-0.0293575f, 0.03899449f), new Vector2(-0.03003006f, -0.1573991f), new Vector2(0.05508304f, -0.1544819f), new Vector2(0.05998093f, 0.06988432f), new Vector2(0.08583383f, 0.07637638f), new Vector2(0.08332914f, 0.1232053f), new Vector2(0.2561156f, 0.1274092f), new Vector2(0.25642f, 0.1553742f), new Vector2(0.2842557f, 0.1574878f), new Vector2(0.2861346f, 0.1833778f), new Vector2(0.2592714f, 0.1853673f), new Vector2(0.2550831f, 0.2142857f), };

                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Pistol/Tec9/Tec9_Bolt.png"), Position: new Vector2(0.0143f, 0.2f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.08f, BoltCover: ModAPI.LoadSprite("Guns/Pistol/Tec9/Tec9_BoltCover.png"), BoltCoverPosition: new Vector2(-0.0714f, 0.2f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.09f);
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.0143f, 0.2f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.22f, 0.014f, 0), new Vector3(0.098f, 0.102f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.07f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.294f, 0.1715f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1571f, 0.1143f, 0f);// Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.1f, 0.2283f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };

                }
            }
            );

            // VZ 61
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} Vz.61", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Skorpion'  .32 ACP  Skins: 0                   \n\nThe Skorpion vz. 61 is a Czech made machine pistol designed by Miroslav Rybar in the late 1950's and started production in 1961.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/VZ61/VZ61_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/VZ61/VZ61.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.02171671f, 0.1722424f), new Vector2(-0.06812015f, 0.1022008f), new Vector2(-0.5102094f, -0.01655046f), new Vector2(-0.5195234f, 0.08236618f), new Vector2(-0.5532821f, 0.1130396f), new Vector2(-0.595952f, 0.09344514f), new Vector2(-0.6023132f, -0.02488734f), new Vector2(-0.543757f, -0.02576423f), new Vector2(-0.5142916f, -0.05851565f), new Vector2(-0.06172505f, 0.0493318f), new Vector2(-0.06413892f, 0.003563194f), new Vector2(-0.03678924f, -0.009238809f), new Vector2(-0.05508642f, -0.2f), new Vector2(0.04908347f, -0.2005451f), new Vector2(0.04942986f, -0.05355963f), new Vector2(0.1766704f, -0.05466391f), new Vector2(0.2176707f, 0.02741338f), new Vector2(0.2999782f, -0.2115657f), new Vector2(0.3709998f, -0.1451703f), new Vector2(0.3120595f, -0.03467235f), new Vector2(0.3181271f, 0.04218742f), new Vector2(0.5079477f, 0.08743535f), new Vector2(0.5084102f, 0.1092421f), new Vector2(0.6021709f, 0.1171671f), new Vector2(0.6025537f, 0.1383649f), new Vector2(0.5098527f, 0.1464829f), new Vector2(0.5074747f, 0.1722424f), };

                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Pistol/VZ61/VZ61_Bolt.png"), Position: new Vector2(0.3286f, 0.12857f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.08f, BoltCover: ModAPI.LoadSprite("Guns/Pistol/VZ61/VZ61_BoltCover.png"), BoltCoverPosition: new Vector2(0.15714f, 0.12857f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.09f);
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.07f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.278f, 0.161f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0f, -0.063f, 0), new Vector3(0.379f, 0.055f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.07f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.6073f, 0.1286f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.4714f, 0.0714f, 0f);// Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.157f, 0.1852f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_Tokarev;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_3.wav")
                    };

                }
            }
            );

            // VZ 61 Folded
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Submachine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} Vz.61 Folded Stock", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Skorpion'  .32 ACP  Skins: 0                   \n\nThe Skorpion vz. 61 is a Czech made machine pistol designed by Miroslav Rybar in the late 1950's and started production in 1961.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/VZ61/VZ61_Fold_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/VZ61/VZ61_Fold.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.02638664f, 0.1953737f), new Vector2(-0.05502474f, 0.1657618f), new Vector2(-0.05757818f, 0.1153658f), new Vector2(-0.03195199f, 0.07695226f), new Vector2(-0.05947794f, 0.04340786f), new Vector2(-0.03839087f, -0.03229307f), new Vector2(-0.05645738f, -0.1953737f), new Vector2(0.05911385f, -0.2001902f), new Vector2(0.05842f, -0.06155299f), new Vector2(0.1718899f, -0.05699305f), new Vector2(0.2272339f, 0.01974767f), new Vector2(0.2915395f, -0.1953737f), new Vector2(0.3594341f, -0.1536089f), new Vector2(0.3034852f, 0.02649543f), new Vector2(0.5056322f, 0.08528055f), new Vector2(0.554271f, 0.02465975f), new Vector2(0.6038232f, 0.06485072f), new Vector2(0.6010485f, 0.1699869f), new Vector2(0.5099192f, 0.1684942f), new Vector2(0.5144141f, 0.2046263f), };

                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Pistol/VZ61/VZ61_Bolt.png"), Position: new Vector2(0.3286f, 0.12857f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.08f, BoltCover: ModAPI.LoadSprite("Guns/Pistol/VZ61/VZ61_BoltCover.png"), BoltCoverPosition: new Vector2(0.15714f, 0.12857f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.09f);
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.07f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.278f, 0.161f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0f, -0.063f, 0), new Vector3(0.379f, 0.055f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.07f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.6073f, 0.1286f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.4714f, 0.0714f, 0f);// Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.157f, 0.1852f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(1f, 1f, 1f);
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_Tokarev;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_3.wav")
                    };

                }
            }
            );

            // Ruger
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} Ruger", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Ruger'  .22 LR  Skins: 0                       \n\nThe Ruger Standard is a semi-automatic .22 pistol developed in 1949, it was the first product Sturm, Ruger & Co ever manufactured.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/Luger/Ruger_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/Luger/Ruger.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.1948594f, 0.1046908f), new Vector2(-0.1534841f, 0.1031596f), new Vector2(-0.1861421f, 0.1287886f), new Vector2(-0.225673f, 0.09905002f), new Vector2(-0.2280421f, 0.05523933f), new Vector2(-0.2024698f, 0.004246134f), new Vector2(-0.2254861f, -0.01182165f), new Vector2(-0.2275224f, -0.08691263f), new Vector2(-0.1441392f, -0.1296397f), new Vector2(-0.1199397f, -0.01077873f), new Vector2(-0.02928768f, -0.01254072f), new Vector2(0.09064461f, 0.0677861f), new Vector2(0.2291571f, 0.07225507f), new Vector2(0.2200173f, 0.1337174f), };

                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Pistol/Luger/Ruger_Bolt.png"), Position: new Vector2(-0.0714f, 0.08571f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.08f, BoltCover: ModAPI.LoadSprite("Guns/Pistol/Luger/Ruger_BoltCover.png"), BoltCoverPosition: new Vector2(-0.1571f, 0.08571f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.09f);
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.0714f, 0.08571f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.169f, -0.022f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.06f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.2385f, 0.0859f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.15714f, 0.0572f, 0f);// Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0715f, 0.1144f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_22;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/QBZ_Suppressed_3.wav")
                    };

                }
            }
            );

            // Luger
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} Luger P08", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Luger'  9×19mm Parabellum  Skins: 0            \n\nThe Luger P08 Pistol was a 9x19mm German made pistol that first entered service into the German army in the early 1900's.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/Luger/Luger_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/Luger/Luger.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.2672298f, 0.1586612f), new Vector2(-0.1544831f, 0.1615558f), new Vector2(-0.1625341f, 0.181333f), new Vector2(-0.2698138f, 0.1828673f), new Vector2(-0.3f, 0.1634966f), new Vector2(-0.3001068f, 0.09603988f), new Vector2(-0.2748776f, 0.08329867f), new Vector2(-0.2229854f, 0.0001378357f), new Vector2(-0.273581f, -0.07147138f), new Vector2(-0.2555646f, -0.1877341f), new Vector2(-0.1585335f, -0.1857143f), new Vector2(-0.1275895f, -0.04878318f), new Vector2(-0.02069759f, -0.04283866f), new Vector2(0.01482746f, 0.03866675f), new Vector2(0.06854211f, 0.04688969f), new Vector2(0.07071228f, 0.09552908f), new Vector2(0.2979802f, 0.1014311f), new Vector2(0.2919208f, 0.1917737f), };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.056f, 0.101f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.143f, -0.046f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.06f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.2371f, 0.1f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.15714f, 0.0718f, 0f);// Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0149f, 0.1284f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    // Sets casing sprite
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/AR/_Shared/AR_Casing.png");
                    Instance.GetComponentInChildren<ParticleSystemRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;
                    Instance.transform.Find("BulletCasing(Clone)").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_3.wav"),
                    };

                }
            }
            );

            // Rhino Long
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} Chiappa Rhino", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Rhino'  .357 Magnum  Skins: 0                  \n\nThe Chiappa Rhino is an Italian made revolver with a unique profile and polygonal cylinder, it was designed in 2008 and based on the Mateba.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/Rhino/Rhino_Long_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/Rhino/Rhino_Long.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.193287f, 0.1577867f), new Vector2(-0.2472145f, 0.09897964f), new Vector2(-0.2875845f, 0.09355758f), new Vector2(-0.2581811f, 0.02945321f), new Vector2(-0.3142857f, -0.09729792f), new Vector2(-0.2089383f, -0.1552727f), new Vector2(-0.1657157f, -0.04331113f), new Vector2(-0.1356005f, -0.0760949f), new Vector2(-0.0617556f, -0.07340562f), new Vector2(0.06741069f, 0.07389306f), new Vector2(0.1908138f, 0.07188223f), new Vector2(0.1976709f, 0.04503448f), new Vector2(0.3161559f, 0.04929956f), new Vector2(0.3142857f, 0.1571429f), };

                    //This creates a new GameObject to hold the looping texture of the revolver's cylinder.
                    GameObject Cylinder = new GameObject("Cylinder");
                    Cylinder.transform.SetParent(Instance.transform, false);
                    //This sets the position of the cylinder .
                    Cylinder.transform.localPosition = new Vector3(-0.0857f, 0.0857f, 0);
                    //This sets the sprite of the cylinder to the looping texture.
                    Cylinder.AddComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol//Rhino/Rhino_Cylinder.png");

                    //This sets up the Cock/Hammer of the revolver. It animates when activated, not when it fires, meaning it has a very slight delay.  0
                    CamsEasyMethods.SetUpGunCock(Instance, ModAPI.LoadSprite("Guns/Pistol/Rhino/Rhino_Hammer.png"), new Vector2(-0.198f, 0.098f), new Vector3(0f, 0f, -0.5f));
                    //This sets up the revolver's cylinder looping texture.
                    CamsEasyMethods.SetUpGunLoopingTexture(Cylinder, ModAPI.LoadTexture("Guns/Pistol/Rhino/Rhino_Cylinder.png"), ModAPI.LoadTexture("Guns/Pistol/Rhino/Rhino_Mask.png"));
                    //And here we make it so when you activate the revolver, it calls a function that makes the cylinder spin
                    Instance.AddComponent<UseEventTrigger>().Action = () =>
                    {
                        //This calls a function that adds rotation to the cylinder, VVVVVV change this value to change how much it moves.
                        Cylinder.GetComponent<LoopTextureHandler>().AddRotationBurst(0.37f);
                    };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().FireDelay = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().EjectShells = false;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.0304f, 0.0713f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.23f, -0.052f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.07f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.323f, 0.1146f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2714f, 0.0286f, 0f);// Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0714f, 0.1707f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_357;

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/MG42_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/MG42_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/MG42_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition + new Vector3(0.0285f, 0, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/PKM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/PKM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/PKM_Suppressed_3.wav")
                    };

                }
            }
            );

            // Rhino Short
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} Chiappa Rhino Short", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Rhino'  .357 Magnum  Skins: 0                  \n\nThe Chiappa Rhino is an Italian made revolver with a unique profile and polygonal cylinder, it was designed in 2008 and based on the Mateba.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/Rhino/Rhino_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/Rhino/Rhino.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1476357f, 0.1552727f), new Vector2(-0.1180933f, 0.09708858f), new Vector2(-0.2010382f, 0.09625969f), new Vector2(-0.1753751f, 0.02665144f), new Vector2(-0.2352201f, -0.110389f), new Vector2(-0.1200028f, -0.1571429f), new Vector2(-0.08936489f, -0.05394677f), new Vector2(0.01698047f, -0.07356505f), new Vector2(0.1237672f, 0.04473419f), new Vector2(0.3124156f, 0.04555926f), new Vector2(0.3142857f, 0.1571429f), };

                    //This creates a new GameObject to hold the looping texture of the revolver's cylinder.
                    GameObject Cylinder = new GameObject("Cylinder");
                    Cylinder.transform.SetParent(Instance.transform, false);
                    //This sets the position of the cylinder .
                    Cylinder.transform.localPosition = new Vector3(0f, 0.0857f, 0);
                    //This sets the sprite of the cylinder to the looping texture.
                    Cylinder.AddComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol//Rhino/Rhino_Cylinder.png");


                    //This sets up the Cock/Hammer of the revolver. It animates when activated, not when it fires, meaning it has a very slight delay.
                    CamsEasyMethods.SetUpGunCock(Instance, ModAPI.LoadSprite("Guns/Pistol/Rhino/Rhino_Hammer.png"), new Vector2(-0.1129f, 0.098f), new Vector3(0f, 0f, -0.5f));
                    //This sets up the revolver's cylinder looping texture.
                    CamsEasyMethods.SetUpGunLoopingTexture(Cylinder, ModAPI.LoadTexture("Guns/Pistol/Rhino/Rhino_Cylinder.png"), ModAPI.LoadTexture("Guns/Pistol/Rhino/Rhino_Mask.png"));
                    //And here we make it so when you activate the revolver, it calls a function that makes the cylinder spin
                    Instance.AddComponent<UseEventTrigger>().Action = () =>
                    {
                        //This calls a function that adds rotation to the cylinder, VVVVVV change this value to change how much it moves.
                        Cylinder.GetComponent<LoopTextureHandler>().AddRotationBurst(0.37f);
                    };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().FireDelay = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().EjectShells = false;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.0304f, 0.0713f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.15f, -0.045f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.07f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.323f, 0.1146f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.2714f, 0.0286f, 0f);// Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.0145f, 0.1707f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_357;

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/MG42_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/MG42_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/MG42_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition + new Vector3(0.0285f,0,0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/PKM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/PKM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/PKM_Suppressed_3.wav")
                    };

                }
            }
            );

            // RSh-12
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} RSh-12", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'RSh'  12.7×55mm  Skins: 0                  \n\nDesigned in 2000, The RSh-12 is a Russian-made revolver chambered in 12.7×55mm, it has alot in common with the Mateba and Chiappa Rhino.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/Rsh12/rsh12_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/Rsh12/rsh12.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.2820226f, 0.1719794f), new Vector2(0.2820377f, 0.1453226f), new Vector2(-0.1403427f, 0.1456955f), new Vector2(-0.1415567f, 0.1717267f), new Vector2(-0.2033344f, 0.1714286f), new Vector2(-0.2066135f, 0.06635728f), new Vector2(-0.2815405f, 0.0621483f), new Vector2(-0.3428572f, -0.1714286f), new Vector2(-0.2310819f, -0.1714286f), new Vector2(-0.2256633f, -0.06003132f), new Vector2(-0.174308f, -0.05969223f), new Vector2(-0.1609614f, -0.08308798f), new Vector2(-0.0918858f, -0.08352792f), new Vector2(-0.05580475f, -0.00135427f), new Vector2(0.0001163073f, 0.004155355f), new Vector2(0.0004241951f, 0.02627898f), new Vector2(0.3128245f, 0.03149386f), new Vector2(0.3141145f, 0.05594852f), new Vector2(0.3393831f, 0.05585206f), new Vector2(0.3396531f, 0.08782198f), new Vector2(0.3137918f, 0.08654131f), new Vector2(0.3153272f, 0.1739313f), };

                    //This creates a new GameObject to hold the looping texture of the revolver's cylinder.
                    GameObject Cylinder = new GameObject("Cylinder");
                    Cylinder.transform.SetParent(Instance.transform, false);
                    //This sets the position of the cylinder .
                    Cylinder.transform.localPosition = new Vector3(-0.1143f, 0.07143f, 0);
                    //This sets the sprite of the cylinder to the looping texture.
                    Cylinder.AddComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol//Rsh12/rsh12_Cylinder.png");

                    //This sets up the Cock/Hammer of the revolver. It animates when activated, not when it fires, meaning it has a very slight delay.  0
                    CamsEasyMethods.SetUpGunCock(Instance, ModAPI.LoadSprite("Guns/Pistol/Rhino/Rhino_Hammer.png"), new Vector2(-0.198f, 0.055f), new Vector3(0f, 0f, -0.5f));
                    //This sets up the revolver's cylinder looping texture.
                    CamsEasyMethods.SetUpGunLoopingTexture(Cylinder, ModAPI.LoadTexture("Guns/Pistol/Rsh12/rsh12_Cylinder.png"), ModAPI.LoadTexture("Guns/Pistol/Rhino/Rhino_Mask.png"));
                    //And here we make it so when you activate the revolver, it calls a function that makes the cylinder spin
                    Instance.AddComponent<UseEventTrigger>().Action = () =>
                    {
                        //This calls a function that adds rotation to the cylinder, VVVVVV change this value to change how much it moves.
                        Cylinder.GetComponent<LoopTextureHandler>().AddRotationBurst(0.37f);
                    };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().FireDelay = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().EjectShells = false;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.0304f, 0.0713f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.23f, -0.052f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.07f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.3513f, 0.0715f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1856f, 0.0144f, 0f);// Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.1f, 0.1571f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_50AE;

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/K98K_3.wav"),
                    };


                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/K98K_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/K98K_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/K98K_Suppressed_3.wav")
                    };

                }
            }
            );

            // Cattleman
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} Model 1873", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Cattleman'  .45 Colt  Skins: 0                 \n\nThe Colt Model 1873 was a single action revolver designed for use as the U.S Governments service revolver in the late 1800's.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/Western/Cattleman_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/Western/Cattleman.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.2714286f, 0.1285714f), new Vector2(-0.1232464f, 0.1293611f), new Vector2(-0.1308115f, 0.1017989f), new Vector2(-0.1864776f, 0.130653f), new Vector2(-0.1598115f, 0.07895969f), new Vector2(-0.2397381f, 0.0124122f), new Vector2(-0.2714286f, -0.1285714f), new Vector2(-0.1860335f, -0.1310652f), new Vector2(-0.1550747f, -0.01396652f), new Vector2(-0.1023759f, -0.01539715f), new Vector2(-0.06569925f, -0.04329271f), new Vector2(-0.01301014f, 0.01205572f), new Vector2(-0.01272492f, 0.01235533f), new Vector2(0.01450019f, 0.01348244f), new Vector2(0.0458636f, 0.06931556f), new Vector2(0.2701817f, 0.09896594f), };

                    //This creates a new GameObject to hold the looping texture of the revolver's cylinder.
                    GameObject Cylinder = new GameObject("Cylinder");
                    Cylinder.transform.SetParent(Instance.transform, false);
                    //This sets the position of the cylinder .
                    Cylinder.transform.localPosition = new Vector3(-0.0428f, 0.0714f, 0);
                    //This sets the sprite of the cylinder to the looping texture.
                    Cylinder.AddComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/Western/Cattleman_Cylinder.png");
                    //This sets up the Cock/Hammer of the revolver. It animates when activated, not when it fires, meaning it has a very slight delay.
                    CamsEasyMethods.SetUpGunCock(Instance, ModAPI.LoadSprite("Guns/Pistol/Python/Hammer.png"), new Vector2(-0.12714f, 0.07f), new Vector3(0f, 0f, -0.5f));
                    //This sets up the revolver's cylinder looping texture.
                    CamsEasyMethods.SetUpGunLoopingTexture(Cylinder, ModAPI.LoadTexture("Guns/Pistol/Western/Cattleman_Cylinder.png"), ModAPI.LoadTexture("Guns/Pistol/Western/Cattleman_Mask.png"));
                    //And here we make it so when you activate the revolver, it calls a function that makes the cylinder spin
                    Instance.AddComponent<UseEventTrigger>().Action = () =>
                    {
                        //This calls a function that adds rotation to the cylinder, VVVVVV change this value to change how much it moves.
                        Cylinder.GetComponent<LoopTextureHandler>().AddRotationBurst(0.37f);
                    };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().FireDelay = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().EjectShells = false;
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.2f, -0.03f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.06f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.2778f, 0.1145f);
                    Instance.transform.Find("BarrelAttachment").gameObject.SetActive(false);// Sets position of grip
                    Instance.transform.Find("ScopeAttachment").gameObject.SetActive(false); // Sets position of scope

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_45;

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_3.wav"),
                    };
                }
            }
            );

            // Rem1858
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} Remington 1858", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Model 1858'  .44 Percussion  Skins: 0          \n\nThe Remington Model 1858 was a percussion revolver designed in the mid 1800's, it was a secondary for troops of the Union Army.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/Western/Rem_1858_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/Western/Rem_1858.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1530856f, 0.1246603f), new Vector2(-0.1582958f, 0.09746594f), new Vector2(-0.2132879f, 0.1257877f), new Vector2(-0.1979715f, 0.07655063f), new Vector2(-0.2953342f, -0.04890404f), new Vector2(-0.3f, -0.1285714f), new Vector2(-0.211001f, -0.1285714f), new Vector2(-0.1802978f, -0.01601518f), new Vector2(-0.0946537f, -0.04316489f), new Vector2(-0.03969992f, 0.008712169f), new Vector2(0.008291028f, 0.01353598f), new Vector2(0.1944106f, 0.09640695f), new Vector2(0.2984447f, 0.09884703f), new Vector2(0.3f, 0.1285714f), };

                    //This creates a new GameObject to hold the looping texture of the revolver's cylinder.
                    GameObject Cylinder = new GameObject("Cylinder");
                    Cylinder.transform.SetParent(Instance.transform, false);
                    //This sets the position of the cylinder .
                    Cylinder.transform.localPosition = new Vector3(-0.0714f, 0.0714f, 0);
                    //This sets the sprite of the cylinder to the looping texture.
                    Cylinder.AddComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/Western/Rem_1858_Cylinder.png");
                    //This sets up the Cock/Hammer of the revolver. It animates when activated, not when it fires, meaning it has a very slight delay. // 0.03
                    CamsEasyMethods.SetUpGunCock(Instance, ModAPI.LoadSprite("Guns/Pistol/Python/Hammer.png"), new Vector2(-0.155718f, 0.07f), new Vector3(0f, 0f, -0.5f));
                    //This sets up the revolver's cylinder looping texture.
                    CamsEasyMethods.SetUpGunLoopingTexture(Cylinder, ModAPI.LoadTexture("Guns/Pistol/Western/Rem_1858_Cylinder.png"), ModAPI.LoadTexture("Guns/Pistol/Western/Cattleman_Mask.png"));
                    //And here we make it so when you activate the revolver, it calls a function that makes the cylinder spin
                    Instance.AddComponent<UseEventTrigger>().Action = () =>
                    {
                        //This calls a function that adds rotation to the cylinder, VVVVVV change this value to change how much it moves.
                        Cylinder.GetComponent<LoopTextureHandler>().AddRotationBurst(0.37f);
                    };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().FireDelay = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().EjectShells = false;
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.234f, -0.03f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.06f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.306f, 0.1145f);
                    Instance.transform.Find("BarrelAttachment").gameObject.SetActive(false);// Sets position of grip
                    Instance.transform.Find("ScopeAttachment").gameObject.SetActive(false); // Sets position of scope
                }
            }
            );
            
            // Webley
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} Webley Mk. VI", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Webley'  .45 ACP  Skins: 0                     \n\nThe Webley Revolver was a British top-breaking service revolver, it was used by Commonwealth troops as a sidearm during both WW1 and WW2.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/Western/Webley_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/Western/Webley.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1259609f, 0.1116877f), new Vector2(-0.1279584f, 0.08540638f), new Vector2(-0.1692561f, 0.1135416f), new Vector2(-0.1517916f, 0.05913083f), new Vector2(-0.1793378f, 0.05591694f), new Vector2(-0.2411252f, -0.02599232f), new Vector2(-0.2428571f, -0.1142857f), new Vector2(-0.1571932f, -0.1160177f), new Vector2(-0.1549026f, -0.02943444f), new Vector2(-0.1026129f, -0.02943205f), new Vector2(-0.09317908f, -0.0545476f), new Vector2(-0.04417562f, -0.05482739f), new Vector2(-0.008204766f, -0.002244774f), new Vector2(0.01510143f, 0.001744557f), new Vector2(0.07677913f, 0.08389531f), new Vector2(0.2436957f, 0.08618073f), new Vector2(0.2428571f, 0.1142857f), };

                    //This creates a new GameObject to hold the looping texture of the revolver's cylinder.
                    GameObject Cylinder = new GameObject("Cylinder");
                    Cylinder.transform.SetParent(Instance.transform, false);
                    //This sets the position of the cylinder .
                    Cylinder.transform.localPosition = new Vector3(-0.05714f, 0.05714f, 0);
                    //This sets the sprite of the cylinder to the looping texture.
                    Cylinder.AddComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/Western/Webley_Cylinder.png");
                    //This sets up the Cock/Hammer of the revolver. It animates when activated, not when it fires, meaning it has a very slight delay.
                    CamsEasyMethods.SetUpGunCock(Instance, ModAPI.LoadSprite("Guns/Pistol/Python/Hammer.png"), new Vector2(-0.1271f, 0.05573f), new Vector3(0f, 0f, -0.5f));
                    //This sets up the revolver's cylinder looping texture.
                    CamsEasyMethods.SetUpGunLoopingTexture(Cylinder, ModAPI.LoadTexture("Guns/Pistol/Western/Webley_Cylinder.png"), ModAPI.LoadTexture("Guns/Pistol/Western/Webley_Mask.png"));
                    //And here we make it so when you activate the revolver, it calls a function that makes the cylinder spin
                    Instance.AddComponent<UseEventTrigger>().Action = () =>
                    {
                        //This calls a function that adds rotation to the cylinder, VVVVVV change this value to change how much it moves.
                        Cylinder.GetComponent<LoopTextureHandler>().AddRotationBurst(0.37f);
                    };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().FireDelay = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().EjectShells = false;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.248f, 0.1f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.185f, -0.015f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.06f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.306f, 0.1145f);
                    Instance.transform.Find("BarrelAttachment").gameObject.SetActive(false);// Sets position of grip
                    Instance.transform.Find("ScopeAttachment").gameObject.SetActive(false); // Sets position of scope

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_45;

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_3.wav"),
                    };
                }
            }
            );
            
            // Python
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} Colt Python", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Python'  .357 Magnum  Skins: 0                 \n\nThe Colt Python is a U.S Made double-action revolver, they were first produced in 1955 and have been a popular revolver ever since.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/Python/PythonLong_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/Python/PythonLong.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1629596f, 0.1267013f), new Vector2(-0.204178f, 0.1301898f), new Vector2(-0.1918791f, 0.07452034f), new Vector2(-0.2364326f, 0.0226616f), new Vector2(-0.2714286f, -0.1285714f), new Vector2(-0.1601578f, -0.1285714f), new Vector2(-0.1301187f, -0.02090497f), new Vector2(-0.0979789f, -0.04293001f), new Vector2(-0.02104032f, -0.03978483f), new Vector2(0.03949787f, 0.0209271f), new Vector2(0.04422125f, 0.06631402f), new Vector2(0.2695584f, 0.06852022f), new Vector2(0.2714286f, 0.1285714f), };

                    //This creates a new GameObject to hold the looping texture of the revolver's cylinder.
                    GameObject Cylinder = new GameObject("Cylinder");
                    Cylinder.transform.SetParent(Instance.transform, false);
                    //This sets the position of the cylinder .
                    Cylinder.transform.localPosition = new Vector3(-0.043f, 0.071f, 0);
                    //This sets the sprite of the cylinder to the looping texture.
                    Cylinder.AddComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/Python/PythonLongLoop.png");
                    //This sets up the Cock/Hammer of the revolver. It animates when activated, not when it fires, meaning it has a very slight delay.
                    CamsEasyMethods.SetUpGunCock(Instance, ModAPI.LoadSprite("Guns/Pistol/Python/Hammer.png"), new Vector2(-0.156f, 0.07f), new Vector3(0f, 0f, -0.5f));
                    //This sets up the revolver's cylinder looping texture.
                    CamsEasyMethods.SetUpGunLoopingTexture(Cylinder, ModAPI.LoadTexture("Guns/Pistol/Python/PythonLongLoop.png"), ModAPI.LoadTexture("Guns/Pistol/Python/PythonLongMask.png"));
                    //And here we make it so when you activate the revolver, it calls a function that makes the cylinder spin
                    Instance.AddComponent<UseEventTrigger>().Action = () =>
                    {
                        //This calls a function that adds rotation to the cylinder, VVVVVV change this value to change how much it moves.
                        Cylinder.GetComponent<LoopTextureHandler>().AddRotationBurst(0.37f);
                    };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().FireDelay = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().EjectShells = false;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.0304f, 0.0713f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.2f, -0.046f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.07f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.2778f, 0.1031f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1427f, 0.0573f, 0f);// Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0f, 0.1427f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_357;

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_3.wav")
                    };
                }
            }
            );

            // Python Short
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} Colt Python Short", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Python'  .357 Magnum  Skins: 0                 \n\nThe Colt Python is a U.S Made double-action revolver, they were first produced in 1955 and have been a popular revolver ever since.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/Python/PythonShort_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/Python/PythonShort.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.09833609f, 0.1267013f), new Vector2(-0.158212f, 0.1306877f), new Vector2(-0.1284996f, 0.07630184f), new Vector2(-0.1702327f, 0.02118582f), new Vector2(-0.2142857f, -0.1285714f), new Vector2(-0.1016639f, -0.1285714f), new Vector2(-0.09457084f, -0.04148912f), new Vector2(0.03381415f, -0.04107275f), new Vector2(0.09914363f, 0.01995092f), new Vector2(0.1002063f, 0.06613096f), new Vector2(0.2131842f, 0.06712173f), new Vector2(0.2142857f, 0.1285714f), };

                    //This creates a new GameObject to hold the looping texture of the revolver's cylinder.
                    GameObject Cylinder = new GameObject("Cylinder");
                    Cylinder.transform.SetParent(Instance.transform, false);
                    //This sets the position of the cylinder .
                    Cylinder.transform.localPosition = new Vector3(0.0143f, 0.07143f, 0);
                    //This sets the sprite of the cylinder to the looping texture.
                    Cylinder.AddComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/Python/PythonLongLoop.png");
                    //This sets up the Cock/Hammer of the revolver. It animates when activated, not when it fires, meaning it has a very slight delay.
                    CamsEasyMethods.SetUpGunCock(Instance, ModAPI.LoadSprite("Guns/Pistol/Python/Hammer.png"), new Vector2(-0.098f, 0.07f), new Vector3(0f, 0f, -0.5f));
                    //This sets up the revolver's cylinder looping texture.
                    CamsEasyMethods.SetUpGunLoopingTexture(Cylinder, ModAPI.LoadTexture("Guns/Pistol/Python/PythonLongLoop.png"), ModAPI.LoadTexture("Guns/Pistol/Python/PythonLongMask.png"));
                    //And here we make it so when you activate the revolver, it calls a function that makes the cylinder spin
                    Instance.AddComponent<UseEventTrigger>().Action = () =>
                    {
                        //This calls a function that adds rotation to the cylinder, VVVVVV change this value to change how much it moves.
                        Cylinder.GetComponent<LoopTextureHandler>().AddRotationBurst(0.37f);
                    };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().FireDelay = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().EjectShells = false;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.0304f, 0.0713f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.15f, -0.04f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.06f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.2196f, 0.1f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.17143f, 0.05715f, 0f);// Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.0571f, 0.1423f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_357;

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/SVD_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/SVD_Suppressed_3.wav")
                    };

                }
            }
            );

            // Snub Nose Revolver
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} S&W Model 36", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Snubby'  .38 Special  Skins: 1                 \n\nThe Smith & Wesson Model 36 is a snub-nose revolver, it was designed post WW2 as a compact and conceilable revolver for self defense.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/Snub/Snub_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Pistol/Snub/Snub.png"),
                        ModAPI.LoadSprite("Guns/Pistol/Snub/Snub_Black.png")
                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/Snub/Snub.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.08748153f, 0.1043732f), new Vector2(-0.1401451f, 0.1087651f), new Vector2(-0.1180626f, 0.05636282f), new Vector2(-0.1666329f, -0.001846969f), new Vector2(-0.1714286f, -0.1142857f), new Vector2(-0.08542486f, -0.1142857f), new Vector2(-0.05675696f, -0.03777246f), new Vector2(0.05258334f, -0.04893635f), new Vector2(0.08671098f, -0.0205146f), new Vector2(0.08385696f, 0.05157236f), new Vector2(0.1738399f, 0.05257847f), new Vector2(0.1714286f, 0.1142857f), };
                    
                    //This creates a new GameObject to hold the looping texture of the revolver's cylinder.
                    GameObject Cylinder = new GameObject("Cylinder");
                    Cylinder.transform.SetParent(Instance.transform, false);
                    //This sets the position of the cylinder .
                    Cylinder.transform.localPosition = new Vector3(0.01428f, 0.05714f, 0);
                    //This sets the sprite of the cylinder to the looping texture.
                    Cylinder.AddComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/Snub/Snub_Cylinder.png");
                    //This sets up the Cock/Hammer of the revolver. It animates when activated, not when it fires, meaning it has a very slight delay.
                    CamsEasyMethods.SetUpGunCock(Instance, ModAPI.LoadSprite("Guns/Pistol/Python/Hammer.png"), new Vector2(-0.085f, 0.057f), new Vector3(0f, 0f, -0.5f));
                    //This sets up the revolver's cylinder looping texture.
                    CamsEasyMethods.SetUpGunLoopingTexture(Cylinder, ModAPI.LoadTexture("Guns/Pistol/Snub/Snub_Cylinder.png"), ModAPI.LoadTexture("Guns/Pistol/Snub/Snub_Mask.png"));
                    //And here we make it so when you activate the revolver, it calls a function that makes the cylinder spin
                    Instance.AddComponent<UseEventTrigger>().Action = () =>
                    {
                        //This calls a function that adds rotation to the cylinder, VVVVVV change this value to change how much it moves.
                        Cylinder.GetComponent<LoopTextureHandler>().AddRotationBurst(0.37f);
                    };

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponent<FirearmBehaviour>().FireDelay = 0.1f;
                    Instance.GetComponent<FirearmBehaviour>().EjectShells = false;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.0304f, 0.0713f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.12f, -0.045f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.06f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.177f, 0.0869f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.15714f, 0.0429f, 0f);// Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.0427f, 0.1276f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_45;

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_3.wav"),
                    };
                }
            }
            );

            // M1911
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} M1911", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Forty-Five'  .45 ACP  Skins: 0                 \n\nThe Colt M1911 is an American semi-automatic pistol designed by John Browning, it has been in service since 1911 and is still used today.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/M1911/M1911_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/M1911/M1911.png");
                    
                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1476357f, 0.1552727f), new Vector2(-0.1180933f, 0.09708858f), new Vector2(-0.2010382f, 0.09625969f), new Vector2(-0.1753751f, 0.02665144f), new Vector2(-0.2352201f, -0.110389f), new Vector2(-0.1200028f, -0.1571429f), new Vector2(-0.08936489f, -0.05394677f), new Vector2(0.01698047f, -0.07356505f), new Vector2(0.1237672f, 0.04473419f), new Vector2(0.3124156f, 0.04555926f), new Vector2(0.3142857f, 0.1571429f), };
                   
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Pistol/M1911/M1911_Slide.png"), Position: new Vector2(0.0285f, 0.1f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.13f, BoltCover: null, BoltCoverPosition: new Vector2(0f, 0f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.09f);
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.041f, 0.115f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.13f, -0.048f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.07f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.221f, 0.1053f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.11428f, 0.02857f, 0f);// Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.0286f, 0.1428f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_45;

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/45_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/45_Suppressed_3.wav")
                    };

                }
            }
            );

            // TT
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} TT-30", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Tokarev'  7.62×25mm Tokarev  Skins: 0          \n\nThe Tula Tokarev 30 was a Soviet semi-automatic pistol designed by Fedor Tokarev, it began service in 1930 and is still used today.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/TT/TT_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/TT/TT.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1531521f, 0.1142857f), new Vector2(-0.1843267f, 0.08237113f), new Vector2(-0.1833441f, 0.0308815f), new Vector2(-0.1537997f, 0.01727202f), new Vector2(-0.1857143f, -0.1142857f), new Vector2(-0.09754114f, -0.1128981f), new Vector2(-0.07123622f, -0.03411161f), new Vector2(-0.01905697f, -0.02782816f), new Vector2(0.01302946f, 0.02766049f), new Vector2(0.06367438f, 0.03165288f), new Vector2(0.07505266f, 0.05312005f), new Vector2(0.1857143f, 0.060486f), new Vector2(0.1857143f, 0.1142857f), };

                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Pistol/TT/TT_Slide.png"), Position: new Vector2(0f, 0.08571f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.08f, BoltCover: null, BoltCoverPosition: new Vector2(-0.1857f, 0.12857f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.09f);
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0f, 0.08571f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.122f, -0.02f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.06f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.192f, 0.086f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1428f, 0.0429f, 0f);// Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0f, 0.1284f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_Tokarev;

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };

                }
            }
            );

            // Model1908
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} Colt Model 1908", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'M1908'  .25 ACP  Skins: 0                      \n\nThe Colt Model 1908 Vest Pocket Pistol is a hammerless single-action pistol, it was designed by John Browning as a concealable compact pistol.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/Model1908/Model1908_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/Model1908/Model1908.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.08266152f, 0.08571429f), new Vector2(-0.1126139f, 0.05296461f), new Vector2(-0.0882488f, 0.01090072f), new Vector2(-0.1164744f, -0.0479187f), new Vector2(-0.08593299f, -0.08789528f), new Vector2(-0.01810094f, -0.08353332f), new Vector2(0.004146248f, -0.03293337f), new Vector2(0.09274436f, 0.004366726f), new Vector2(0.1142857f, 0.08571429f), };
                   
                    // Sets up bolt sprites
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Pistol/Model1908/Model1908_Slide.png"), Position: new Vector2(0f, 0.05714f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.02f, BoltCover: null, BoltCoverPosition: new Vector2(0f, 0f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.085f);
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(0.0304f, 0.0713f);
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.13f, 0.071f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.044f, -0.016f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.05f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.1213f, 0.0566f);
                    Instance.transform.Find("BarrelAttachment").gameObject.SetActive(false);// Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0.043f, 0.1f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel


                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_22;

                    // Changes sounds of shots
                    Instance.GetComponent<FirearmBehaviour>().ShotSounds = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/9MM_3.wav"),
                    };

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };

                }
            }
            );

            //Makarov
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("9mm Pistol"), //item to derive from
                NameOverride = $"{Mod.ModTag} Makarov", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'PM'  9×18mm Makarov  Skins: 0                  \n\nThe Makarov pistol is a soviet designed semi-automatic pistol from the early 1950's, it is a reliable pistol still in use today.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Pistol/Makarov/Makarov_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //adds the GeneralGunHandler script to the gun, which is required for all guns
                    Instance.AddComponent<GeneralGunHandler>();

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Pistol/Makarov/Makarov.png");

                    // Adjusts colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.1234821f, 0.1140515f), new Vector2(-0.1565623f, 0.08409782f), new Vector2(-0.1600754f, 0.03182057f), new Vector2(-0.128116f, 0.02749496f), new Vector2(-0.1493128f, -0.0284397f), new Vector2(-0.1571429f, -0.1142857f), new Vector2(-0.07163367f, -0.1148662f), new Vector2(-0.04266723f, -0.02885022f), new Vector2(0.01208588f, -0.02958731f), new Vector2(0.07464103f, 0.05558429f), new Vector2(0.1571429f, 0.05817878f), new Vector2(0.1571429f, 0.1142857f), };
                   
                    // Sets up bolt sprties
                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Pistol/Makarov/Makarov_Slide.png"), Position: new Vector2(0f, 0.08571f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.08f, BoltCover: null, BoltCoverPosition: new Vector2(-0.1857f, 0.12857f));

                    // Firerate, Casing, Holding & attachment positions
                    Instance.GetComponentInChildren<BoltAnimator>().SetDuration(0.085f);
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.01f, 0.08571f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.096f, -0.04f, 0) };
                    Instance.GetComponent<Rigidbody2D>().mass = 0.06f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.1635f, 0.0863f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(0.1428f, 0.0429f, 0f);// Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(0f, 0.1284f, 0f); // Sets position of scope
                    Vector3 SuppressorPosition = Instance.GetComponent<FirearmBehaviour>().barrelPosition; // Sets position of suppressor to match Barrel
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);

                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_9MM;

                    //creates a new attachment point for the barrel
                    GameObject NewBarrelAttachmentPoint = GameObject.Instantiate(Instance.GetComponentInChildren<FirearmAttachmentPointBehaviour>().gameObject);
                    NewBarrelAttachmentPoint.transform.SetParent(Instance.transform, false);

                    //sets the position of the new attachment point
                    NewBarrelAttachmentPoint.transform.localPosition = SuppressorPosition; // new Vector3(0.714024f, 0.085676f, 0);
                    NewBarrelAttachmentPoint.transform.localEulerAngles = new Vector3(0, 0, 90); NewBarrelAttachmentPoint.GetComponent<FirearmAttachmentPointBehaviour>().AttachmentType = FirearmAttachmentType.AttachmentType.Other;

                    //Sets a custom shot sound with a supressor
                    Instance.AddComponent<SupressorSoundStorage>().SupressorSounds = new AudioClip[]
                    {
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_1.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_2.wav"),
                        ModAPI.LoadSound("Guns/_Shared/Audio/9MM_Suppressed_3.wav")
                    };

                }
            }
            );

            #endregion

            // Launchers
            #region Launchers

            // Bazooka
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Bazooka"), //item to derive from
                NameOverride = $"{Mod.ModTag} M1A1 Bazooka", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Bazooka'  M6A1 Rocket  Skins: 0                \n\nThe M1A1 Bazooka was an iconic American Recoilless rocket anti-tank weapon from WW2, it was cheap and mass produced throughout the war.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Launchers/Bazooka/Bazooka_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Launchers/Bazooka/Bazooka.png");

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.9142857f, 0.1403478f), new Vector2(0.8824957f, 0.114428f), new Vector2(0.090627f, 0.1163687f), new Vector2(0.07180087f, 0.1441222f), new Vector2(0.04712608f, 0.1155237f), new Vector2(-0.424917f, 0.1156898f), new Vector2(-0.4466631f, 0.1460234f), new Vector2(-0.4615952f, 0.1133077f), new Vector2(-0.6883155f, 0.1170139f), new Vector2(-0.6901634f, 0.1421084f), new Vector2(-0.7927163f, 0.1420119f), new Vector2(-0.8253779f, 0.1184084f), new Vector2(-0.9142857f, 0.1714286f), new Vector2(-0.9069726f, -0.0576089f), new Vector2(-0.8262314f, 0.004015945f), new Vector2(-0.2558736f, 0.001208581f), new Vector2(-0.2549531f, -0.02031855f), new Vector2(-0.3141152f, -0.02647877f), new Vector2(-0.314044f, -0.1692037f), new Vector2(-0.1491227f, -0.1658687f), new Vector2(0.0001913756f, -0.0006532557f), new Vector2(0.1711303f, -0.0003348179f), new Vector2(0.1407547f, -0.1381809f), new Vector2(0.2309069f, -0.1336051f), new Vector2(0.2330424f, -0.08628689f), new Vector2(0.3486356f, -0.0840739f), new Vector2(0.346095f, 0.003523834f), new Vector2(0.7360055f, 2.85178E-05f), new Vector2(0.7597537f, -0.03141272f), new Vector2(0.7733951f, -0.00158966f), new Vector2(0.8802547f, -0.001264591f), new Vector2(0.8895696f, -0.0592282f), new Vector2(0.9124574f, -0.05578061f), };

                    // Backblast
                    Instance.transform.GetChild(0).GetChild(0).localPosition = new Vector3(0f, 0f,0);
                    // Forwardblast
                    Instance.transform.GetChild(0).GetChild(1).localPosition = new Vector3(0f, -2f, 0f);

                    Instance.GetComponent<RocketLauncherBehaviour>().barrelPosition = new Vector2(0.969f, 0.059f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0.202f, -0.066f, 0), new Vector3(-0.109f, -0.091f, 0) };

                    Instance.GetComponent<Rigidbody2D>().mass = 0.7f;
                }
            }
            );

            // M72 LAW
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Bazooka"), //item to derive from
                NameOverride = $"{Mod.ModTag} M72 LAW", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'LAW'  M72 warhead  Skins: 0                    \n\nThe M72 LAW is an American single use anti-tank weapon, the weapon was developed in the early 1960's and saw heavy use in the Vietnam War.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Launchers/M72/M72_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Launchers/M72/M72.png");

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.6593227f, 0.02927338f), new Vector2(0.6604668f, 0.08082758f), new Vector2(0.6302027f, 0.08366827f), new Vector2(0.6295386f, 0.1418543f), new Vector2(0.5981761f, 0.1421884f), new Vector2(0.6011422f, 0.08478563f), new Vector2(0.5155882f, 0.08167882f), new Vector2(0.5129939f, 0.05895771f), new Vector2(0.1137063f, 0.05749243f), new Vector2(0.113081f, 0.08426994f), new Vector2(-0.114128f, 0.0855764f), new Vector2(-0.1145276f, 0.1420146f), new Vector2(-0.1420138f, 0.1411817f), new Vector2(-0.1432121f, 0.06052032f), new Vector2(-0.1096011f, 0.03189217f), new Vector2(-0.4854f, 0.03310223f), new Vector2(-0.4875646f, 0.08512933f), new Vector2(-0.6548619f, 0.08553904f), new Vector2(-0.6548651f, 0.02619994f), new Vector2(-0.6857143f, 0.02612808f), new Vector2(-0.6857143f, -0.1140747f), new Vector2(0.6857143f, -0.1108766f), new Vector2(0.6873133f, 0.02932613f), };

                    // Backblast
                    Instance.transform.GetChild(0).GetChild(0).localPosition = new Vector3(0f, 0f, 0);
                    // Forwardblast
                    Instance.transform.GetChild(0).GetChild(1).localPosition = new Vector3(0f, -2f, 0f);

                    Instance.GetComponent<RocketLauncherBehaviour>().barrelPosition = new Vector2(0.727f, -0.044f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0.387f, -0.036f, 0), new Vector3(0.005f, -0.047f, 0) };

                    Instance.GetComponent<Rigidbody2D>().mass = 0.7f;
                    
                }
            }
            );

            // AT4
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Bazooka"), //item to derive from
                NameOverride = $"{Mod.ModTag} M136E1 AT4", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'AT4'  AT4 HEDP  Skins: 0                       \n\nThe M136E1 AT4 is a Swedish disposable single use anti-tank weapon, they're commonly used by the United States Marine Corps.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Launchers/AT4/AT4_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Launchers/AT4/AT4.png");

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.8136278f, 0.07215295f), new Vector2(0.8130757f, 0.1021401f), new Vector2(0.7862266f, 0.1022816f), new Vector2(0.7856787f, 0.07097095f), new Vector2(0.7296606f, 0.07037962f), new Vector2(0.729719f, 0.1567585f), new Vector2(0.6993885f, 0.1556073f), new Vector2(0.6990725f, 0.1018285f), new Vector2(0.555285f, 0.09930376f), new Vector2(0.5551341f, 0.07248694f), new Vector2(0.4160256f, 0.07352564f), new Vector2(0.4151607f, 0.098887f), new Vector2(0.2418099f, 0.09899197f), new Vector2(0.2427708f, 0.07072582f), new Vector2(0.1860566f, 0.07145166f), new Vector2(0.1866619f, 0.1567982f), new Vector2(0.1554838f, 0.1568005f), new Vector2(0.1559769f, 0.0991402f), new Vector2(0.1263743f, 0.09821417f), new Vector2(0.1261461f, 0.07279894f), new Vector2(0.01059734f, 0.07229581f), new Vector2(0.01223618f, 0.09921908f), new Vector2(-0.273273f, 0.09868728f), new Vector2(-0.271955f, 0.07100667f), new Vector2(-0.7545727f, 0.07185943f), new Vector2(-0.787535f, 0.1277848f), new Vector2(-0.842595f, 0.1281801f), new Vector2(-0.8428571f, -0.1571429f), new Vector2(-0.7868727f, -0.1560517f), new Vector2(-0.7554458f, -0.1031404f), new Vector2(0.7825128f, -0.09968553f), new Vector2(0.7862027f, -0.1301453f), new Vector2(0.8124023f, -0.130144f), new Vector2(0.8125731f, -0.1003934f), new Vector2(0.8410122f, -0.1006498f), new Vector2(0.8450572f, 0.07133752f), };

                    // Backblast
                    Instance.transform.GetChild(0).GetChild(0).localPosition = new Vector3(0f, 0f, 0);
                    // Forwardblast
                    Instance.transform.GetChild(0).GetChild(1).localPosition = new Vector3(0f, -2f, 0f);

                    Instance.GetComponent<RocketLauncherBehaviour>().barrelPosition = new Vector2(0.888f, -0.01f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0.472f, -0.013f, 0), new Vector3(0.056f, -0.041f, 0) };

                    Instance.GetComponent<Rigidbody2D>().mass = 0.7f;
                }
            }
            );

            // RPG
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Rocket Launcher"), //item to derive from
                NameOverride = $"{Mod.ModTag} RPG-7", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'RPG'  PG-7V  Skins: 0                          \n\nThe RPG-7 is a Soviet made anti-tank rocket-propelled grenade launcher, the weapon is often used by insurgent groups around the world.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Launchers/RPG/RPG_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    Sprite Rocket = ModAPI.LoadSprite("Guns/Launchers/RPG/RPG_Warhead.png");

                    Instance.AddComponent<UseEventTrigger>().Action = () =>
                    {
                        Instance.GetComponent<RocketLauncherBehaviour>().Projectile.GetComponentInChildren<SpriteRenderer>().sprite = Rocket;
                    };

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Launchers/RPG/RPG.png");

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.1587548f, -0.1729461f), new Vector2(0.1545818f, -0.06372473f), new Vector2(0.2336095f, -0.03667035f), new Vector2(0.2462297f, 0.0286756f), new Vector2(0.5771293f, 0.03128935f), new Vector2(0.7544194f, -0.02923504f), new Vector2(0.9618533f, 0.04834732f), new Vector2(1.04268f, 0.05791102f), new Vector2(1.044123f, 0.0867527f), new Vector2(0.9608967f, 0.09289864f), new Vector2(0.7428112f, 0.1695547f), new Vector2(0.5791069f, 0.1150523f), new Vector2(0.4702687f, 0.116236f), new Vector2(0.470104f, 0.1998242f), new Vector2(0.4413563f, 0.1980392f), new Vector2(0.4410515f, 0.1381794f), new Vector2(0.3848211f, 0.1409047f), new Vector2(0.3863506f, 0.1206713f), new Vector2(-0.04571159f, 0.1168543f), new Vector2(-0.04471791f, 0.1438552f), new Vector2(-0.1023007f, 0.1459031f), new Vector2(-0.1023188f, 0.2024807f), new Vector2(-0.1306304f, 0.2025453f), new Vector2(-0.1290612f, 0.1391578f), new Vector2(-0.1586224f, 0.1397969f), new Vector2(-0.1613256f, 0.1114319f), new Vector2(-0.2372021f, 0.1173335f), new Vector2(-0.2578259f, 0.1429619f), new Vector2(-0.2737855f, 0.1150659f), new Vector2(-0.7191688f, 0.1199463f), new Vector2(-0.7433016f, 0.1441037f), new Vector2(-0.7665673f, 0.1167678f), new Vector2(-0.8608753f, 0.1199145f), new Vector2(-1.042857f, 0.2f), new Vector2(-1.042857f, -0.09049354f), new Vector2(-0.8588845f, 0.00624688f), new Vector2(-0.2501491f, -0.00212235f), new Vector2(-0.1840857f, -0.170083f), new Vector2(-0.1307914f, -0.165076f), new Vector2(-0.1022544f, -0.003265679f), new Vector2(0.03769892f, 0.001332678f), new Vector2(0.06602842f, -0.07100758f), new Vector2(0.07029922f, -0.1981774f), };

                    // Backblast
                    Instance.transform.GetChild(0).GetChild(0).localPosition = new Vector3(0f, 0f, 0);
                    // Forwardblast
                    Instance.transform.GetChild(0).GetChild(1).localPosition = new Vector3(0f, -2f, 0f);

                    Instance.GetComponent<RocketLauncherBehaviour>().barrelPosition = new Vector2(1.112f, 0.071f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0.113f, -0.098f, 0), new Vector3(-0.17f, -0.064f, 0) };

                    Instance.GetComponent<Rigidbody2D>().mass = 0.7f;
                }
            }
            );

            // Panzerfaust
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Rocket Launcher"), //item to derive from
                NameOverride = $"{Mod.ModTag} Panzerfaust", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Panzerfaust'  Panzerfaust 60  Skins: 0         \n\nThe Panzerfaust was a cheap but effective German single-use disposable Anti-Tank weapon, developed during the second world war.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Launchers/Panzerfaust/Panzerfaust_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    Sprite Rocket = ModAPI.LoadSprite("Guns/Launchers/Panzerfaust/Panzerfaust_Warhead.png");

                    Instance.AddComponent<UseEventTrigger>().Action = () =>
                    {
                        Instance.GetComponent<RocketLauncherBehaviour>().Projectile.GetComponentInChildren<SpriteRenderer>().sprite = Rocket;
                    };

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Launchers/Panzerfaust/Panzerfaust.png");

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.4458381f, 0.05710291f), new Vector2(0.3401546f, 0.0003578216f), new Vector2(0.2007853f, 0.002696842f), new Vector2(0.2000142f, 0.1410358f), new Vector2(0.1729983f, 0.1408975f), new Vector2(0.173007f, 0.05646214f), new Vector2(0.1423195f, 0.05664583f), new Vector2(0.141452f, 0.02869669f), new Vector2(0.08768864f, 0.02803124f), new Vector2(0.08755267f, 0.05720152f), new Vector2(-0.05740128f, 0.05706039f), new Vector2(-0.05654958f, -0.0002699047f), new Vector2(-0.6004189f, -0.0003859242f), new Vector2(-0.6f, -0.08642375f), new Vector2(0.3423807f, -0.08627181f), new Vector2(0.4508315f, -0.1400863f), new Vector2(0.5968706f, -0.08261537f), new Vector2(0.5992177f, -0.002661958f), };

                    // Backblast
                    Instance.transform.GetChild(0).GetChild(0).localPosition = new Vector3(0f, 0f, 0);
                    // Forwardblast
                    Instance.transform.GetChild(0).GetChild(1).localPosition = new Vector3(0f, -2f, 0f);

                    Instance.GetComponent<RocketLauncherBehaviour>().barrelPosition = new Vector2(0.638f, -0.044f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.112f, -0.036f, 0), new Vector3(0.124f, -0.025f, 0) };

                    Instance.GetComponent<Rigidbody2D>().mass = 0.7f;
                }
            }
            );

            // Panzerschreck
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Bazooka"), //item to derive from
                NameOverride = $"{Mod.ModTag} Raketenpanzerbuchse 54 ", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Panzerschreck'  grenade RPzB. Gr. 4322  Skins: 0\n\nThe Raketenpanzerbuchse 54 was the german equivilent to the American Bazooka during World War II, it fired a larger 88mm rocket.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Launchers/Panzerschreck/Panzerschreck_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Launchers/Panzerschreck/Panzerschreck.png");

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.9172394f, 0.1138884f), new Vector2(0.8874676f, 0.1156248f), new Vector2(0.8884619f, 0.1699531f), new Vector2(0.8552449f, 0.1686124f), new Vector2(0.8560276f, 0.1159728f), new Vector2(0.399904f, 0.1138314f), new Vector2(0.4025499f, 0.255275f), new Vector2(0.3723727f, 0.2543901f), new Vector2(0.3731658f, 0.1158454f), new Vector2(0.08599032f, 0.1147755f), new Vector2(0.08560705f, 0.1423779f), new Vector2(0.05762798f, 0.1426763f), new Vector2(0.05735392f, 0.1155016f), new Vector2(-0.6853323f, 0.1146929f), new Vector2(-0.68604f, 0.1426878f), new Vector2(-0.7994688f, 0.1421166f), new Vector2(-0.7995108f, 0.1122693f), new Vector2(-0.8195235f, 0.1146757f), new Vector2(-0.8583958f, 0.1709399f), new Vector2(-0.9129738f, 0.17216f), new Vector2(-0.9166628f, -0.05609384f), new Vector2(-0.8588689f, -0.0562799f), new Vector2(-0.8292024f, -0.00213775f), new Vector2(-0.6598036f, -0.001076583f), new Vector2(-0.6590399f, -0.02851968f), new Vector2(-0.4280351f, -0.02753534f), new Vector2(-0.4249531f, -0.1703291f), new Vector2(-0.389616f, -0.2011371f), new Vector2(-0.342326f, -0.1670852f), new Vector2(-0.3116741f, -0.03094353f), new Vector2(-0.1997827f, -0.0289544f), new Vector2(-0.2003891f, -0.0005113557f), new Vector2(-0.1148448f, -0.0003310181f), new Vector2(-0.1371404f, -0.1718978f), new Vector2(0.02942363f, -0.1701556f), new Vector2(0.02867325f, -0.2284033f), new Vector2(0.2814521f, -0.227872f), new Vector2(0.3135729f, 0.000886336f), new Vector2(0.3704027f, 0.0009795204f), new Vector2(0.3423678f, -0.2292641f), new Vector2(0.3709231f, -0.229396f), new Vector2(0.3969113f, 0.003035389f), new Vector2(0.7988567f, 0.002177522f), new Vector2(0.7975885f, -0.08447909f), new Vector2(0.8293635f, -0.08436468f), new Vector2(0.8298326f, 0.002101533f), new Vector2(0.9142857f, 0.001931157f), };

                    // Backblast
                    Instance.transform.GetChild(0).GetChild(0).localPosition = new Vector3(0f, 0f, 0);
                    // Forwardblast
                    Instance.transform.GetChild(0).GetChild(1).localPosition = new Vector3(0f, -2f, 0f);

                    Instance.GetComponent<RocketLauncherBehaviour>().barrelPosition = new Vector2(0.926f, 0.051f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0.05f, -0.0893f, 0), new Vector3(-0.334f, -0.111f, 0) };

                    Instance.GetComponent<Rigidbody2D>().mass = 0.7f;
                }
            }
            );

            // Panzerfaust 3
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Rocket Launcher"), //item to derive from
                NameOverride = $"{Mod.ModTag} Panzerfaust 3", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Panzerfaust'  HEAT -125  Skins: 0              \n\nThe Panzerfaust 3 is a German made dispossable Anti-Tank weapon designed in 1978, it first entered service into the Bundeswehr in 1987.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Launchers/Panzerfaust3/Panzerfaust3_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    Sprite Rocket = ModAPI.LoadSprite("Guns/Launchers/Panzerfaust3/Panzerfaust3_Warhead.png");

                    Instance.AddComponent<UseEventTrigger>().Action = () =>
                    {
                        Instance.GetComponent<RocketLauncherBehaviour>().Projectile.GetComponentInChildren<SpriteRenderer>().sprite = Rocket;
                    };

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Launchers/Panzerfaust3/Panzerfaust3.png");

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.902708f, 0.101634f), new Vector2(0.7638446f, 0.1862212f), new Vector2(0.4949681f, 0.1901702f), new Vector2(0.4847776f, 0.1586397f), new Vector2(0.4321003f, 0.1566164f), new Vector2(0.4281708f, 0.1864107f), new Vector2(0.371279f, 0.1828467f), new Vector2(0.373209f, 0.1557668f), new Vector2(0.2578469f, 0.1572578f), new Vector2(0.2540929f, 0.2110346f), new Vector2(0.2182603f, 0.2412224f), new Vector2(-0.01935355f, 0.2409317f), new Vector2(-0.08252163f, 0.2110929f), new Vector2(-0.08225351f, 0.1560164f), new Vector2(-0.1395395f, 0.157085f), new Vector2(-0.1402475f, 0.1887889f), new Vector2(-0.5085715f, 0.1868737f), new Vector2(-0.5113648f, 0.1643646f), new Vector2(-0.9134032f, 0.1604235f), new Vector2(-0.9128155f, 0.189092f), new Vector2(-1.02567f, 0.1905418f), new Vector2(-1.02744f, -0.01573098f), new Vector2(-0.9147747f, -0.01573478f), new Vector2(-0.9128233f, 0.01394761f), new Vector2(-0.5174682f, 0.01526282f), new Vector2(-0.508783f, -0.01309409f), new Vector2(-0.3385633f, -0.01327686f), new Vector2(-0.3100355f, -0.2052978f), new Vector2(-0.256287f, -0.2069648f), new Vector2(-0.2582619f, -0.06999375f), new Vector2(-0.06324762f, -0.06933227f), new Vector2(-0.05992703f, -0.0469017f), new Vector2(0.0004552603f, -0.04694887f), new Vector2(0.004677776f, -0.09355372f), new Vector2(0.03132656f, -0.2114725f), new Vector2(0.08571556f, -0.21012f), new Vector2(0.08828424f, -0.1300655f), new Vector2(0.1354729f, -0.1264649f), new Vector2(0.1693903f, -0.08312187f), new Vector2(0.1696093f, -0.04353628f), new Vector2(0.2001395f, -0.04274298f), new Vector2(0.2004519f, -0.06847745f), new Vector2(0.3181711f, -0.07155839f), new Vector2(0.3130977f, -0.2401143f), new Vector2(0.3691574f, -0.2428571f), new Vector2(0.3735554f, -0.04694022f), new Vector2(0.2513678f, 0.01085152f), new Vector2(0.3723572f, 0.01403971f), new Vector2(0.3753133f, -0.01407249f), new Vector2(0.4289251f, -0.01474041f), new Vector2(0.4284137f, 0.01608741f), new Vector2(0.4811555f, 0.01765446f), new Vector2(0.488331f, -0.007174492f), new Vector2(0.7664191f, -0.005646192f), new Vector2(0.888383f, 0.06511407f), new Vector2(1.026549f, 0.06889894f), new Vector2(1.028571f, 0.1005069f), };

                    // Backblast
                    Instance.transform.GetChild(0).GetChild(0).localPosition = new Vector3(0f, 0f, 0);
                    // Forwardblast
                    Instance.transform.GetChild(0).GetChild(1).localPosition = new Vector3(0f, -2f, 0f);

                    Instance.GetComponent<RocketLauncherBehaviour>().barrelPosition = new Vector2(1.052f, 0.083f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0.054f, -0.133f, 0), new Vector3(0.348f, -0.135f, 0) };

                    Instance.GetComponent<Rigidbody2D>().mass = 0.7f;
                }
            }
            );

            // M3
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Bazooka"), //item to derive from
                NameOverride = $"{Mod.ModTag} M3 MAAWS", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Carl-Gustaf'  HE 441/441B  Skins: 0             \n\nThe Swedish Carl-Gustaf M3 was aquired by the USA in the 1980's and named after the selection program it was apart of, MAAWS.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Launchers/M3/M3_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Launchers/M3/M3.png");

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.7008736f, -0.04562618f), new Vector2(0.7021789f, 0.09855464f), new Vector2(0.1372638f, 0.09641535f), new Vector2(0.07155692f, 0.1835812f), new Vector2(-0.1244012f, 0.184123f), new Vector2(-0.1962894f, 0.101502f), new Vector2(-0.5632373f, 0.1101626f), new Vector2(-0.6173471f, 0.1535813f), new Vector2(-0.697821f, 0.1508504f), new Vector2(-0.7f, -0.09855462f), new Vector2(-0.6158285f, -0.09712225f), new Vector2(-0.5445431f, -0.04874572f), new Vector2(-0.1301978f, -0.0459706f), new Vector2(-0.0664494f, -0.1537205f), new Vector2(0.008707114f, -0.1526816f), new Vector2(0.01504725f, -0.04404257f), new Vector2(0.2076005f, -0.04862909f), new Vector2(0.1885141f, -0.1828198f), new Vector2(0.2678007f, -0.1832685f), new Vector2(0.2983419f, -0.09858397f), new Vector2(0.3551266f, -0.09753986f), new Vector2(0.3861315f, -0.0477484f), new Vector2(0.471815f, -0.04599874f), new Vector2(0.4695028f, -0.1594049f), new Vector2(0.5347372f, -0.1598881f), new Vector2(0.5300387f, -0.04625884f), };

                    // Backblast
                    Instance.transform.GetChild(0).GetChild(0).localPosition = new Vector3(0f, 0f, 0);
                    // Forwardblast
                    Instance.transform.GetChild(0).GetChild(1).localPosition = new Vector3(0f, -2f, 0f);

                    Instance.GetComponent<RocketLauncherBehaviour>().barrelPosition = new Vector2(0.733f, 0.028f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0.256f, -0.111f, 0), new Vector3(0.5f, -0.089f, 0) };

                    Instance.GetComponent<Rigidbody2D>().mass = 0.7f;
                }
            }
            );

            // MGL
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Grenade Launcher"), //item to derive from
                NameOverride = $"{Mod.ModTag} Milkor MGL ", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'GL'  40mm Grenade  Skins: 0                     \n\nThe Milkor MGL is a South-African made revolving 40mm greande launcher, the weapon can fire up to 3 40mm grenades a second.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Launchers/MGL/MGL_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {



                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Launchers/MGL/MGL.png");

                    // Removes the Box colliders the Grenade Launcher starts with
                    foreach (BoxCollider2D collider in Instance.GetComponents<BoxCollider2D>())
                    {
                        Instance.GetComponent<BoxCollider2D>().enabled = false;
                    };

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.4910701f, 0.09954882f), new Vector2(0.490848f, 0.1279389f), new Vector2(0.203516f, 0.1312949f), new Vector2(0.1763964f, 0.09435871f), new Vector2(0.1763376f, 0.1815803f), new Vector2(-0.1387376f, 0.1832581f), new Vector2(-0.2851229f, 0.1356676f), new Vector2(-0.6005715f, 0.1302245f), new Vector2(-0.5687208f, -0.09396202f), new Vector2(-0.4592977f, 0.01128089f), new Vector2(-0.1702945f, 0.09988312f), new Vector2(-0.1702617f, 0.07140739f), new Vector2(-0.28163f, 0.03418677f), new Vector2(-0.2992412f, -0.05176794f), new Vector2(-0.3681552f, -0.1528123f), new Vector2(-0.2744976f, -0.181237f), new Vector2(-0.2202857f, -0.07749623f), new Vector2(-0.1187174f, -0.1001505f), new Vector2(-0.0796283f, -0.1552429f), new Vector2(0.1717163f, -0.151454f), new Vector2(0.2000399f, 0.01622202f), new Vector2(0.2538307f, 0.00957479f), new Vector2(0.3441151f, -0.05311095f), new Vector2(0.3466231f, -0.1857143f), new Vector2(0.3938525f, -0.1879609f), new Vector2(0.3973255f, -0.05016371f), new Vector2(0.4876081f, 0.01835073f), new Vector2(0.5993682f, 0.02016881f), new Vector2(0.6f, 0.09604731f), };

                    Instance.GetComponent<ProjectileLauncherBehaviour>().barrelPosition = new Vector2(0.635f, 0.051f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.26f, -0.068f, 0), new Vector3(0.321f, -0.0359f, 0) };

                    //This creates a new GameObject to hold the looping texture of the revolver's cylinder.
                    GameObject Cylinder = new GameObject("Cylinder");
                    Cylinder.transform.SetParent(Instance.transform, false);
                    //This sets the position of the cylinder .
                    Cylinder.transform.localPosition = new Vector3(0.01429f, -0.01429f, 0);
                    //This sets the sprite of the cylinder to the looping texture.
                    Cylinder.AddComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Launchers/MGL/MGL_Cylinder.png");

                    //This sets up the revolver's cylinder looping texture.
                    CamsEasyMethods.SetUpGunLoopingTexture(Cylinder, ModAPI.LoadTexture("Guns/Launchers/MGL/MGL_Cylinder.png"), ModAPI.LoadTexture("Guns/Launchers/MGL/MGL_Mask.png"));
                    //And here we make it so when you activate the revolver, it calls a function that makes the cylinder spin

                    Sprite Rocket = ModAPI.LoadSprite("Guns/Launchers/MGL/MGL_Round.png");

                    Instance.AddComponent<UseEventTrigger>().Action = () =>
                    {
                        //This calls a function that adds rotation to the cylinder, VVVVVV change this value to change how much it moves.
                        Cylinder.GetComponent<LoopTextureHandler>().AddRotationBurst(0.37f);
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<SpriteRenderer>().sprite = Rocket;
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<ExplosiveBehaviour>().Range = 10;
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<ExplosiveBehaviour>().BigExplosion = false;
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<ExplosiveBehaviour>().FragmentForce = 0.8f;
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<ExplosiveBehaviour>().ExplodesOnFragmentHit = false;
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<PointToVelocityBehaviour>().enabled = false;
                    };

                    Instance.GetComponent<Rigidbody2D>().mass = 0.3f;
                }
            }
            );

            // M320
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Grenade Launcher"), //item to derive from
                NameOverride = $"{Mod.ModTag} M320 Grenade Launcher", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'GL'  40mm Grenade  Skins: 0                       \n\nThe M320 Grenade Launcher Module is an American / German made grenade launcher designed to be mounted underneath the barrel of a M4.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Launchers/M320/M320_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    Sprite Rocket = ModAPI.LoadSprite("Guns/Launchers/MGL/MGL_Round.png");

                    Instance.AddComponent<UseEventTrigger>().Action = () =>
                    {
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<SpriteRenderer>().sprite = Rocket;
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<ExplosiveBehaviour>().Range = 10;
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<ExplosiveBehaviour>().BigExplosion = false;
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<ExplosiveBehaviour>().FragmentForce = 0.8f;
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<ExplosiveBehaviour>().ExplodesOnFragmentHit = false;
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<PointToVelocityBehaviour>().enabled = false;
                    };

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Launchers/M320/M320.png");

                    // Removes the Box colliders the Grenade Launcher starts with
                    foreach (BoxCollider2D collider in Instance.GetComponents<BoxCollider2D>())
                    {
                        Instance.GetComponent<BoxCollider2D>().enabled = false;
                    };

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.2723465f, 0.08536804f), new Vector2(0.2757158f, 0.117189f), new Vector2(0.2162661f, 0.1195224f), new Vector2(0.2166913f, 0.1456052f), new Vector2(0.2693001f, 0.1445453f), new Vector2(0.2668024f, 0.1997327f), new Vector2(0.2435034f, 0.1997633f), new Vector2(0.2402914f, 0.1747716f), new Vector2(0.01289606f, 0.1704771f), new Vector2(0.0513895f, 0.1129337f), new Vector2(-0.2631317f, 0.1212754f), new Vector2(-0.2669095f, 0.1735625f), new Vector2(-0.3285714f, 0.1735251f), new Vector2(-0.3285714f, -0.05941913f), new Vector2(-0.2694519f, -0.05744253f), new Vector2(-0.2656192f, 0.08360493f), new Vector2(-0.1967193f, 0.08641627f), new Vector2(-0.1121689f, -0.02134565f), new Vector2(-0.1249764f, -0.1660621f), new Vector2(-0.04364064f, -0.1661273f), new Vector2(-0.03823325f, -0.08019565f), new Vector2(0.03238735f, -0.1070188f), new Vector2(0.07696341f, -0.03302833f), new Vector2(0.1898798f, -0.03038058f), new Vector2(0.1885457f, -0.1939543f), new Vector2(0.2427575f, -0.1926431f), new Vector2(0.2442867f, -0.02549249f), new Vector2(0.3261154f, -0.05666118f), new Vector2(0.2867898f, 0.001825005f), new Vector2(0.3217165f, 0.0046767f), new Vector2(0.3187045f, 0.08483539f), };

                    Instance.GetComponent<ProjectileLauncherBehaviour>().barrelPosition = new Vector2(0.348f, 0.043f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.07f, -0.046f, 0), new Vector3(0.215f, -0.088f, 0) };

                    Instance.GetComponent<Rigidbody2D>().mass = 0.13f;
                }
            }
            );

            #endregion

            // Heavy
            #region Heavy

            // Minigun
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Minigun"), //item to derive from
                NameOverride = $"{Mod.ModTag} M134 Minigun", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "H", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Minigun'  7.62×51mm NATO  Skins: 0             \n\nThe M134 Minigun is a U.S made six-barrel rotary machine gun chambered in 7.62x51mm, the weapon has an insane rate of fire of ~4,000rpm.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Heavy/Minigun/Minigun_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    // Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Heavy/Minigun/Minigun.png");

                    // This hurt me.
                    var Mat = new Material(Shader.Find("Unlit/MinigunBarrelShader"));
                    Mat.SetTexture("_MainTex", ModAPI.LoadTexture("Guns/Heavy/Minigun/Minigun.png"));
                    Mat.SetTexture("_ActualSprite", ModAPI.LoadTexture("Guns/Heavy/Minigun/Minigun_Loop2.png"));
                    Mat.SetTexture("_Mask", ModAPI.LoadTexture("Guns/Heavy/Minigun/Minigun_Mask2.png"));
                    var actualSprite = ModAPI.LoadTexture("Guns/Heavy/Minigun/Minigun_Loop2.png");
                    actualSprite.wrapMode = TextureWrapMode.Repeat;
                    actualSprite.Apply();
                    Instance.GetComponent<SpriteRenderer>().material = Mat;

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.4571232f, 0.2430232f), new Vector2(-0.4640203f, 0.2148464f), new Vector2(-0.5409651f, 0.2174127f), new Vector2(-0.5450813f, 0.1877721f), new Vector2(-0.6539416f, 0.1872245f), new Vector2(-0.6910327f, 0.1244144f), new Vector2(-0.8541296f, 0.1290069f), new Vector2(-0.9111272f, -0.01958655f), new Vector2(-0.9117162f, -0.1297967f), new Vector2(-0.6904426f, -0.1258784f), new Vector2(-0.6816f, -0.1044058f), new Vector2(-0.6321625f, -0.1036801f), new Vector2(-0.6296467f, -0.1831215f), new Vector2(-0.4693135f, -0.2402876f), new Vector2(-0.3228278f, -0.2407436f), new Vector2(-0.3202591f, -0.2177911f), new Vector2(-0.2121843f, -0.2172049f), new Vector2(-0.1017499f, -0.1012663f), new Vector2(0.9143211f, -0.09985304f), new Vector2(0.9151768f, 0.04067149f), new Vector2(-0.1116644f, 0.04366067f), new Vector2(-0.1155721f, 0.07007612f), new Vector2(-0.2611363f, 0.1634612f), new Vector2(-0.3418329f, 0.1597519f), new Vector2(-0.3448367f, 0.2428571f), };


                    // Removes box colliders
                    foreach (BoxCollider2D collider in Instance.GetComponents<BoxCollider2D>())
                    {
                        Instance.GetComponent<BoxCollider2D>().enabled = false;
                    };


                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.24f, -0.17f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.85f, 0f, 0), new Vector3(-0.7f, 0f, 0) };
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.015f;
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(0.9266f, 0f);
                    Instance.transform.Find("GameObject").localPosition = new Vector3(-0.3857f, -0.2283f, 0f);// Sets position of grip
                    Instance.transform.Find("GameObject").localScale = new Vector3(0.9f, 0.9f, 0.9f);
                    Instance.transform.Find("GameObject").eulerAngles = new Vector3(0f, 0f, 180f);
                    Instance.GetComponent<Rigidbody2D>().mass = 4f;

                }
            }
            );

            // M2
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Light Machine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} M2 Browning", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "H", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Ma Deuce'  .50 BMG  Skins: 0                   \n\nThe M2 Browning machine gun is a .50 caliber is a heavy machine gun designed by John Browning, the weapon has been in service since 1933.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Heavy/M2/M2_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_50BMG;

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Heavy/M2/M2.png");
                    
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.2146842f, 0.09940553f), new Vector2(-0.2721205f, 0.07150759f), new Vector2(-0.7577784f, 0.07205466f), new Vector2(-0.8423551f, 0.1282307f), new Vector2(-0.8416341f, 0.07123256f), new Vector2(-0.9563469f, 0.07119427f), new Vector2(-0.9563517f, 0.04179356f), new Vector2(-1.014758f, 0.04312389f), new Vector2(-1.014395f, 0.07199194f), new Vector2(-1.071429f, 0.07380541f), new Vector2(-1.071429f, -0.1265431f), new Vector2(-1.013659f, -0.1271606f), new Vector2(-1.014047f, -0.0996629f), new Vector2(-0.9570163f, -0.09875411f), new Vector2(-0.957423f, -0.1254407f), new Vector2(-0.6144314f, -0.1256998f), new Vector2(-0.6087134f, -0.09812854f), new Vector2(-0.1874124f, -0.09661121f), new Vector2(-0.1860956f, -0.07668526f), new Vector2(0.1833248f, -0.07260099f), new Vector2(0.1835396f, -0.03879797f), new Vector2(1.072359f, -0.03951778f), new Vector2(1.072359f, 0.01466833f), new Vector2(0.1850782f, 0.01327317f), new Vector2(0.1845815f, 0.04311002f), new Vector2(-0.2150113f, 0.04135146f), };

                    Instance.GetComponent<FirearmBehaviour>().ShotHeatMultiplier = 1f;
                    Instance.GetComponent<FirearmBehaviour>().casingDirection = new Vector2(1f, -5f);
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.11f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.56f, -0.085f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-1.035f, 0f, 0), new Vector3(-1.035f, 0f, 0) };
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(1.0797f, -0.0145f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(-0.3143f, -0.1142f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.6573f, 0.0858f, 0f); // Sets position of scope
                    
                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);
                    Instance.transform.Find("ScopeAttachment").eulerAngles = new Vector3(0, 0, 0);

                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Heavy/M2/M2_Bolt.png"), Position: new Vector2(-0.7143f, -0.0286f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.07f, BoltCover: null);


                    Instance.GetComponent<VertexColourBasedOnTemperatureBehaviour>().enabled = false;

                    // Removes box colliders
                    foreach (BoxCollider2D collider in Instance.GetComponents<BoxCollider2D>())
                    {
                        Instance.GetComponent<BoxCollider2D>().enabled = false;
                    };


                    Instance.GetComponentInChildren<LineRenderer>().material.mainTexture = ModAPI.LoadTexture("Guns/Heavy/M2/M2_Belt.png");
                    Instance.GetComponentInChildren<LineRenderer>().material.mainTexture.wrapMode = TextureWrapMode.Repeat;

                    // Belt Width
                    Instance.GetComponentInChildren<LineRenderer>().widthMultiplier = 0.9f;
                    // Belt Position

                    Instance.GetComponentInChildren<DistanceJoint2D>().connectedAnchor = new Vector2(-0.35f, 0.0145f);
                    Instance.transform.GetChild(0).localPosition = new Vector3(-0.357f, 0.028f, 0);

                    Instance.GetComponent<Rigidbody2D>().mass = 4f;
                }
            }
            );

            // M2 Box
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Light Machine Gun"), //item to derive from
                NameOverride = $"{Mod.ModTag} M2 Browning Box", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "H", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Ma Deuce'  .50 BMG  Skins: 0                   \n\nThe M2 Browning machine gun is a .50 caliber is a heavy machine gun designed by John Browning, the weapon has been in service since 1933.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Heavy/M2/M2_Box_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // Sets cartridge to custom one
                    Instance.GetComponent<FirearmBehaviour>().Cartridge = AWP_50BMG;

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Heavy/M2/M2_Box.png");

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.1857341f, 0.1275476f), new Vector2(-0.2136414f, 0.1283655f), new Vector2(-0.2143606f, 0.1871235f), new Vector2(-0.2714312f, 0.1859906f), new Vector2(-0.2713364f, 0.1597211f), new Vector2(-0.7559301f, 0.1594181f), new Vector2(-0.8407369f, 0.213804f), new Vector2(-0.8407345f, 0.157788f), new Vector2(-0.957248f, 0.1573924f), new Vector2(-0.9590093f, 0.1295221f), new Vector2(-1.015698f, 0.1283539f), new Vector2(-1.015702f, 0.1585167f), new Vector2(-1.071429f, 0.1584266f), new Vector2(-1.07019f, -0.04310782f), new Vector2(-1.013952f, -0.04346464f), new Vector2(-1.013817f, -0.01416003f), new Vector2(-0.9560574f, -0.01438485f), new Vector2(-0.956322f, -0.04265409f), new Vector2(-0.6141834f, -0.04365493f), new Vector2(-0.6138517f, -0.01452067f), new Vector2(-0.4733627f, -0.01211135f), new Vector2(-0.4732281f, -0.214406f), new Vector2(-0.2715508f, -0.2140736f), new Vector2(-0.2712204f, -0.04272369f), new Vector2(-0.2430062f, -0.04212919f), new Vector2(-0.2432732f, -0.01402244f), new Vector2(-0.186364f, -0.01375565f), new Vector2(-0.1868475f, 0.01523877f), new Vector2(0.1854073f, 0.01439616f), new Vector2(0.185884f, 0.04273928f), new Vector2(1.068019f, 0.04317099f), new Vector2(1.068001f, 0.09902578f), new Vector2(0.1855321f, 0.0992718f), };


                    Instance.GetComponent<FirearmBehaviour>().casingDirection = new Vector2(1f, -5f);
                    Instance.GetComponent<FirearmBehaviour>().AutomaticFireInterval = 0.11f;
                    Instance.GetComponent<FirearmBehaviour>().casingPosition = new Vector2(-0.56f, 0.00071f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-1.035f, 0.08571f, 0), new Vector3(-1.035f, 0.08571f, 0) };
                    Instance.GetComponent<FirearmBehaviour>().barrelPosition = new Vector2(1.08f, 0.0714f);
                    Instance.transform.Find("BarrelAttachment").localPosition = new Vector3(-0.3144f, -0.0283f, 0f); // Sets position of grip
                    Instance.transform.Find("ScopeAttachment").localPosition = new Vector3(-0.6571f, 0.1714f, 0f); // Sets position of scope

                    Instance.transform.Find("BarrelAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);
                    Instance.transform.Find("ScopeAttachment").localScale = new Vector3(0.9f, 0.9f, 0.9f);
                    Instance.transform.Find("ScopeAttachment").eulerAngles = new Vector3(0, 0, 0);

                    CamsEasyMethods.SetUpGunBolt(Instance: Instance, BoltImage: ModAPI.LoadSprite("Guns/Heavy/M2/M2_Bolt.png"), Position: new Vector2(-0.7143f, 0.05711f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -0.07f, BoltCover: null);

                    Instance.GetComponent<VertexColourBasedOnTemperatureBehaviour>().enabled = false;

                    // Removes box colliders
                    foreach (BoxCollider2D collider in Instance.GetComponents<BoxCollider2D>())
                    {
                        Instance.GetComponent<BoxCollider2D>().enabled = false;
                    };

                    // Disables Belt
                    Instance.transform.GetChild(0).gameObject.SetActive(false);


                    //This creates a new GameObject to hold the looping texture of the revolver's cylinder.
                    GameObject Cylinder = new GameObject("Cylinder");
                    Cylinder.transform.SetParent(Instance.transform, false);
                    //This sets the position of the cylinder.
                    Cylinder.transform.localPosition = new Vector3(-0.37143f, 0.04286f, 0);
                    //This sets the sprite of the cylinder to the looping texture.
                    Cylinder.AddComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Heavy/M2/M2_Box_Belt.png");

                    //This sets up the revolver's cylinder looping texture.
                    CamsEasyMethods.SetUpGunLoopingTexture(Cylinder, ModAPI.LoadTexture("Guns/Heavy/M2/M2_Box_Belt.png"), ModAPI.LoadTexture("Guns/Heavy/M2/M2_Box_Mask.png"));


                    //this gets the LoopTextureHandler component from the cylinder.
                    var spinner = Instance.GetComponentInChildren<LoopTextureHandler>();

                    //This adds a burst of rotation to the cylinder.
                    void AddRotationBurst(float Amount)
                    {
                        spinner.AddRotationBurst(Amount);
                    }

                    //flips the cylinder upside down.
                    spinner.transform.localScale = new Vector3(1, -1, 1);
                    //This adds a listener to the OnFire event of the revolver and calls the AddRotationBurst function.
                    Instance.GetComponent<FirearmBehaviour>().OnFire.AddListener(() =>
                    {
                        AddRotationBurst(0.08f);
                    });

                    Instance.GetComponent<Rigidbody2D>().mass = 4f;

                }
            }
            );

            // M2 Mortar
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Grenade Launcher"), //item to derive from
                NameOverride = $"{Mod.ModTag} M2 Mortar", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories \n\nThe Milkor MGL is a South-African made revolving 40mm greande launcher, the weapon can fire up to 3 40mm grenades a second."
                DescriptionOverride = "'Mortar Tube'  60mm Shell  Skins: 0             \n\nThe M2 Mortar is a U.S mortar weapon used in World War II, the Korean War and the vietnam war by U.S forces extensively.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Heavy/Mortar/M2_Mortar_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    Sprite Rocket = ModAPI.LoadSprite("Guns/Heavy/Mortar/Mortar.png");

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Heavy/Mortar/M2_Tube.png");

                    // Removes the Box colliders the Grenade Launcher starts with
                    foreach (BoxCollider2D collider in Instance.GetComponents<BoxCollider2D>())
                    {
                        Instance.GetComponent<BoxCollider2D>().enabled = false;
                    };

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.4300715f, 0.08481191f), new Vector2(-0.4282668f, -0.05864298f), new Vector2(0.4571429f, -0.05683823f), new Vector2(0.4571429f, 0.08571429f), };
                    Instance.GetComponent<ProjectileLauncherBehaviour>().barrelPosition = new Vector2(0.478f, 0.0144f);
                    Instance.transform.eulerAngles = new Vector3(0, 0, 70);
                    

                    // CREATES PLATE
                    GameObject Plate = ModAPI.CreatePhysicalObject("Plate", ModAPI.LoadSprite("Guns/Heavy/Mortar/M2_Plate.png"));
                    Plate.transform.SetParent(Instance.transform, false);
                  
                    //This sets the position
                    Plate.transform.localPosition = new Vector3(-0.4717f, -0.01655f, 0);
                    Plate.transform.localEulerAngles = new Vector3(0,0,-71);
                  
                    // Coliiders
                    Plate.FixColliders();
                    Plate.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.1850703f, 0.05686579f), new Vector2(0.1849024f, 0.02854097f), new Vector2(-0.1865844f, 0.02862193f), new Vector2(-0.1865844f, 0.05714286f), new Vector2(-0.2142857f, 0.05714286f), new Vector2(-0.2142857f, -0.05714286f), new Vector2(-0.05548237f, -0.02934531f), new Vector2(0.2142857f, -0.02862192f), new Vector2(0.2142857f, 0.05714286f), };

                    Plate.GetComponent<SpriteRenderer>().sortingOrder = 1;
                    Plate.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.4f;


                    // CREATES TRIPOD
                    GameObject Tripod = ModAPI.CreatePhysicalObject("Tripod", ModAPI.LoadSprite("Guns/Heavy/Mortar/M2_Tripod.png"));
                    Tripod.transform.SetParent(Instance.transform, false);
                   
                    //This sets the position
                    Tripod.transform.localPosition = new Vector3(0.1218f, -0.053f, 0);
                    
                    // Coliiders
                    Tripod.FixColliders();
                    Tripod.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.06989208f, 0.04474068f), new Vector2(-0.07008225f, -0.04389967f), new Vector2(-0.04370636f, -0.04398146f), new Vector2(-0.04265814f, -0.07176764f), new Vector2(-0.01489653f, -0.07208334f), new Vector2(-0.01482828f, -0.6139731f), new Vector2(-0.04248999f, -0.6150178f), new Vector2(-0.04354135f, -0.6427708f), new Vector2(0.01378609f, -0.6431699f), new Vector2(0.01468823f, -0.6719453f), new Vector2(0.04200189f, -0.6713738f), new Vector2(0.04155278f, -0.6429004f), new Vector2(0.07011986f, -0.6423516f), new Vector2(0.06991617f, -0.6143294f), new Vector2(0.04237366f, -0.6147138f), new Vector2(0.04246743f, -0.042567f), new Vector2(0.07027055f, -0.04182413f), new Vector2(0.07093586f, 0.04250614f), };

                    Tripod.GetComponent<SpriteRenderer>().sortingOrder = 1;
                    Tripod.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.4f;

                    // Hinge Joint setup

                    Physics2D.IgnoreCollision(Instance.GetComponent<PolygonCollider2D>(), Tripod.GetComponent<PolygonCollider2D>());
                    Tripod.AddComponent<HingeJoint2D>().connectedBody = Instance.GetComponent<Rigidbody2D>();
                    Tripod.GetComponent<HingeJoint2D>().useLimits = true;
                    Tripod.GetComponent<HingeJoint2D>().limits = new JointAngleLimits2D() { max = 66, min = -30 };

                    Physics2D.IgnoreCollision(Instance.GetComponent<PolygonCollider2D>(), Plate.GetComponent<PolygonCollider2D>());
                    Plate.AddComponent<HingeJoint2D>().connectedBody = Instance.GetComponent<Rigidbody2D>();
                    Plate.GetComponent<HingeJoint2D>().useLimits = true;
                    Plate.GetComponent<HingeJoint2D>().limits = new JointAngleLimits2D() { max = 60, min = -35 };

                    // Bazooka VFX setup

                    GameObject Bazooka = GameObject.Instantiate(ModAPI.FindSpawnable("Bazooka").Prefab);
                    CatalogBehaviour.PerformMod(ModAPI.FindSpawnable("Bazooka"), Bazooka);
                    GameObject VFX = Bazooka.transform.Find("vfx").gameObject;

                    VFX.transform.parent = Instance.transform;
                    GameObject.Destroy(Bazooka);
                    VFX.transform.localPosition = new Vector3(0.441f, 0.0274f, 0);
                    VFX.transform.localEulerAngles = new Vector3(0, 0, 235);

                    VFX.GetComponent<ParticleSystem>().maxParticles = 0;

                    VFX.transform.Find("backblast").Find("flash").gameObject.SetActive(false);
                    VFX.transform.Find("front").gameObject.SetActive(false);


                    // Replace this with the thing that actually creates a new object rather than using prefab VVV CAMDOGETH

                    Instance.AddComponent<UseEventTrigger>().Action = () =>
                    {
                        VFX.GetComponent<ParticleSystem>().Play(true);
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<SpriteRenderer>().sprite = Rocket;
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<ExplosiveBehaviour>().Range = 5;
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<ExplosiveBehaviour>().BigExplosion = true;
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<ExplosiveBehaviour>().FragmentForce = 0.3f;
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<ExplosiveBehaviour>().ExplodesOnFragmentHit = false;
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<PointToVelocityBehaviour>().enabled = true;
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<PointToVelocityBehaviour>().direction = new Vector2(1, -0.3f);
                        Instance.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<AudioSource>().maxDistance = 100;
                    };

                    if (Instance.transform.localScale.x < 0)
                    {
                        Instance.transform.eulerAngles = new Vector3(0, 0, -70);
                        Tripod.GetComponent<HingeJoint2D>().limits = new JointAngleLimits2D() { max = -66, min = 30 };
                        Plate.GetComponent<HingeJoint2D>().limits = new JointAngleLimits2D() { max = -60, min = 35 };
                    };

                }
            }
            );

            // M177 Howitzer
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Bulletproof Sheet"), //item to derive from
                NameOverride = $"{Mod.ModTag} M177 Howitzer", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "G", // Alphabetical Order sorting of catagories \n\nThe Milkor MGL is a South-African made revolving 40mm greande launcher, the weapon can fire up to 3 40mm grenades a second."
                DescriptionOverride = "'Howitzer'  	155MM Shell  Skins: 0           \n\nThe M177 Howitzer is a British made 155MM artillery piece that has been in service since 2005 in many western countries.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Heavy/Howitzer/How_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    // Sets Up Base Sprite and object
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Heavy/Howitzer/How_Base.png");
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(1.254726f, -0.3356784f), new Vector2(-0.07706833f, -0.3239905f), new Vector2(-0.2205625f, -0.1310551f), new Vector2(-0.3159322f, -0.133183f), new Vector2(-0.3197993f, -0.3258163f), new Vector2(-0.6487499f, -0.3272529f), new Vector2(-0.6505697f, 0.1033566f), new Vector2(-0.7678353f, 0.1856374f), new Vector2(-0.8678167f, 0.1967552f), new Vector2(-0.7468126f, 0.3419115f), new Vector2(-0.7429296f, 0.4339739f), new Vector2(-0.8826465f, 0.4450753f), new Vector2(-0.8320543f, 0.4791507f), new Vector2(-0.8217998f, 0.668373f), new Vector2(-1.056427f, 0.6717194f), new Vector2(-1.051633f, 0.6179755f), new Vector2(-1.136842f, 0.6114385f), new Vector2(-1.139687f, 0.557263f), new Vector2(-1.057491f, 0.52433f), new Vector2(-1.060589f, 0.4460108f), new Vector2(-1.125125f, 0.436334f), new Vector2(-1.051388f, 0.1979876f), new Vector2(-1.170463f, 0.09544763f), new Vector2(-1.173965f, -0.3282491f), new Vector2(-2.02637f, -0.04285715f), new Vector2(-2.162134f, -0.1504117f), new Vector2(-2.137479f, -0.2962098f), new Vector2(-1.170996f, -0.6405649f), new Vector2(2.16217f, -0.6683422f), new Vector2(2.146738f, -0.6250429f), };
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 50;
                    Instance.GetComponent<SpriteRenderer>().sortingOrder = 3;

                    // Sets up Arm
                    GameObject How_Dig_Arm = ModAPI.CreatePhysicalObject("How_Dig_Arm", ModAPI.LoadSprite("Guns/Heavy/Howitzer/How_Dig_Arm.png"));
                    How_Dig_Arm.transform.SetParent(Instance.transform, false);
                    How_Dig_Arm.transform.localPosition = new Vector3(-2.022f, -0.201f, 0);

                    How_Dig_Arm.FixColliders();
                    How_Dig_Arm.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-1.014286f, 0.1285714f), new Vector2(-1.014286f, -0.1285714f), new Vector2(0.101506f, -0.1208974f), new Vector2(0.1017124f, 0.1304899f), };

                    Physics2D.IgnoreCollision(How_Dig_Arm.GetComponent<PolygonCollider2D>(), Instance.GetComponent<PolygonCollider2D>());
                    How_Dig_Arm.AddComponent<HingeJoint2D>().connectedBody = Instance.GetComponent<Rigidbody2D>();
                    How_Dig_Arm.GetComponent<PhysicalBehaviour>().TrueInitialMass = 10;
                    How_Dig_Arm.GetComponent<SpriteRenderer>().sortingOrder = 4;
                    How_Dig_Arm.GetComponent<HingeJoint2D>().useLimits = true;
                    How_Dig_Arm.GetComponent<HingeJoint2D>().limits = new JointAngleLimits2D() { max = -0.1194f, min = -87.53f };

                    // Sets up Digger
                    GameObject How_Digger = ModAPI.CreatePhysicalObject("How_Digger", ModAPI.LoadSprite("Guns/Heavy/Howitzer/How_Digger.png"));
                    How_Digger.transform.SetParent(How_Dig_Arm.transform, false);
                    How_Digger.transform.localPosition = new Vector3(-0.961f, -0.002f, 0);

                    How_Digger.FixColliders();
                    How_Digger.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.2464798f, 0.3089201f), new Vector2(-0.1245719f, 0.06445567f), new Vector2(-0.1581674f, -0.0129956f), new Vector2(-0.5630897f, -0.05112819f), new Vector2(-0.5125426f, -0.0976757f), new Vector2(0.1036224f, -0.09767573f), new Vector2(0.1036224f, 0.1006491f), new Vector2(-0.04466847f, 0.100785f), };

                    Physics2D.IgnoreCollision(How_Digger.GetComponent<PolygonCollider2D>(), How_Dig_Arm.GetComponent<PolygonCollider2D>());
                    How_Digger.AddComponent<HingeJoint2D>().connectedBody = How_Dig_Arm.GetComponent<Rigidbody2D>();
                    How_Dig_Arm.GetComponent<PhysicalBehaviour>().TrueInitialMass = 5;
                    How_Digger.GetComponent<SpriteRenderer>().sortingOrder = 1;
                    How_Digger.GetComponent<HingeJoint2D>().useLimits = true;
                    How_Digger.GetComponent<HingeJoint2D>().limits = new JointAngleLimits2D() { max = 6.3043f, min = 85.4533f };

                    // Sets up Mech
                    GameObject How_Mech = GameObject.Instantiate(ModAPI.FindSpawnable("Grenade Launcher").Prefab);
                    How_Mech.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Heavy/Howitzer/How_Mech.png");
                    How_Mech.transform.SetParent(Instance.transform, false);
                    How_Mech.transform.localPosition = new Vector3(-0.787f, 0.058f, 0);

                    How_Mech.FixColliders();
                    How_Mech.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(2.23988f, 0.3578746f), new Vector2(2.238514f, 0.440392f), new Vector2(2.044241f, 0.4399591f), new Vector2(2.037587f, 0.3834884f), new Vector2(1.984456f, 0.4397686f), new Vector2(1.903137f, 0.4387606f), new Vector2(1.897581f, 0.5338789f), new Vector2(1.844159f, 0.5341754f), new Vector2(1.842333f, 0.5010694f), new Vector2(1.239737f, 0.5017525f), new Vector2(1.241397f, 0.5285501f), new Vector2(1.016574f, 0.52653f), new Vector2(1.012922f, 0.418656f), new Vector2(0.7529913f, 0.4168362f), new Vector2(0.7513337f, 0.445039f), new Vector2(0.2463422f, 0.4430035f), new Vector2(0.2449942f, 0.392234f), new Vector2(-0.003536463f, 0.3571379f), new Vector2(-0.09715694f, -0.01979059f), new Vector2(-0.0952881f, -0.3273984f), new Vector2(0.7483472f, -0.3244874f), new Vector2(0.8201722f, -0.2688978f), new Vector2(0.9877906f, -0.2692729f), new Vector2(0.9878894f, -0.2375527f), new Vector2(1.465766f, -0.2362326f), new Vector2(1.470812f, -0.1242492f), new Vector2(2.727033f, -0.1265856f), new Vector2(2.758407f, -0.07339548f), new Vector2(2.727123f, -0.01810777f), new Vector2(5.942904f, -0.009926371f), new Vector2(5.996124f, -0.07894857f), new Vector2(6.553596f, -0.07213733f), new Vector2(6.553736f, -0.01310491f), new Vector2(6.585963f, -0.01311083f), new Vector2(6.582625f, 0.2422003f), new Vector2(6.553651f, 0.2415883f), new Vector2(6.554483f, 0.3019049f), new Vector2(5.993748f, 0.3004126f), new Vector2(5.946496f, 0.2448967f), new Vector2(2.727346f, 0.2507107f), new Vector2(2.76123f, 0.3062899f), new Vector2(2.73226f, 0.3543808f), };

                    Physics2D.IgnoreCollision(How_Mech.GetComponent<PolygonCollider2D>(), Instance.GetComponent<PolygonCollider2D>());
                    How_Mech.AddComponent<HingeJoint2D>().connectedBody = Instance.GetComponent<Rigidbody2D>();
                    How_Mech.GetComponent<Rigidbody2D>().angularDrag = 999999;
                    How_Mech.GetComponent<HingeJoint2D>().useLimits = true;
                    How_Mech.GetComponent<HingeJoint2D>().limits = new JointAngleLimits2D() { max = -60, min = 1.3f };
                    How_Mech.GetComponent<PhysicalBehaviour>().TrueInitialMass = 30;
                    How_Mech.GetComponent<Rigidbody2D>().gravityScale = 0;
                    How_Mech.GetComponent<SpriteRenderer>().sortingOrder = 2;

                    // PROJECTILE

                    Sprite Rocket = ModAPI.LoadSprite("Guns/Heavy/Howitzer/How_Rocket.png");
                    How_Mech.GetComponent<ProjectileLauncherBehaviour>().barrelPosition = new Vector2(6.173f, 0.117f);
                    How_Mech.GetComponent<ProjectileLauncherBehaviour>().projectileLaunchStrength = 0.5f;
                    How_Mech.GetComponent<ProjectileLauncherBehaviour>().recoilMultiplier = 1000;
                    How_Mech.GetComponent<ProjectileLauncherBehaviour>().ScreenShake = 40;
                    How_Mech.GetComponent<ProjectileLauncherBehaviour>().launchAudioSource = How_Mech.GetComponent<AudioSource>();
                    How_Mech.GetComponent<ProjectileLauncherBehaviour>().LaunchClips = new AudioClip[]
                    {
                       ModAPI.LoadSound("Guns/_Shared/Audio/105MM_1.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/105MM_2.wav"),
                       ModAPI.LoadSound("Guns/_Shared/Audio/105MM_3.wav"),
                    };

                    // Bazooka VFX setup
                    GameObject Bazooka = GameObject.Instantiate(ModAPI.FindSpawnable("Bazooka").Prefab);
                    CatalogBehaviour.PerformMod(ModAPI.FindSpawnable("Bazooka"), Bazooka);
                    GameObject VFX = Bazooka.transform.Find("vfx").gameObject;

                    VFX.transform.parent = How_Mech.transform;
                    GameObject.Destroy(Bazooka);
                    VFX.transform.localPosition = new Vector3(6.173f, 0.117f, 0);
                    VFX.transform.localEulerAngles = new Vector3(0, 0, 260);
                    
                    VFX.GetComponent<ParticleSystem>().maxParticles = 0;

                    VFX.GetComponent<ParticleSystem>().playbackSpeed = 3;
                    VFX.transform.Find("front").localPosition = new Vector3(1f, -6.248f, 0);
                    VFX.transform.Find("front").Find("frontblast").Find("embers").gameObject.SetActive(false);
                    VFX.transform.Find("front").Find("frontblast").Find("flash").gameObject.SetActive(false);
                    VFX.transform.Find("front").GetComponent<ParticleSystem>().enableEmission = false;

                    // USE EVENT ACTION
                    How_Mech.AddComponent<UseEventTrigger>().Action = () =>
                    {
                        VFX.GetComponent<ParticleSystem>().Play(true);
                        How_Mech.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<SpriteRenderer>().sprite = Rocket;
                        How_Mech.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<ExplosiveBehaviour>().Range = 20;
                        How_Mech.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<ExplosiveBehaviour>().BigExplosion = true;
                        How_Mech.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<ExplosiveBehaviour>().FragmentForce = 0.7f;
                        How_Mech.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<ExplosiveBehaviour>().ExplodesOnFragmentHit = false;
                        How_Mech.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<PointToVelocityBehaviour>().enabled = true;
                        How_Mech.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<PointToVelocityBehaviour>().direction = new Vector2(1, -0.3f);
                        How_Mech.GetComponent<ProjectileLauncherBehaviour>().projectilePrefab.GetComponent<AudioSource>().maxDistance = 50;
                        How_Mech.GetComponent<AudioSource>().maxDistance = 700;
                        How_Mech.GetComponent<AudioSource>().minDistance = 50;
                        How_Mech.GetComponent<AudioSource>().outputAudioMixerGroup = default;
                        How_Mech.GetComponent<AudioSource>().rolloffMode = AudioRolloffMode.Logarithmic;
                        How_Mech.GetComponent<AudioSource>().spread = 35;
                        How_Mech.GetComponent<AudioSource>().playOnAwake = true;
                        How_Mech.GetComponent<AudioSource>().enabled = true;
                        Global.main.AddAudioSource(How_Mech.GetComponent<AudioSource>());
                        
                    };


                    // Sets up barrel
                    void shoot()
                    {
                        How_Mech.transform.Find("GunBolt").GetComponent<TranslationAnimationBehaviour>().Play();
                    }

                    CamsEasyMethods.SetUpGunBolt(Instance: How_Mech, BoltImage: ModAPI.LoadSprite("Guns/Heavy/Howitzer/How_Barrel.png"), Position: new Vector2(3.4f, 0.1f), GunToBaseOff: ModAPI.FindSpawnable("Assault Rifle"), BoltShootPosition: -1f, BoltCover: null);
                    How_Mech.transform.Find("GunBolt").GetComponent<SortingLayerChild>().enabled = false;
                    How_Mech.transform.Find("GunBolt").GetComponent<SpriteRenderer>().sortingOrder = 1;
                    How_Mech.transform.Find("GunBolt").GetComponent<BoltAnimator>().SetDuration(0.4f);

                    How_Mech.transform.Find("GunBolt").GetComponent<TranslationAnimationBehaviour>().DistanceOverTime.keys[0].time = 0;
                    How_Mech.transform.Find("GunBolt").GetComponent<TranslationAnimationBehaviour>().DistanceOverTime.keys[0].value = 0;

                    How_Mech.transform.Find("GunBolt").GetComponent<TranslationAnimationBehaviour>().DistanceOverTime.keys[1].time = 0.24f;
                    How_Mech.transform.Find("GunBolt").GetComponent<TranslationAnimationBehaviour>().DistanceOverTime.keys[1].value = 1.0012f;

                    How_Mech.transform.Find("GunBolt").GetComponent<TranslationAnimationBehaviour>().DistanceOverTime.keys[2].time = 0.3f;
                    How_Mech.transform.Find("GunBolt").GetComponent<TranslationAnimationBehaviour>().DistanceOverTime.keys[2].value = 0.9861f;

                    How_Mech.transform.Find("GunBolt").GetComponent<TranslationAnimationBehaviour>().DistanceOverTime.keys[3].time = 1;
                    How_Mech.transform.Find("GunBolt").GetComponent<TranslationAnimationBehaviour>().DistanceOverTime.keys[3].value = 0;

                    How_Mech.GetComponent<ProjectileLauncherBehaviour>().OnLaunchEvent.AddListener(shoot);
                    

                    // Sets up Mech 0
                    GameObject How_Mech_0 = new GameObject("How_Mech_0");
                    How_Mech_0.transform.SetParent(How_Mech.transform, false);
                    How_Mech_0.transform.localPosition = new Vector3(0.0157f, 0.0858f, 0);
                    How_Mech_0.AddComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Heavy/Howitzer/How_Mech_0.png");
                    How_Mech_0.GetComponent<SpriteRenderer>().sortingOrder = 0;


                    // Sets up Wheel
                    GameObject How_Wheel = new GameObject("How_Wheel");
                    How_Wheel.transform.SetParent(How_Mech.transform, false);
                    How_Wheel.transform.localPosition = new Vector3(-0.0699f, -0.1451f, 0);
                    How_Wheel.AddComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Heavy/Howitzer/How_Wheel.png");
                    How_Wheel.GetComponent<SpriteRenderer>().sortingOrder = 4;


                    // Sets up Rod
                    GameObject How_Rod = new GameObject("How_Rod");
                    How_Rod.transform.SetParent(Instance.transform, false);
                    How_Rod.transform.localPosition = new Vector3(-0.144f, -0.54f, 0);
                    How_Rod.AddComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Heavy/Howitzer/How_Rod.png");
                    How_Rod.GetComponent<SpriteRenderer>().sortingOrder = 0;

                    GameObject Rod_Target = new GameObject("Rod_Target");
                    Rod_Target.transform.SetParent(How_Mech.transform, false);
                    Rod_Target.transform.localPosition = new Vector3(2.275f, 0.272f, 0);

                    How_Rod.AddComponent<LookAtConstraint>().AddSource(new ConstraintSource() {sourceTransform = Rod_Target.transform, weight = 1});
                    How_Rod.GetComponent<LookAtConstraint>().rotationOffset = new Vector3(0, -90, 0);
                    How_Rod.GetComponent<LookAtConstraint>().constraintActive = true;

                    if (Instance.transform.localScale.x < 0)
                    {
                        How_Dig_Arm.GetComponent<HingeJoint2D>().limits = new JointAngleLimits2D() { max = 0.1194f, min = 87.53f };
                        How_Digger.GetComponent<HingeJoint2D>().limits = new JointAngleLimits2D() { max = -6.3043f, min = -85.4533f };
                        How_Mech.GetComponent<HingeJoint2D>().limits = new JointAngleLimits2D() { max = 60, min = -1.3f };
                    };

                }
            }
            );
            
            #endregion

            // Grenades
            #region Grenades

            // HE INDIVIDUALS //

            // RGN
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Handgrenade"), //item to derive from
                NameOverride = $"{Mod.ModTag} RGN", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Y", // Alphabetical Order sorting of catagories
                DescriptionOverride = "RGN Grenade \n\n Explosive \n Skins: 0", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Grenades/HE/rgn_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    // Adds random Sprite Behaviour and sets the sprites
                    Instance.GetOrAddComponent<RandomSpriteBehaviour>();
                    
                    Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Grenades/HE/rgn.png"),
                    };

                    // Creates custom colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.004618921f, 0.07164385f), new Vector2(-0.04239669f, -0.006174058f), new Vector2(-0.04023778f, -0.04086931f), new Vector2(0.001123186f, -0.07142857f), new Vector2(0.04373027f, -0.0373768f), new Vector2(0.04285714f, 0.07142857f), };
                    // Removes default BoxColliders
                    foreach (BoxCollider2D collider in Instance.GetComponents<BoxCollider2D>())
                    { Instance.GetComponent<BoxCollider2D>().enabled = false; };

                    // Holding point position
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0f, 0f, 0) };


                    // Weapon Information
                    // Fuze Time
                    Instance.GetComponent<ExplosiveBehaviour>().Delay = 3.5f;
                    // Lethal Shrapnel
                    Instance.GetComponent<ExplosiveBehaviour>().BallisticShrapnelCount = 8;
                    Instance.GetComponent<ExplosiveBehaviour>().DismemberChance = 0.2f;
                    // Fragmentation
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentationRayCount = 64;
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentForce = 0.8f;
                    // Shockwave
                    Instance.GetComponent<ExplosiveBehaviour>().Range = 10;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveLiftForce = 0.1f;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveStrength = 0.5f;


                }
            }
            );

            // M560
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Handgrenade"), //item to derive from
                NameOverride = $"{Mod.ModTag} M560 Mini", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Y", // Alphabetical Order sorting of catagories
                DescriptionOverride = "M560 Mini Grenade \n\n Explosive \n Skins: 0", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Grenades/HE/M560_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    // Adds random Sprite Behaviour and sets the sprites
                    Instance.GetOrAddComponent<RandomSpriteBehaviour>();
                    
                    Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Grenades/HE/M560.png"),
                    };

                    // Creates custom colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.02996237f, 0.07142857f), new Vector2(-0.07142857f, 0.01433671f), new Vector2(-0.07142857f, -0.07142857f), new Vector2(0.04140247f, -0.07013101f), new Vector2(0.07013103f, -0.02341951f), new Vector2(0.06429733f, 0.05859233f), };
                    // Removes default BoxColliders
                    foreach (BoxCollider2D collider in Instance.GetComponents<BoxCollider2D>())
                    { Instance.GetComponent<BoxCollider2D>().enabled = false; };

                    // Holding point position
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0f, 0f, 0) };


                    // Weapon Information
                    // Fuze Time
                    Instance.GetComponent<ExplosiveBehaviour>().Delay = 3.5f;
                    // Lethal Shrapnel
                    Instance.GetComponent<ExplosiveBehaviour>().BallisticShrapnelCount = 8;
                    Instance.GetComponent<ExplosiveBehaviour>().DismemberChance = 0.2f;
                    // Fragmentation
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentationRayCount = 64;
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentForce = 0.8f;
                    // Shockwave
                    Instance.GetComponent<ExplosiveBehaviour>().Range = 10;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveLiftForce = 0.1f;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveStrength = 0.5f;


                }
            }
            );

            // Hafthohlladung
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Handgrenade"), //item to derive from
                NameOverride = $"{Mod.ModTag} Hafthohlladung", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Y", // Alphabetical Order sorting of catagories
                DescriptionOverride = "Hafthohlladung Anti Tank Magnetic Grenade \n\n Explosive \n Skins: 0", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Grenades/HE/Hafthohlladung_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    // Adds random Sprite Behaviour and sets the sprites
                    Instance.GetOrAddComponent<RandomSpriteBehaviour>();
                    
                    Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Grenades/HE/Hafthohlladung.png"),
                    };

                    // Creates custom colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.002812276f, 0.120135f), new Vector2(-0.09831271f, -0.07199126f), new Vector2(-0.1f, -0.1285714f), new Vector2(0.1f, -0.1285714f), new Vector2(0.1016873f, -0.08211501f), };
                    // Removes default BoxColliders
                    foreach (BoxCollider2D collider in Instance.GetComponents<BoxCollider2D>())
                    { Instance.GetComponent<BoxCollider2D>().enabled = false; };

                    // Holding point position
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0f, 0f, 0) };


                    // Weapon Information
                    // Fuze Time
                    Instance.GetComponent<ExplosiveBehaviour>().Delay = 3.5f;
                    // Lethal Shrapnel
                    Instance.GetComponent<ExplosiveBehaviour>().BallisticShrapnelCount = 8;
                    Instance.GetComponent<ExplosiveBehaviour>().DismemberChance = 0.2f;
                    // Fragmentation
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentationRayCount = 64;
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentForce = 0.8f;
                    // Shockwave
                    Instance.GetComponent<ExplosiveBehaviour>().Range = 10;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveLiftForce = 0.1f;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveStrength = 0.5f;


                }
            }
            );

            // F1 Grenade
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Handgrenade"), //item to derive from
                NameOverride = $"{Mod.ModTag} F1 Grenade", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Y", // Alphabetical Order sorting of catagories
                DescriptionOverride = "F1 Grenade with skins for Australian, French and russian versions. \n\n Explosive \n Skins: 3", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Grenades/HE/F1/F1_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    // Adds random Sprite Behaviour and sets the sprites
                    Instance.GetOrAddComponent<RandomSpriteBehaviour>();
                    
                    Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Grenades/HE/F1/F1_RU.png"),
                        ModAPI.LoadSprite("Guns/Grenades/HE/F1/F1_AU.png"),
                        ModAPI.LoadSprite("Guns/Grenades/HE/F1/F1_Fr.png")
                    };

                    Instance.GetComponent<RandomSpriteBehaviour>().chosenIndex = 0;

                    // Creates custom colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.0187242f, 0.05041236f), new Vector2(-0.0270599f, 0.05161936f), new Vector2(-0.07019012f, -0.004117426f), new Vector2(-0.06926398f, -0.1060152f), new Vector2(-0.04316033f, -0.1428571f), new Vector2(0.01794811f, -0.1428571f), new Vector2(0.05081405f, -0.1111359f), new Vector2(0.05538444f, 0.009920007f), };
                    // Removes default BoxColliders
                    foreach (BoxCollider2D collider in Instance.GetComponents<BoxCollider2D>())
                    { Instance.GetComponent<BoxCollider2D>().enabled = false; };

                    // Holding point position
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.015f, -0.06f, 0) };


                    // Weapon Information
                    // Fuze Time
                    Instance.GetComponent<ExplosiveBehaviour>().Delay = 3.5f;
                    // Lethal Shrapnel
                    Instance.GetComponent<ExplosiveBehaviour>().BallisticShrapnelCount = 8;
                    Instance.GetComponent<ExplosiveBehaviour>().DismemberChance = 0.2f;
                    // Fragmentation
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentationRayCount = 64;
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentForce = 0.8f;
                    // Shockwave
                    Instance.GetComponent<ExplosiveBehaviour>().Range = 10;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveLiftForce = 0.1f;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveStrength = 0.5f;


                }
            }
            );

            // Stiel Grenade
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Stielhandgranate"), //item to derive from
                NameOverride = $"{Mod.ModTag} Stielhandgranate Stick Grenades", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Y", // Alphabetical Order sorting of catagories
                DescriptionOverride = "Stick Grenades with multiple versions \n\n Explosive \n Skins: 5", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Grenades/HE/Stiel/Stiel_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    // Adds random Sprite Behaviour and sets the sprites
                    Instance.GetOrAddComponent<RandomSpriteBehaviour>();
                    
                    Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Grenades/HE/Stiel/Stiel_M15.png"),
                        ModAPI.LoadSprite("Guns/Grenades/HE/Stiel/Stiel_M16.png"),
                        ModAPI.LoadSprite("Guns/Grenades/HE/Stiel/Stiel_M17.png"),
                        ModAPI.LoadSprite("Guns/Grenades/HE/Stiel/Stiel_M24.png"),
                        ModAPI.LoadSprite("Guns/Grenades/HE/Stiel/Stiel_M43.png")
                    };

                    Instance.GetComponent<RandomSpriteBehaviour>().chosenIndex = 0;

                    // Creates custom colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.03524005f, 0.2785188f), new Vector2(-0.06162374f, 0.08238209f), new Vector2(-0.01394105f, 0.08478062f), new Vector2(-0.0154245f, -0.2705954f), new Vector2(0.03797216f, -0.2683924f), new Vector2(0.04184436f, 0.08469482f), new Vector2(0.09165864f, 0.08331282f), new Vector2(0.06762002f, 0.2761202f), };
                    // Removes default BoxColliders
                    foreach (BoxCollider2D collider in Instance.GetComponents<BoxCollider2D>())
                    { Instance.GetComponent<BoxCollider2D>().enabled = false; };
                    
                    // Holding point position
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0.0143f, -0.14f, 0) };


                    // Weapon Information
                    // Fuze Time
                    Instance.GetComponent<ExplosiveBehaviour>().Delay = 3.2f;
                    // Lethal Shrapnel
                    Instance.GetComponent<ExplosiveBehaviour>().BallisticShrapnelCount = 7;
                    Instance.GetComponent<ExplosiveBehaviour>().DismemberChance = 0.25f;
                    // Fragmentation
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentationRayCount = 64;
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentForce = 0.8f;
                    // Shockwave
                    Instance.GetComponent<ExplosiveBehaviour>().Range = 11;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveLiftForce = 0.2f;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveStrength = 0.5f;


                }
            }
            );

            // Stiel AT Grenade
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Stielhandgranate"), //item to derive from
                NameOverride = $"{Mod.ModTag} Stielhandgranate AT Grenade", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Y", // Alphabetical Order sorting of catagories
                DescriptionOverride = "Stick Grenades with multiple versions \n\n Explosive \n Skins: 0", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Grenades/HE/Stiel/StielAT_M24GL_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    // Adds random Sprite Behaviour and sets the sprites
                    Instance.GetOrAddComponent<RandomSpriteBehaviour>();
                    
                    Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Grenades/HE/Stiel/StielAT_M24GL.png"),
                    };

                    Instance.GetComponent<RandomSpriteBehaviour>().chosenIndex = 0;

                    // Creates custom colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.001838498f, 0.27434f), new Vector2(-0.142803f, 0.2459239f), new Vector2(-0.1431108f, 0.09976599f), new Vector2(-0.03023846f, 0.09890504f), new Vector2(-0.02954893f, -0.2673359f), new Vector2(0.02819371f, -0.2683924f), new Vector2(0.02880643f, 0.09990573f), new Vector2(0.1438103f, 0.09635075f), new Vector2(0.1447611f, 0.2413524f), };
                    // Removes default BoxColliders
                    foreach (BoxCollider2D collider in Instance.GetComponents<BoxCollider2D>())
                    { Instance.GetComponent<BoxCollider2D>().enabled = false; };

                    // Holding point position
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0f, -0.13f, 0) };


                    // Weapon Information
                    // Fuze Time
                    Instance.GetComponent<ExplosiveBehaviour>().Delay = 2f;
                    // Lethal Shrapnel
                    Instance.GetComponent<ExplosiveBehaviour>().BallisticShrapnelCount = 6;
                    Instance.GetComponent<ExplosiveBehaviour>().DismemberChance = 0.2f;
                    // Fragmentation
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentationRayCount = 64;
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentForce = 0.6f;
                    // Shockwave
                    Instance.GetComponent<ExplosiveBehaviour>().Range = 8;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveLiftForce = 0.18f;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveStrength = 0.8f;


                }
            }
            );

            // M13
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Handgrenade"), //item to derive from
                NameOverride = $"{Mod.ModTag} Model 13 Grenade", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Y", // Alphabetical Order sorting of catagories
                DescriptionOverride = "Model 13 Grenade \n\n Explosive \n Skins: 1", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Grenades/HE/M13/M13_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    // Adds random Sprite Behaviour and sets the sprites
                    Instance.GetOrAddComponent<RandomSpriteBehaviour>();
                    
                    Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Grenades/HE/M13/M13.png"),
                        ModAPI.LoadSprite("Guns/Grenades/HE/M13/Excelsior.png")
                    };

                    Instance.GetComponent<RandomSpriteBehaviour>().chosenIndex = 0;

                    // Creates custom colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.006528195f, 0.07142857f), new Vector2(-0.03586265f, 0.00299798f), new Vector2(0.006528188f, -0.0703688f), new Vector2(0.07719373f, -0.07036879f), new Vector2(0.1206443f, 0.005117521f), new Vector2(0.08143281f, 0.07248835f), };
                    // Removes default BoxColliders
                    foreach (BoxCollider2D collider in Instance.GetComponents<BoxCollider2D>())
                    { Instance.GetComponent<BoxCollider2D>().enabled = false; };

                    // Holding point position
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0.04f, 0f, 0) };


                    // Weapon Information
                    // Fuze Time
                    Instance.GetComponent<ExplosiveBehaviour>().Delay = 3.5f;
                    // Lethal Shrapnel
                    Instance.GetComponent<ExplosiveBehaviour>().BallisticShrapnelCount = 8;
                    Instance.GetComponent<ExplosiveBehaviour>().DismemberChance = 0.2f;
                    // Fragmentation
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentationRayCount = 64;
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentForce = 0.8f;
                    // Shockwave
                    Instance.GetComponent<ExplosiveBehaviour>().Range = 10;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveLiftForce = 0.1f;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveStrength = 0.5f;


                }
            }
            );

            // HE GROUPS //

            // Western Grenades
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Handgrenade"), //item to derive from
                NameOverride = $"{Mod.ModTag} Western Grenades", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Y", // Alphabetical Order sorting of catagories
                DescriptionOverride = "Western grenades, includes skins for L2A2, L109, M26, M67, M75, Mk2, OF15 and SOHG grenades. \n\n Explosive \n Skins: 8", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Grenades/HE/Western/L2A2_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    // Adds random Sprite Behaviour and sets the sprites
                    Instance.GetOrAddComponent<RandomSpriteBehaviour>();
                    
                    Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Grenades/HE/Western/L2A2.png"),
                        ModAPI.LoadSprite("Guns/Grenades/HE/Western/L109.png"),
                        ModAPI.LoadSprite("Guns/Grenades/HE/Western/M26.png"),
                        ModAPI.LoadSprite("Guns/Grenades/HE/Western/m67.png"),
                        ModAPI.LoadSprite("Guns/Grenades/HE/Western/M75.png"),
                        ModAPI.LoadSprite("Guns/Grenades/HE/Western/Mk2.png"),
                        ModAPI.LoadSprite("Guns/Grenades/HE/Western/OF15.png"),
                        ModAPI.LoadSprite("Guns/Grenades/HE/Western/SOHG.png")
                    };

                    Instance.GetComponent<RandomSpriteBehaviour>().chosenIndex = 0;

                    // Creates custom colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.01174366f, 0.0734422f), new Vector2(-0.06612972f, 0.03853329f), new Vector2(-0.07142857f, -0.1f), new Vector2(0.04281475f, -0.09894022f), new Vector2(0.04281475f, 0.04065283f), };
                    // Removes default BoxColliders
                    foreach (BoxCollider2D collider in Instance.GetComponents<BoxCollider2D>())
                    { Instance.GetComponent<BoxCollider2D>().enabled = false; };

                    // Holding point position
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0f, 0f, 0) };


                    // Weapon Information
                    // Fuze Time
                    Instance.GetComponent<ExplosiveBehaviour>().Delay = 3.5f;
                    // Lethal Shrapnel
                    Instance.GetComponent<ExplosiveBehaviour>().BallisticShrapnelCount = 8;
                    Instance.GetComponent<ExplosiveBehaviour>().DismemberChance = 0.1f;
                    // Fragmentation
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentationRayCount = 64;
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentForce = 0.8f;
                    // Shockwave
                    Instance.GetComponent<ExplosiveBehaviour>().Range = 11;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveLiftForce = 0.1f;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveStrength = 0.5f;


                }
            }
            );

            // Cylindrical grenades
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Handgrenade"), //item to derive from
                NameOverride = $"{Mod.ModTag} Cylindrical Grenades", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Y", // Alphabetical Order sorting of catagories
                DescriptionOverride = "Cylindrical Grenades, includes skins for DM51, Mk3 and DF37 grenades. \n\n Explosive \n Skins: 2", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Grenades/HE/Long/DM51_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    // Adds random Sprite Behaviour and sets the sprites
                    Instance.GetOrAddComponent<RandomSpriteBehaviour>();
                    
                    Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Grenades/HE/Long/DM51.png"),
                        ModAPI.LoadSprite("Guns/Grenades/HE/Long/Mk3.png"),
                        ModAPI.LoadSprite("Guns/Grenades/HE/Long/DF37.png")
                    };

                    Instance.GetComponent<RandomSpriteBehaviour>().chosenIndex = 0;

                    // Creates custom colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.009585392f, 0.09944351f), new Vector2(-0.06930903f, 0.0459093f), new Vector2(-0.07142857f, -0.1285714f), new Vector2(0.04387453f, -0.1253921f), new Vector2(0.04705384f, 0.04272998f), };
                    // Removes default BoxColliders
                    foreach (BoxCollider2D collider in Instance.GetComponents<BoxCollider2D>())
                    { Instance.GetComponent<BoxCollider2D>().enabled = false; };

                    // Holding point position
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0f, 0f, 0) };


                    // Weapon Information
                    // Fuze Time
                    Instance.GetComponent<ExplosiveBehaviour>().Delay = 3.5f;
                    Instance.GetComponent<ExplosiveBehaviour>().BigExplosion = true;
                    // Lethal Shrapnel
                    Instance.GetComponent<ExplosiveBehaviour>().BallisticShrapnelCount = 6;
                    Instance.GetComponent<ExplosiveBehaviour>().DismemberChance = 0.2f;
                    // Fragmentation
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentationRayCount = 64;
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentForce = 0.8f;
                    // Shockwave
                    Instance.GetComponent<ExplosiveBehaviour>().Range = 10;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveLiftForce = 0.1f;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveStrength = 0.5f;


                }
            }
            );

            // Large Grenades
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Handgrenade"), //item to derive from
                NameOverride = $"{Mod.ModTag} Large Grenades", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Y", // Alphabetical Order sorting of catagories
                DescriptionOverride = "Large Grenades, includes skins for RG42, Mills bomb and Breda Mod. 35 grenade. \n\n Explosive \n Skins: 2", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Grenades/HE/Large/RG42_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    // Adds random Sprite Behaviour and sets the sprites
                    Instance.GetOrAddComponent<RandomSpriteBehaviour>();
                    
                    Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Grenades/HE/Large/RG42.png"),
                        ModAPI.LoadSprite("Guns/Grenades/HE/Large/Breda Mod. 35.png"),
                        ModAPI.LoadSprite("Guns/Grenades/HE/Large/Mills bomb.png")
                    };

                    Instance.GetComponent<RandomSpriteBehaviour>().chosenIndex = 0;

                    // Creates custom colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.01470964f, 0.0967783f), new Vector2(-0.08571429f, 0.01465531f), new Vector2(-0.08571429f, -0.1285714f), new Vector2(0.06027979f, -0.1243324f), new Vector2(0.07193726f, 0.03743114f), };
                    // Removes default BoxColliders
                    foreach (BoxCollider2D collider in Instance.GetComponents<BoxCollider2D>())
                    { Instance.GetComponent<BoxCollider2D>().enabled = false; };

                    // Holding point position
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0f, -0.05f, 0) };


                    // Weapon Information
                    // Fuze Time
                    Instance.GetComponent<ExplosiveBehaviour>().Delay = 3.5f;
                    // Lethal Shrapnel
                    Instance.GetComponent<ExplosiveBehaviour>().BallisticShrapnelCount = 8;
                    Instance.GetComponent<ExplosiveBehaviour>().DismemberChance = 0.2f;
                    // Fragmentation
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentationRayCount = 64;
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentForce = 0.8f;
                    // Shockwave
                    Instance.GetComponent<ExplosiveBehaviour>().Range = 10;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveLiftForce = 0.1f;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveStrength = 0.5f;


                }
            }
            );

            // Large Fuse Grenades
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Handgrenade"), //item to derive from
                NameOverride = $"{Mod.ModTag} Large Fuse Grenades", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Y", // Alphabetical Order sorting of catagories
                DescriptionOverride = "Large Fuse Grenades, includes skins for FMK 2, No69 and Citron Foug 1916 grenade. \n\n Explosive \n Skins: 2", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Grenades/HE/FMK/FMK 2_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    // Adds random Sprite Behaviour and sets the sprites
                    Instance.GetOrAddComponent<RandomSpriteBehaviour>();
                    
                    Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Grenades/HE/FMK/FMK 2.png"),
                        ModAPI.LoadSprite("Guns/Grenades/HE/FMK/No69.png"),
                        ModAPI.LoadSprite("Guns/Grenades/HE/FMK/Citron Foug 1916.png")
                    };

                    Instance.GetComponent<RandomSpriteBehaviour>().chosenIndex = 0;

                    // Creates custom colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.03963545f, 0.08724037f), new Vector2(-0.07366396f, -0.06765161f), new Vector2(-0.04387453f, -0.130691f), new Vector2(0.01632048f, -0.1285714f), new Vector2(0.05813866f, -0.0567123f), new Vector2(0.01949979f, 0.08512083f), };
                    // Removes default BoxColliders
                    foreach (BoxCollider2D collider in Instance.GetComponents<BoxCollider2D>())
                    { Instance.GetComponent<BoxCollider2D>().enabled = false; };

                    // Holding point position
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0f, -0.05f, 0) };


                    // Weapon Information
                    // Fuze Time
                    Instance.GetComponent<ExplosiveBehaviour>().Delay = 3f;
                    Instance.GetComponent<ExplosiveBehaviour>().BigExplosion = true;
                    // Lethal Shrapnel
                    Instance.GetComponent<ExplosiveBehaviour>().BallisticShrapnelCount = 7;
                    Instance.GetComponent<ExplosiveBehaviour>().DismemberChance = 0.2f;
                    // Fragmentation
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentationRayCount = 64;
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentForce = 0.8f;
                    // Shockwave
                    Instance.GetComponent<ExplosiveBehaviour>().Range = 10;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveLiftForce = 0.11f;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveStrength = 0.5f;


                }
            }
            );

            // INCEN //

            //Incendiary Grenade
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Handgrenade"), //item to derive from
                NameOverride = $"{Mod.ModTag} AN-M14 TH3 Incendiary Grenade", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Y", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Incendiary'  Thermite Bomb  Skins: 0        \n\nThe AN-M14 TH3 Incendiary Grenade is a thermite grenade made by the U.S, the thermite reaction is extremely violent.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Grenades/Incen/anm14_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    // Adds random Sprite Behaviour and sets the sprites
                    Instance.GetOrAddComponent<RandomSpriteBehaviour>();
                    
                    Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Grenades/Incen/anm14 Modern.png"),
                        ModAPI.LoadSprite("Guns/Grenades/Incen/anm14.png"),
                    };

                    Instance.GetComponent<RandomSpriteBehaviour>().chosenIndex = 0;

                    // Creates custom colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.07032016f, 0.0744349f), new Vector2(0.02076315f, 0.1239406f), new Vector2(-0.04281475f, 0.1264519f), new Vector2(-0.04387452f, -0.1285714f), new Vector2(0.04281476f, -0.1275117f), new Vector2(0.04281476f, 0.01305638f), };
                    // Removes default BoxColliders
                    foreach (BoxCollider2D collider in Instance.GetComponents<BoxCollider2D>())
                    { Instance.GetComponent<BoxCollider2D>().enabled = false; };

                    // Holding point position
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0f, 0f, 0) };


                    // Weapon Information
                    // Fuze Time
                    Instance.GetComponent<ExplosiveBehaviour>().Delay = 1.5f;
                    // Lethal Shrapnel
                    Instance.GetComponent<ExplosiveBehaviour>().BallisticShrapnelCount = 0;
                    Instance.GetComponent<ExplosiveBehaviour>().DismemberChance = 0f;
                    // Fragmentation
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentationRayCount = 64;
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentForce = 1f;
                    // Shockwave
                    Instance.GetComponent<ExplosiveBehaviour>().Range = 35;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveLiftForce = 0.1f;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveStrength = 12f;

                    Instance.AddComponent<FireGrenade>();

                }
            }
            );

            // Molotov Cocktail
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Brick"), //item to derive from
                NameOverride = $"{Mod.ModTag} Molotov Cocktail", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Y", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Molly'  Fire Bomb  Skins: 0                 \n\nA molotov cocktail is essentially a bottle of flammable liquid with a rag in it, a simple and effective weapon.", // description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Grenades/Incen/Molotov_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    // Adds random Sprite Behaviour and sets the sprites
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Grenades/Incen/Molotov.png");

                    // Creates custom colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.001346683f, 0.05742426f), new Vector2(0.000883149f, 0.1700461f), new Vector2(-0.05851552f, 0.1700951f), new Vector2(-0.05736889f, 0.05772896f), new Vector2(-0.08800747f, 0.05658238f), new Vector2(-0.08571429f, -0.2285714f), new Vector2(0.027238f, -0.229718f), new Vector2(0.02838461f, 0.05658236f), };

                    Instance.AddComponent<Molle>().ExplodeOnContact = true;

                    GameObject Liquid = GameObject.Instantiate(ModAPI.FindSpawnable("Bottle").Prefab.transform.GetChild(0).gameObject);
                    Liquid.transform.SetParent(Instance.transform, false);

                    Liquid.GetComponent<LiquidContainerController>().Color = new Color(0.5592f, 0.6874f, 0f, 0.1502f);
                    Liquid.GetComponent<LiquidContainerController>().FillPercentage = 0.5102f;
                    Liquid.transform.localPosition = new Vector3(-0.03f, -0.09f, 0);
                    Liquid.transform.localScale = new Vector3(0.23f, 0.234f, 0.2643f);
                }
            }
            );

            // FLASHBANGS //

            // Western Flashbang
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Plastic Explosive"), //item to derive from
                NameOverride = $"{Mod.ModTag} Western Flashbangs", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Y", // Alphabetical Order sorting of catagories
                DescriptionOverride = "Western Flashbang Grenades, includes, M84 and M1A1 \n\n Non-Lethal \n Skins: 1", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Grenades/Flash/m84_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    // Adds random Sprite Behaviour and sets the sprites
                    Instance.GetOrAddComponent<RandomSpriteBehaviour>();
                    
                    Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Grenades/Flash/m84.png"),
                        ModAPI.LoadSprite("Guns/Grenades/Flash/M1A1.png")
                    };

                    Instance.GetComponent<RandomSpriteBehaviour>().chosenIndex = 0;

                    // Creates custom colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.07032016f, 0.0744349f), new Vector2(0.02076315f, 0.1239406f), new Vector2(-0.04281475f, 0.1264519f), new Vector2(-0.04387452f, -0.1285714f), new Vector2(0.04281476f, -0.1275117f), new Vector2(0.04281476f, 0.01305638f), };
                    // Removes default BoxColliders
                    foreach (BoxCollider2D collider in Instance.GetComponents<BoxCollider2D>())
                    { Instance.GetComponent<BoxCollider2D>().enabled = false; };

                    // Holding point position
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0f, 0f, 0) };


                    // Weapon Information
                    // Fuze Time
                    Instance.GetComponent<ExplosiveBehaviour>().Delay = 1.5f;
                    // Lethal Shrapnel
                    Instance.GetComponent<ExplosiveBehaviour>().BallisticShrapnelCount = 0;
                    Instance.GetComponent<ExplosiveBehaviour>().DismemberChance = 0f;
                    // Fragmentation
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentationRayCount = 64;
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentForce = 0.3f;
                    // Shockwave
                    Instance.GetComponent<ExplosiveBehaviour>().Range = 35;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveLiftForce = 0.1f;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveStrength = 4f;

                    Instance.AddComponent<FlashGrenade>();

                }
            }
            );

            // Zarya Flashbang
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Plastic Explosive"), //item to derive from
                NameOverride = $"{Mod.ModTag} Zarya Flashbang", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Y", // Alphabetical Order sorting of catagories
                DescriptionOverride = "Zarya Flashbang Grenade, includes black and white variant \n\n Non-Lethal \n Skins: 1", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Grenades/Flash/Zarya_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    
                    // Adds random Sprite Behaviour and sets the sprites
                    Instance.GetOrAddComponent<RandomSpriteBehaviour>();
                    
                    Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Grenades/Flash/Zarya.png"),
                        ModAPI.LoadSprite("Guns/Grenades/Flash/ZaryaWhite.png")
                    };

                    Instance.GetComponent<RandomSpriteBehaviour>().chosenIndex = 0;

                    // Creates custom colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.002241841f, 0.1270859f), new Vector2(-0.02869869f, 0.1282786f), new Vector2(-0.02478575f, 0.04577367f), new Vector2(-0.08677404f, -0.01979651f), new Vector2(-0.08465452f, -0.09359899f), new Vector2(-0.003306471f, -0.1296312f), new Vector2(0.0794944f, -0.06910213f), new Vector2(0.08677406f, 0.01309878f), new Vector2(0.0009749942f, 0.07452313f), };
                    // Removes default BoxColliders
                    foreach (BoxCollider2D collider in Instance.GetComponents<BoxCollider2D>())
                    { Instance.GetComponent<BoxCollider2D>().enabled = false; };

                    // Holding point position
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0f, -0.05f, 0) };


                    // Weapon Information
                    // Fuze Time
                    Instance.GetComponent<ExplosiveBehaviour>().Delay = 2.6f;
                    // Lethal Shrapnel
                    Instance.GetComponent<ExplosiveBehaviour>().BallisticShrapnelCount = 0;
                    Instance.GetComponent<ExplosiveBehaviour>().DismemberChance = 0f;
                    // Fragmentation
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentationRayCount = 64;
                    Instance.GetComponent<ExplosiveBehaviour>().FragmentForce = 1f;
                    // Shockwave
                    Instance.GetComponent<ExplosiveBehaviour>().Range = 35;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveLiftForce = 0.1f;
                    Instance.GetComponent<ExplosiveBehaviour>().ShockwaveStrength = 12f;

                    Instance.AddComponent<FlashGrenade>();


                }
            }
            );

            // SMOKE

            // Smoke Grenades
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Brick"), //item to derive from
                NameOverride = $"{Mod.ModTag} Smoke Grenade", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "Y", // Alphabetical Order sorting of catagories
                DescriptionOverride = "Smoke Grenades, includes M18 and N39. \n\n Non-Lethal \n Skins: 1", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Grenades/Smoke/Thumb.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {

                    // Adds random Sprite Behaviour and sets the sprites
                    Instance.GetOrAddComponent<RandomSpriteBehaviour>();
                    
                    Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Guns/Grenades/Smoke/m18.png"),
                        ModAPI.LoadSprite("Guns/Grenades/Smoke/N39.png")
                    };

                    Instance.GetComponent<RandomSpriteBehaviour>().chosenIndex = 0;

                    // Creates custom colliders
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(0.07032016f, 0.0744349f), new Vector2(0.02076315f, 0.1239406f), new Vector2(-0.04281475f, 0.1264519f), new Vector2(-0.04387452f, -0.1285714f), new Vector2(0.04281476f, -0.1275117f), new Vector2(0.04281476f, 0.01305638f), };
                    // Removes default BoxColliders
                    foreach (BoxCollider2D collider in Instance.GetComponents<BoxCollider2D>())
                    { Instance.GetComponent<BoxCollider2D>().enabled = false; };

                    // Holding point position
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(0f, 0f, 0) };

                    // Weapon Information
                    // Fuze Time
                    Instance.AddComponent<SmokeGrenade>().SmokeLoop = ModAPI.LoadSound("Guns/Grenades/Smoke/Smoke_Loop.wav");

                }
            }
            );

            // GAS
            
            #endregion
            
            // Original Weapons
            #region Original Weapons
            
            // Plasma Rifle
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Machine Blaster"), //item to derive from
                NameOverride = $"{Mod.ModTag} Plasma Rifle", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Plasma Rifle'  Plasma  Skins: 0                   \n\nThe Plasma Rifle fires a concentrated ball of plasma that not only burns on impact but shocks anything it goes near.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Original/Plasma Rifle/Thumb.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //destroy all Instance's children
                    foreach (Transform child in Instance.transform)
                    { GameObject.Destroy(child.gameObject); };
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Original/Plasma Rifle/Plasma Rifle.png");
                    
                    
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] {new Vector2(0.2028695f, 0.1428291f), new Vector2(0.2014137f, 0.1731899f), new Vector2(0.1162845f, 0.1738142f), new Vector2(0.1162847f, 0.14441f), new Vector2(-0.2547273f, 0.1450415f), new Vector2(-0.2888559f, 0.08614857f), new Vector2(-0.6540385f, 0.08853085f), new Vector2(-0.6555907f, -0.1155501f), new Vector2(-0.5166829f, -0.1147603f), new Vector2(-0.40132f, -0.0004095063f), new Vector2(-0.2565604f, -0.001820002f), new Vector2(-0.2867668f, -0.1704964f), new Vector2(-0.198278f, -0.1714286f), new Vector2(-0.1691417f, -0.05885085f), new Vector2(-0.1436099f, -0.08554421f), new Vector2(0.3456985f, -0.08451983f), new Vector2(0.3438388f, -0.05650898f), new Vector2(0.6571429f, -0.05748726f), new Vector2(0.6555907f, 0.1434893f), };
                    

                    var PR = Instance.AddComponent<PlasmaRifle>();
                    PR.PlasmaBolt = ModAPI.LoadSprite("Guns/Original/Plasma Rifle/Projectile.png");
                    PR.shootSound = ModAPI.LoadSound("Guns/Original/Plasma Rifle/Shoot.wav");
                    Component.Destroy(Instance.GetComponent<BlasterBehaviour>());

                    Instance.GetComponent<PlasmaRifle>().barrelPosition = new Vector3(0.672f, 0.0716f, 0f);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.216f, -0.065f, 0f), new Vector3(0.1597f, -0.065f, 0f) };
                }
            }
            );
           
            // Medical Stapler
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Machine Blaster"), //item to derive from
                NameOverride = $"{Mod.ModTag} Medical Stapler", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Medical Stapler'  Staples  Skins: 0                   \n\nThe Medical Stapler injects the patient with a serum that stops bleeding and heals punctured lungs. only works when pressed against patient.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Original/Medical Stapler/Thumb.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //destroy all Instance's children
                    foreach (Transform child in Instance.transform)
                    { GameObject.Destroy(child.gameObject); };
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Original/Medical Stapler/Medical Stapler.png");
                    Instance.FixColliders();
                    var MR = Instance.AddComponent<MedicalStapleGun>();
                    MR.shootSound = ModAPI.LoadSound("Guns/Original/Medical Stapler/Shoot.wav");
                    Component.Destroy(Instance.GetComponent<BlasterBehaviour>());

                    GameObject GunBolt = new GameObject("GunBolt");
                    GunBolt.transform.SetParent(Instance.transform, false);
                    GunBolt.AddComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Original/Medical Stapler/Stabber.png");
                    GunBolt.transform.localPosition = Vector3.zero;
                    GunBolt.AddComponent<TranslationAnimationBehaviour>().Axis = ModAPI.FindSpawnable("Assault Rifle").Prefab.GetComponentInChildren<TranslationAnimationBehaviour>().Axis;
                    GunBolt.GetComponent<TranslationAnimationBehaviour>().Multiplier *= 0.15f;
                    GunBolt.GetComponent<TranslationAnimationBehaviour>().DistanceOverTime = ModAPI.FindSpawnable("Assault Rifle").Prefab.GetComponentInChildren<TranslationAnimationBehaviour>().DistanceOverTime;
                    GunBolt.GetComponent<TranslationAnimationBehaviour>().Duration = 0.2f;
                    GunBolt.GetComponent<SpriteRenderer>().sortingOrder = 1;
                    Instance.GetComponent<SpriteRenderer>().sortingOrder = 2;
                    MR.translationAnimationBehaviour = GunBolt.GetComponent<TranslationAnimationBehaviour>();
                }
            }
            );
           
            // Wilson Gun
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Machine Blaster"), //item to derive from
                NameOverride = $"{Mod.ModTag} Wilson Gun", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Wilson Gun'  Wilsons  Skins: 0                   \n\nIt is unknown what the Wilson Gun does, but it is known that it is very powerful. Disclaimer, longform contact known to give user the Wilson", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Original/Wilson Gun/Thumb.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //destroy all Instance's children
                    foreach (Transform child in Instance.transform)
                    { GameObject.Destroy(child.gameObject); };
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Original/Wilson Gun/Wilson Gun.png");
                    var WG = Instance.AddComponent<WilsonGun>();
                    WG.Wilson = ModAPI.LoadSprite("Guns/Original/Wilson Gun/Wilson.png");
                    WG.shootSound = ModAPI.LoadSound("Guns/Original/Wilson Gun/Shoot.wav");
                    WG.w1 = ModAPI.LoadSound("Guns/Original/Wilson Gun/WIlson p1.wav");
                    WG.w2 = ModAPI.LoadSound("Guns/Original/Wilson Gun/WIlson p2.wav");
                    Component.Destroy(Instance.GetComponent<BlasterBehaviour>());

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] {new Vector2(0.0001375675f, 0.04296821f), new Vector2(6.103516E-05f, 0.09933048f), new Vector2(-0.05685902f, 0.1000331f), new Vector2(-0.08511031f, 0.07119391f), new Vector2(-0.1142857f, 0.04260308f), new Vector2(-0.1142857f, -0.07123643f), new Vector2(-0.08623184f, -0.07113294f), new Vector2(-0.08544707f, -0.0997026f), new Vector2(-0.0001592636f, -0.1000347f), new Vector2(0.000138998f, -0.0429998f), new Vector2(0.08516712f, -0.04254649f), new Vector2(0.1140122f, -0.01424865f), new Vector2(0.1144171f, 0.04297415f), };
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] { new Vector3(-0.05f, -0.02f, 0)}; 
                }
            }
            );
           
                // Blood Boiler
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Machine Blaster"), //item to derive from
                NameOverride = $"{Mod.ModTag} Blood Boiler", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Blood Boiler'  Heat  Skins: 0                   \n\nThe Blood Boiler converts the blood of any lifeform it comes in contact with into a superheated plasma. Good for cooking chicken.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Original/Blood Boiler/Thumb.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //destroy all Instance's children
                    foreach (Transform child in Instance.transform)
                    { GameObject.Destroy(child.gameObject); };
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Original/Blood Boiler/Blood Boiler.png");
                    Instance.FixColliders();
                    var BB = Instance.AddComponent<BloodBoiler>();
                    BB.shootSound = ModAPI.LoadSound("Guns/Original/Blood Boiler/Shoot.wav");
                    BB.boilSound = ModAPI.LoadSound("Guns/Original/Blood Boiler/boiling.wav");
                    BB.hitSound = ModAPI.LoadSound("Guns/Original/Blood Boiler/Hit.wav");
                    BB.ding = ModAPI.LoadSound("Guns/Original/Blood Boiler/Ding.wav");
                    Component.Destroy(Instance.GetComponent<BlasterBehaviour>());

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] {new Vector2(-0.1413125f, 0.1285715f), new Vector2(-0.1694413f, 0.1027875f), new Vector2(-0.2f, 0.04118097f), new Vector2(-0.2f, -0.1285714f), new Vector2(-0.05727601f, -0.1285715f), new Vector2(-0.05783896f, -0.04262508f), new Vector2(0.1694016f, -0.04287964f), new Vector2(0.2026839f, 0.01327896f), new Vector2(0.2f, 0.1285714f), };
                
                    GameObject GunBolt = new GameObject("GunBolt");
                    GunBolt.transform.SetParent(Instance.transform, false);
                    GunBolt.AddComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Original/Blood Boiler/Stabber.png");
                    GunBolt.transform.localPosition = Vector3.zero;
                    GunBolt.AddComponent<TranslationAnimationBehaviour>().Axis = ModAPI.FindSpawnable("Assault Rifle").Prefab.GetComponentInChildren<TranslationAnimationBehaviour>().Axis;
                    GunBolt.GetComponent<TranslationAnimationBehaviour>().Multiplier *= 0.15f;
                    GunBolt.GetComponent<TranslationAnimationBehaviour>().DistanceOverTime = ModAPI.FindSpawnable("Assault Rifle").Prefab.GetComponentInChildren<TranslationAnimationBehaviour>().DistanceOverTime;
                    GunBolt.GetComponent<TranslationAnimationBehaviour>().Duration = 0.2f;
                    GunBolt.GetComponent<SpriteRenderer>().sortingOrder = 1;
                    Instance.GetComponent<SpriteRenderer>().sortingOrder = 2;
                    BB.translationAnimationBehaviour = GunBolt.GetComponent<TranslationAnimationBehaviour>();
                    GunBolt.GetComponent<SpriteRenderer>().material = GameObject.Instantiate(ModAPI.FindMaterial("VeryBright"));
                    GunBolt.GetComponent<SpriteRenderer>().color = new Color(0f, 0f, 0f, 1f);
                }
            }
            );

            // Game Ender
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Machine Blaster"), //item to derive from
                NameOverride = $"{Mod.ModTag} Game Ender", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Game Ender'  URRGH  Skins: 1                                     \n\nIsn't this the gun from duck hunt? I wonder what this does?", //new it
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Original/Game Ender/Thumb.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //destroy all Instance's children
                    foreach (Transform child in Instance.transform)
                    { GameObject.Destroy(child.gameObject); };
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Original/Game Ender/Game Ender Gun.png");
                    var WG = Instance.AddComponent<GameOverGun>();
                    WG.Wilson = ModAPI.LoadSprite("Guns/Original/Game Ender/Game Ender.png");
                    WG.shootSound = ModAPI.LoadSound("Guns/Original/Game Ender/Shoot.wav");
                    WG.w1 = ModAPI.LoadSound("Guns/Original/Game Ender/Game Ender.wav");
                    Component.Destroy(Instance.GetComponent<BlasterBehaviour>());

                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] {new Vector2(0.2026889f, 0.143263f), new Vector2(-0.08605909f, 0.1430005f), new Vector2(-0.2019012f, 0.1714286f), new Vector2(-0.2301451f, 0.1714286f), new Vector2(-0.2539406f, 0.1455389f), new Vector2(-0.2857143f, 0.1141015f), new Vector2(-0.2857143f, 0.05737597f), new Vector2(-0.2274885f, 0.02707523f), new Vector2(-0.199769f, 0.02762562f), new Vector2(-0.1999605f, 2.843142E-05f), new Vector2(-0.2277472f, 0.0004847646f), new Vector2(-0.2857143f, -0.05699748f), new Vector2(-0.2857143f, -0.1714286f), new Vector2(-0.1987772f, -0.1703244f), new Vector2(-0.1988674f, -0.139291f), new Vector2(-0.05684614f, 0.001443565f), new Vector2(0.05586243f, 0.02795666f), new Vector2(0.08459997f, 0.05671138f), new Vector2(0.2863448f, 0.05869716f), new Vector2(0.2865837f, 0.1134624f), new Vector2(0.2572862f, 0.1436616f), };
                
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]

                    {
                        ModAPI.LoadSprite("Guns/Original/Game Ender/Game Ender Gun.png"),
                        ModAPI.LoadSprite("Guns/Original/Game Ender/Game Ender Gun_Skin1.png"),
                    };

                    //Set to zero so it always starts normal
                    Instance.GetComponent<RandomSpriteBehaviour>().chosenIndex = 0;

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Original/Game Ender/Game Ender Gun.png");
                }
            }
            );

            // Piss Gun
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Machine Blaster"), //item to derive from
                NameOverride = $"{Mod.ModTag} Pisstol", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Pisstol'  6''  Skins: 0                                                                 \n\n...", //new it
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Original/Piss Gun/Thumb.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //destroy all Instance's children
                    foreach (Transform child in Instance.transform)
                    { GameObject.Destroy(child.gameObject); };
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Original/Piss Gun/Piss Gun.png");
                    Instance.FixColliders();
                    var BB = Instance.AddComponent<PissGun>();
                    BB.shootSound = ModAPI.LoadSound("Guns/Original/Piss Gun/Shoot.wav");
                    Component.Destroy(Instance.GetComponent<BlasterBehaviour>());
                }
            }
            );

            // K16
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Blaster"), //item to derive from
                NameOverride = $"{Mod.ModTag} K16", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'K16'  Laser Skins: 0                   \n\nThe K16 is a laser pistol that shoots a laser that burns its target.", 
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Original/K16/Thumb.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //destroy all Instance's children
                    foreach (Transform child in Instance.transform)
                    { 
                        if(child.name != "BlasterMuzzleSmoke")
                        GameObject.Destroy(child.gameObject); 
                    };
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Original/K16/K16.png");
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] {new Vector2(0.2292926f, 0.1297376f), new Vector2(0.2285297f, 0.1571709f), new Vector2(-0.02838063f, 0.1572339f), new Vector2(-0.02881536f, 0.1281558f), new Vector2(-0.2548882f, 0.1307193f), new Vector2(-0.2867497f, 0.06939197f), new Vector2(-0.2814184f, 0.01057303f), new Vector2(-0.3428571f, -0.07181054f), new Vector2(-0.3428572f, -0.1571429f), new Vector2(-0.2583721f, -0.1572585f), new Vector2(-0.2291223f, -0.127444f), new Vector2(-0.200063f, -0.06902575f), new Vector2(-0.1157525f, -0.04286301f), new Vector2(-0.08513796f, -0.0142889f), new Vector2(-0.08556437f, 0.0142141f), new Vector2(-0.05720466f, 0.01421647f), new Vector2(-0.05713654f, -0.0429005f), new Vector2(0.2282286f, -0.04183167f), new Vector2(0.2288907f, 0.01374775f), new Vector2(0.343689f, 0.01593109f), new Vector2(0.3436189f, 0.1304769f), };
                    
                    Instance.GetOrAddComponent<LaserPistol>();
                    Instance.GetComponent<LaserPistol>().barrelPosition = new Vector3(0.372999996f,0.0610000007f,0);
                    Instance.GetComponent<LaserPistol>().ChargeSound = ModAPI.LoadSound("Guns/Original/K16/chargeup.wav");
                    Instance.GetComponent<LaserPistol>().shootSound = ModAPI.LoadSound("Guns/Original/K16/shoot.wav");
                    GameObject.Destroy(Instance.GetComponent<BlasterBehaviour>());

                    GameObject NewBolt = GameObject.Instantiate(ModAPI.FindSpawnable("Blaster").Prefab.GetComponent<BlasterBehaviour>().Bolt.gameObject);
                    NewBolt.GetComponent<TrailRenderer>().startColor = new Color(0.5f, 0.5f, 0.5f, 1);
                    NewBolt.GetComponent<TrailRenderer>().endColor = new Color(0.5f, 0.5f, 0.5f, 1);
                    NewBolt.transform.parent = Instance.transform;
                    NewBolt.GetComponent<BlasterboltBehaviour>().CreateExplosion = true;
                    NewBolt.SetActive(false);
                    Instance.GetComponent<LaserPistol>().ItemToLaunch = NewBolt;
                }
            }
            );
            // A280C
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Blaster Rifle"), //item to derive from
                NameOverride = $"{Mod.ModTag} A280C", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "1", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'A280C'  Laser Skins: 0                   \n\nThe A280C is a rife variant of the K16 that shoots a much more powerful laser.",
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Guns/Original/A280C/Thumb.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //destroy all Instance's children
                    foreach (Transform child in Instance.transform)
                    { 
                        if(child.name != "BlasterMuzzleSmoke")
                        GameObject.Destroy(child.gameObject); 
                    };
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Guns/Original/A280C/A280C.png");
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] {new Vector2(0.7720084f, 0.1856532f), new Vector2(0.742852f, 0.15681f), new Vector2(0.7427325f, 0.09999818f), new Vector2(0.5715621f, 0.1000187f), new Vector2(0.5713675f, 0.1570085f), new Vector2(-0.1938876f, 0.1572203f), new Vector2(-0.2574165f, 0.2143558f), new Vector2(-0.4566367f, 0.214369f), new Vector2(-0.4572059f, 0.1561493f), new Vector2(-0.5714289f, 0.1572344f), new Vector2(-0.5710964f, 0.127806f), new Vector2(-0.7140038f, 0.1287079f), new Vector2(-0.7714672f, 0.1855685f), new Vector2(-0.8005132f, 0.1850377f), new Vector2(-0.8002871f, -0.01381312f), new Vector2(-0.771853f, -0.01432157f), new Vector2(-0.7233196f, 0.07206088f), new Vector2(-0.5712431f, 0.07343777f), new Vector2(-0.5710914f, 0.01620913f), new Vector2(-0.3977472f, 0.01486012f), new Vector2(-0.3985229f, -0.01251155f), new Vector2(-0.4231243f, -0.01409894f), new Vector2(-0.5149051f, -0.1572724f), new Vector2(-0.5152584f, -0.180754f), new Vector2(-0.4849718f, -0.2142857f), new Vector2(-0.400242f, -0.2140839f), new Vector2(-0.3423123f, -0.128474f), new Vector2(-0.3435054f, -0.0999108f), new Vector2(-0.285825f, -0.09962916f), new Vector2(-0.2854669f, -0.12872f), new Vector2(-0.2000631f, -0.1282526f), new Vector2(-0.1715761f, -0.0998292f), new Vector2(-0.1714102f, -0.04284185f), new Vector2(2.622604E-06f, -0.04285681f), new Vector2(4.529953E-06f, 0.04285884f), new Vector2(0.1428819f, 0.04287338f), new Vector2(0.1429411f, 0.01438638f), new Vector2(0.4000149f, 0.01479566f), new Vector2(0.4000295f, 0.0715141f), new Vector2(0.7999964f, 0.07135367f), new Vector2(0.8000041f, 0.1857119f), };
                    Instance.GetComponent<BlasterBehaviour>().barrelPosition = new Vector3(0.81099999f,0.0820000023f,0);
                    Instance.GetComponent<PhysicalBehaviour>().HoldingPositions = new Vector3[] {new Vector3(-0.35f, -0.1f, 0f),new Vector3(0.31f, 0, 0)};

                    Instance.GetOrAddComponent<LaserRifle>();
                    Instance.GetComponent<LaserRifle>().barrelPosition = new Vector3(0.83f, 0.084f);
                    Instance.GetComponent<LaserRifle>().shootSound = ModAPI.LoadSound("Guns/Original/A280C/shoot.wav");
                    GameObject.Destroy(Instance.GetComponent<BlasterBehaviour>());

                    GameObject NewBolt = GameObject.Instantiate(ModAPI.FindSpawnable("Blaster").Prefab.GetComponent<BlasterBehaviour>().Bolt.gameObject);
                    NewBolt.GetComponent<TrailRenderer>().startColor = new Color(0.5f, 0.5f, 0.5f, 1);
                    NewBolt.GetComponent<TrailRenderer>().endColor = new Color(0.5f, 0.5f, 0.5f, 1);
                    NewBolt.transform.parent = Instance.transform;
                    NewBolt.SetActive(false);
                    Instance.GetComponent<LaserRifle>().ItemToLaunch = NewBolt;
                }
            }
            );
            #endregion

            // Armor
            #region Armor

            // Light Armor
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Stone Brick"), //item to derive from
                NameOverride = $"{Mod.ModTag} Kevlar Vest", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "_2", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Kevlar'            Level II        Skins: 0        \n\nKevlar is light armor & can stop only low caliber rounds, you can change the color by right clicking it and selecting Color Armor.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Clothing/Armor/Armor_3_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //The sprite of the armor when its not equipped
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Clothing/Armor/Armor_3_Pickup.png");
                    Instance.FixColliders();
                    //the one piece sprite of the whole armor
                    Instance.AddComponent<PackedArmor>().ArmorSprite = ModAPI.LoadSprite("Clothing/Armor/Armor_3.png");
                    //the upper torso sprite
                    Instance.GetComponent<PackedArmor>().ArmorUpperSprite = ModAPI.LoadSprite("Clothing/Armor/Armor_3_Upper.png");
                    //the middle torso sprite
                    Instance.GetComponent<PackedArmor>().ArmorMiddleSprite = ModAPI.LoadSprite("Clothing/Armor/Armor_3_Middle.png");
                    //the name of the armor set
                    Instance.GetComponent<PackedArmor>().ArmorSet = $"{Mod.ModTag} Kevlar Vest";
                    //Handles Scaling of object
                    float xScale = 1.2f;
                    if (Instance.transform.localScale.x < 0)
                    {
                        xScale = -1.2f;
                    };
                    Instance.transform.localScale = new Vector3(xScale, 1.2f, 0);
                    //sets the health of the armor
                    Instance.GetComponent<PackedArmor>().Health = 160;
                }
            }
            );

            // Medium Armor
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Stone Brick"), //item to derive from
                NameOverride = $"{Mod.ModTag} Steel Plate Armor", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "_2", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Steel'             Level III         Skins: 0      \n\nLevel III Steel plates offer protection against most rifle rounds, change the color by right clicking and selecting Color Armor.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Clothing/Armor/Armor_1_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //The sprite of the armor when its not equipped
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Clothing/Armor/Armor_1_Pickup.png");
                    Instance.FixColliders();
                    //the one piece sprite of the whole armor
                    Instance.AddComponent<PackedArmor>().ArmorSprite = ModAPI.LoadSprite("Clothing/Armor/Armor_1.png");
                    //the upper torso sprite
                    Instance.GetComponent<PackedArmor>().ArmorUpperSprite = ModAPI.LoadSprite("Clothing/Armor/Armor_1_Upper.png");
                    //the middle torso sprite
                    Instance.GetComponent<PackedArmor>().ArmorMiddleSprite = ModAPI.LoadSprite("Clothing/Armor/Armor_1_Middle.png");
                    //the name of the armor set
                    Instance.GetComponent<PackedArmor>().ArmorSet = $"{Mod.ModTag} Steel Plate Armor";
                    //Handles Scaling of object
                    float xScale = 1.2f;
                    if (Instance.transform.localScale.x < 0)
                    {
                        xScale = -1.2f;
                    };
                    Instance.transform.localScale = new Vector3(xScale, 1.2f, 0);
                    //sets the health of the armor
                    Instance.GetComponent<PackedArmor>().Health = 250;
                }
            }
            );

            // Heavy Armor
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Stone Brick"), //item to derive from
                NameOverride = $"{Mod.ModTag} Heavy Ceramic Armor", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "_2", // Alphabetical Order sorting of catagories
                DescriptionOverride = "'Ceramic'           Level IV          Skins: 0      \n\nLevel IV Ceramic armour offers great protection from rifle rounds, change the color by right clicking and selecting Color Armor.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Clothing/Armor/Armor_2_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //The sprite of the armor when its not equipped
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Clothing/Armor/Armor_2_Pickup.png");
                    Instance.FixColliders();
                    //the one piece sprite of the whole armor
                    Instance.AddComponent<PackedArmor>().ArmorSprite = ModAPI.LoadSprite("Clothing/Armor/Armor_2.png");
                    //the upper torso sprite
                    Instance.GetComponent<PackedArmor>().ArmorUpperSprite = ModAPI.LoadSprite("Clothing/Armor/Armor_2_Upper.png");
                    //the middle torso sprite
                    Instance.GetComponent<PackedArmor>().ArmorMiddleSprite = ModAPI.LoadSprite("Clothing/Armor/Armor_2_Middle.png");
                    //the lower torso sprite
                    Instance.GetComponent<PackedArmor>().ArmorLowerSprite = ModAPI.LoadSprite("Clothing/Armor/Armor_2_Lower.png");
                    //the name of the armor set
                    Instance.GetComponent<PackedArmor>().ArmorSet = $"{Mod.ModTag} Heavy Ceramic Armor"; 
                    //sets the health of the armor
                    Instance.GetComponent<PackedArmor>().Health = 400;
                }
            }
            );

            #endregion

            // Helmets
            #region Helmet

            // Ulach
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Stone Brick"), //item to derive from
                NameOverride = $"{Mod.ModTag} HighCom Striker Ulach Helmet", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "_3",                                       // \n\nThe Socom 556 Suppresor is designed and manufactured by surefire predominantly for military use, it is designed for 5.56mm weapons.", //new item description
                DescriptionOverride = "'Ulach'  Helmet  Skins: 8                      \n\nThe HighCom striker Ulach Helmet is a level IIIA rated ballistic helmet, includes 3 color variants and 2 NVG variants for each color.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Clothing/Helmet/Helmet1/Helmet_1_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Clothing/Helmet/Helmet1/Helmet_1.png"),
                        ModAPI.LoadSprite("Clothing/Helmet/Helmet1/Helmet_1_NVG_DOWN.png"),
                        ModAPI.LoadSprite("Clothing/Helmet/Helmet1/Helmet_1_NVG_UP.png"),
                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Clothing/Helmet/Helmet1/Helmet_1.png");
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.2660766f, 0.01589897f), new Vector2(-0.2694687f, -0.1229962f), new Vector2(-0.242685f, -0.1523953f), new Vector2(0.1075796f, -0.05327128f), new Vector2(0.03506026f, 0.07651318f), new Vector2(-0.142728f, 0.1f), };

                    Instance.GetComponent<PhysicalBehaviour>().RecalculateMassBasedOnSize();
                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.008f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.008f;
                    float xScale = 1.2f;
                    if (Instance.transform.localScale.x < 0)
                    {
                        xScale = -1.2f;
                    };

                    Instance.transform.localScale = new Vector3(xScale, 1.2f, 0);
                    Instance.GetComponent<SpriteRenderer>().sortingOrder = 1;
                    Instance.GetComponent<SpriteRenderer>().sortingLayerName = "Foreground";
                    Instance.GetOrAddComponent<Helmet>().HelmetName = $"{Mod.ModTag} HighCom Striker Ulach Helmet";
                }
            }
            );

            // FAST MT
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Stone Brick"), //item to derive from
                NameOverride = $"{Mod.ModTag} Ops-Core FAST MT Helmet", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "_3",                                       // \n\nThe Socom 556 Suppresor is designed and manufactured by surefire predominantly for military use, it is designed for 5.56mm weapons.", //new item description
                DescriptionOverride = "'FAST MT'  Helmet  Skins: 8                      \n\nThe Ops-Core FAST MT Helmet is a level IIIA rated ballistic helmet, includes 3 color variants and 2 NVG variants for each color.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Clothing/Helmet/Helmet2/Helmet_2_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Clothing/Helmet/Helmet2/Helmet_2.png"),
                        ModAPI.LoadSprite("Clothing/Helmet/Helmet2/Helmet_2_NVG_DOWN.png"),
                        ModAPI.LoadSprite("Clothing/Helmet/Helmet2/Helmet_2_NVG_UP.png"),
                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Clothing/Helmet/Helmet2/Helmet_2.png");
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.2660766f, 0.01589897f), new Vector2(-0.2694687f, -0.1229962f), new Vector2(-0.242685f, -0.1523953f), new Vector2(0.1075796f, -0.05327128f), new Vector2(0.03506026f, 0.07651318f), new Vector2(-0.142728f, 0.1f), };

                    Instance.GetComponent<PhysicalBehaviour>().RecalculateMassBasedOnSize();
                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.008f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.008f;
                    float xScale = 1.2f;
                    if (Instance.transform.localScale.x < 0)
                    {
                        xScale = -1.2f;
                    };

                    Instance.transform.localScale = new Vector3(xScale, 1.2f, 0);
                    Instance.GetComponent<SpriteRenderer>().sortingOrder = 1;
                    Instance.GetComponent<SpriteRenderer>().sortingLayerName = "Foreground";
                    Instance.GetOrAddComponent<Helmet>().HelmetName = $"{Mod.ModTag} Ops-Core FAST MT Helmet";
                }
            }
            );

            // FAST MT Headset Combo
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Stone Brick"), //item to derive from
                NameOverride = $"{Mod.ModTag} Ops-Core FAST MT Comtac Helmet", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "_3",                                       // \n\nThe Socom 556 Suppresor is designed and manufactured by surefire predominantly for military use, it is designed for 5.56mm weapons.", //new item description
                DescriptionOverride = "'FAST MT'  Helmet  Skins: 8                    \n\nThe Ops-Core FAST MT Helmet is a level IIIA rated ballistic helmet, includes 3 color variants and 2 NVG variants for each color.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Clothing/Helmet/Helmet3/Helmet_3_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Clothing/Helmet/Helmet3/Helmet_3.png"),
                        ModAPI.LoadSprite("Clothing/Helmet/Helmet3/Helmet_3_NVG_DOWN.png"),
                        ModAPI.LoadSprite("Clothing/Helmet/Helmet3/Helmet_3_NVG_UP.png"),
                    };
                    //Set to zero so it always starts normal
                    

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Clothing/Helmet/Helmet3/Helmet_3.png");
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.2660766f, 0.01589897f), new Vector2(-0.2694687f, -0.1229962f), new Vector2(-0.242685f, -0.1523953f), new Vector2(0.1075796f, -0.05327128f), new Vector2(0.03506026f, 0.07651318f), new Vector2(-0.142728f, 0.1f), };

                    Instance.GetComponent<PhysicalBehaviour>().RecalculateMassBasedOnSize();
                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.008f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.008f;
                    float xScale = 1.2f;
                    if (Instance.transform.localScale.x < 0)
                    {
                        xScale = -1.2f;
                    };

                    Instance.transform.localScale = new Vector3(xScale, 1.2f, 0);
                    Instance.GetComponent<SpriteRenderer>().sortingOrder = 1;
                    Instance.GetComponent<SpriteRenderer>().sortingLayerName = "Foreground";
                    Instance.GetOrAddComponent<Helmet>().HelmetName = $"{Mod.ModTag} Ops-Core FAST MT Comtac Helmet";
                }
            }
            );

            // Covered Ulach
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Stone Brick"), //item to derive from
                NameOverride = $"{Mod.ModTag} HighCom Covered Ulach Helmet", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "_3",                                       // \n\nThe Socom 556 Suppresor is designed and manufactured by surefire predominantly for military use, it is designed for 5.56mm weapons.", //new item description
                DescriptionOverride = "'Ulach'  Helmet  Skins: 8                      \n\nThe HighCom Covered Ulach Helmet is a level IIIA rated ballistic helmet, includes 3 color variants and 2 NVG variants for each color.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Clothing/Helmet/Helmet4/Helmet_4_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //Set the sprites
                    if(Instance.GetComponent<RandomSpriteBehaviour>() == null) {Instance.AddComponent<RandomSpriteBehaviour>().chosenIndex = 0;} Instance.GetComponent<RandomSpriteBehaviour>().sprites = new Sprite[]
                    {
                        ModAPI.LoadSprite("Clothing/Helmet/Helmet4/Helmet_4.png"),
                        ModAPI.LoadSprite("Clothing/Helmet/Helmet4/Helmet_4_NVG_DOWN.png"),
                        ModAPI.LoadSprite("Clothing/Helmet/Helmet4/Helmet_4_NVG_UP.png"),
                    };
                    //Set to zero so it always starts normal

                    //Set the sprite to the normal one
                    Instance.GetComponent<SpriteRenderer>().sprite = ModAPI.LoadSprite("Clothing/Helmet/Helmet4/Helmet_4.png");
                    Instance.FixColliders();
                    Instance.GetComponent<PolygonCollider2D>().points = new Vector2[] { new Vector2(-0.2660766f, 0.01589897f), new Vector2(-0.2694687f, -0.1229962f), new Vector2(-0.242685f, -0.1523953f), new Vector2(0.1075796f, -0.05327128f), new Vector2(0.03506026f, 0.07651318f), new Vector2(-0.142728f, 0.1f), };

                    Instance.GetComponent<PhysicalBehaviour>().RecalculateMassBasedOnSize();
                    Instance.GetComponent<Rigidbody2D>().mass = 0.01f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.008f;
                    Instance.GetComponent<PhysicalBehaviour>().TrueInitialMass = 0.008f;
                    float xScale = 1.2f;
                    if (Instance.transform.localScale.x < 0)
                    {
                        xScale = -1.2f;
                    };

                    Instance.transform.localScale = new Vector3(xScale, 1.2f, 0);
                    Instance.GetComponent<SpriteRenderer>().sortingOrder = 1;
                    Instance.GetComponent<SpriteRenderer>().sortingLayerName = "Foreground";
                    Instance.GetOrAddComponent<Helmet>().HelmetName = $"{Mod.ModTag} HighCom Covered Ulach Helmet";
                }
            }
            );

            #endregion


            // Uniforms
            ModAPI.Register(
            new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Human"), //item to derive from
                NameOverride = $"{Mod.ModTag} Human with Uniform", //new item name with a suffix to assure it is globally unique
                NameToOrderByOverride = "_1",                                       // \n\nThe Socom 556 Suppresor is designed and manufactured by surefire predominantly for military use, it is designed for 5.56mm weapons.", //new item description
                DescriptionOverride = "'Uniforms'  Uniforms  Skins: 8                 \n\nA human character with multiple uniforms, Relies on the Power Pack Framework to function properly, right click and click Change Skin.", //new item description
                CategoryOverride = ModAPI.FindCategory(ModCategoryName), //new item category
                ThumbnailOverride = ModAPI.LoadSprite("Clothing/Uniform_TN.png"), //new item thumbnail (relative path)
                AfterSpawn = (Instance) => //all code in the AfterSpawn delegate will be executed when the item is spawned
                {
                    //load textures for each layer (see Human textures folder in this repository)
                    var skin = ModAPI.LoadTexture("Clothing/Uniform_1_Black.png");

                    //get person
                    var person = Instance.GetComponent<PersonBehaviour>();

                    //use the helper function to set each texture
                    //parameters are as follows: 
                    //  skin texture, flesh texture, bone texture, sprite scale
                    //you can pass "null" to fall back to the original texture
                    person.SetBodyTextures(skin, null, null, 1);
                    
                    // Gets current scale on x in order to tell which direction the character is facing prior to scaling.
                    float xScale = 1.2f;
                    if (Instance.transform.localScale.x < 0)
                        {
                        xScale = -1.2f;
                        };

                    Instance.transform.localScale = new Vector3(xScale, 1.2f, 0);

                    PPF.PowerPackFrameworkFunctions.AddSkin(person, ModAPI.LoadTexture("Clothing/Uniform_2_Black.png"), "Black Uniform W/ Padding", "Black uniform with elbow & knee pads.");
                    PPF.PowerPackFrameworkFunctions.AddSkin(person, ModAPI.LoadTexture("Clothing/Uniform_3_Black.png"), "Black Uniform W/ Padding & Balaclava", "Black uniform with a balaclava and elbow & knee pads.");
                    PPF.PowerPackFrameworkFunctions.AddSkin(person, ModAPI.LoadTexture("Clothing/Uniform_1_Green.png"), "Green Uniform", "Plain Green uniform.");
                    PPF.PowerPackFrameworkFunctions.AddSkin(person, ModAPI.LoadTexture("Clothing/Uniform_2_Green.png"), "Green Uniform W/ Padding", "Green uniform with elbow & knee pads.");
                    PPF.PowerPackFrameworkFunctions.AddSkin(person, ModAPI.LoadTexture("Clothing/Uniform_3_Green.png"), "Green Uniform W/ Padding & Balaclava", "Green uniform with a balaclava and elbow & knee pads.");
                    PPF.PowerPackFrameworkFunctions.AddSkin(person, ModAPI.LoadTexture("Clothing/Uniform_1_Tan.png"), "Tan Uniform", "Plain Tan uniform.");
                    PPF.PowerPackFrameworkFunctions.AddSkin(person, ModAPI.LoadTexture("Clothing/Uniform_2_Tan.png"), "Tan Uniform W/ Padding", "Tan uniform with elbow & knee pads.");
                    PPF.PowerPackFrameworkFunctions.AddSkin(person, ModAPI.LoadTexture("Clothing/Uniform_3_Tan.png"), "Tan Uniform W/ Padding & Balaclava", "Tan uniform with a balaclava and elbow & knee pads.");
                }
            }
            );


        }
    }
}

// Originally uploaded by 'Team Wilson'. Do not reupload without their explicit permission.
